
BME680.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00002368  000023fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002368  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800220  00800220  0000241c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000244c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000248c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018ed  00000000  00000000  000025a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d49  00000000  00000000  00003e91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001354  00000000  00000000  00004bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  00005f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f7  00000000  00000000  00006334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000873  00000000  00000000  00006d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000759e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	70 c0       	rjmp	.+224    	; 0xe2 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 02       	muls	r19, r19
      ce:	39 02       	muls	r19, r25
      d0:	3f 02       	muls	r19, r31
      d2:	45 02       	muls	r20, r21
      d4:	4b 02       	muls	r20, r27
      d6:	51 02       	muls	r21, r17
      d8:	57 02       	muls	r21, r23
      da:	5d 02       	muls	r21, r29
      dc:	63 02       	muls	r22, r19
      de:	69 02       	muls	r22, r25
      e0:	6e 02       	muls	r22, r30

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf ef       	ldi	r28, 0xFF	; 255
      e8:	d1 e2       	ldi	r29, 0x21	; 33
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0c bf       	out	0x3c, r16	; 60

000000f2 <__do_copy_data>:
      f2:	12 e0       	ldi	r17, 0x02	; 2
      f4:	a0 e0       	ldi	r26, 0x00	; 0
      f6:	b2 e0       	ldi	r27, 0x02	; 2
      f8:	e8 e6       	ldi	r30, 0x68	; 104
      fa:	f3 e2       	ldi	r31, 0x23	; 35
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0b bf       	out	0x3b, r16	; 59
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x14>
     102:	07 90       	elpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a0 32       	cpi	r26, 0x20	; 32
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0x10>

0000010c <__do_clear_bss>:
     10c:	22 e0       	ldi	r18, 0x02	; 2
     10e:	a0 e2       	ldi	r26, 0x20	; 32
     110:	b2 e0       	ldi	r27, 0x02	; 2
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a5 32       	cpi	r26, 0x25	; 37
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	a1 d2       	rcall	.+1346   	; 0x660 <main>
     11e:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <USART0Init>:
	UBRR1H = (uiUbrr >> 8);		// Baudrate High Register setzen
	UBRR1L = uiUbrr;			// Baudrate Low Register  setzen
	UCSR1A = INIT_UCSR1A;		// UCSRA0 setzen
	UCSR1C = INIT_UCSR1C;		// UCSRC0 setzen
	UCSR1B = INIT_UCSR1B;		// UCSRB0 setzen
}
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	1f 92       	push	r1
     12a:	1f 92       	push	r1
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
     130:	9a 83       	std	Y+2, r25	; 0x02
     132:	89 83       	std	Y+1, r24	; 0x01
     134:	84 e6       	ldi	r24, 0x64	; 100
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	24 e6       	ldi	r18, 0x64	; 100
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	f9 01       	movw	r30, r18
     13e:	20 81       	ld	r18, Z
     140:	21 70       	andi	r18, 0x01	; 1
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
     146:	85 ec       	ldi	r24, 0xC5	; 197
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	29 81       	ldd	r18, Y+1	; 0x01
     14c:	3a 81       	ldd	r19, Y+2	; 0x02
     14e:	23 2f       	mov	r18, r19
     150:	33 27       	eor	r19, r19
     152:	fc 01       	movw	r30, r24
     154:	20 83       	st	Z, r18
     156:	84 ec       	ldi	r24, 0xC4	; 196
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	29 81       	ldd	r18, Y+1	; 0x01
     15c:	fc 01       	movw	r30, r24
     15e:	20 83       	st	Z, r18
     160:	80 ec       	ldi	r24, 0xC0	; 192
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	22 e0       	ldi	r18, 0x02	; 2
     166:	fc 01       	movw	r30, r24
     168:	20 83       	st	Z, r18
     16a:	82 ec       	ldi	r24, 0xC2	; 194
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	2e e0       	ldi	r18, 0x0E	; 14
     170:	fc 01       	movw	r30, r24
     172:	20 83       	st	Z, r18
     174:	81 ec       	ldi	r24, 0xC1	; 193
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	28 e9       	ldi	r18, 0x98	; 152
     17a:	fc 01       	movw	r30, r24
     17c:	20 83       	st	Z, r18
     17e:	00 00       	nop
     180:	0f 90       	pop	r0
     182:	0f 90       	pop	r0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <USART0SendByte>:

void USART0SendByte(unsigned char ucData)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	1f 92       	push	r1
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	89 83       	std	Y+1, r24	; 0x01
	while(!( UCSR0A & 0x20))
     196:	00 00       	nop
     198:	80 ec       	ldi	r24, 0xC0	; 192
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	80 81       	ld	r24, Z
     1a0:	88 2f       	mov	r24, r24
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	80 72       	andi	r24, 0x20	; 32
     1a6:	99 27       	eor	r25, r25
     1a8:	89 2b       	or	r24, r25
     1aa:	b1 f3       	breq	.-20     	; 0x198 <USART0SendByte+0xe>
	{
		// UDRE0 = 1: Buffer Leer, UDRE0 = 0: Buffer voll
		// Warten bis TX buffer leer ist
	}
	UDR0 = ucData;	// Daten senden
     1ac:	86 ec       	ldi	r24, 0xC6	; 198
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	29 81       	ldd	r18, Y+1	; 0x01
     1b2:	fc 01       	movw	r30, r24
     1b4:	20 83       	st	Z, r18
}
     1b6:	00 00       	nop
     1b8:	0f 90       	pop	r0
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	08 95       	ret

000001c0 <twi_send_start>:

#include "avr-twi-lib.h"

// Send start condition
static ret_code_t twi_send_start(void)
{
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
	// Send start condition
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     1c8:	8c eb       	ldi	r24, 0xBC	; 188
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	24 ea       	ldi	r18, 0xA4	; 164
     1ce:	fc 01       	movw	r30, r24
     1d0:	20 83       	st	Z, r18

	// Wait for operation to finish
	while(!(TWCR & (1 << TWINT)));
     1d2:	00 00       	nop
     1d4:	8c eb       	ldi	r24, 0xBC	; 188
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	fc 01       	movw	r30, r24
     1da:	80 81       	ld	r24, Z
     1dc:	88 23       	and	r24, r24
     1de:	d4 f7       	brge	.-12     	; 0x1d4 <twi_send_start+0x14>

	// Check TWSR Status register
	if(TWI_STATUS != 0x08)
     1e0:	89 eb       	ldi	r24, 0xB9	; 185
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	fc 01       	movw	r30, r24
     1e6:	80 81       	ld	r24, Z
     1e8:	88 2f       	mov	r24, r24
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	88 7f       	andi	r24, 0xF8	; 248
     1ee:	99 27       	eor	r25, r25
     1f0:	08 97       	sbiw	r24, 0x08	; 8
     1f2:	19 f0       	breq	.+6      	; 0x1fa <twi_send_start+0x3a>
	{
		return TWI_ERR_START;
     1f4:	83 e0       	ldi	r24, 0x03	; 3
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <twi_send_start+0x3e>
	}
	return TWI_SUCCESS;
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	90 e0       	ldi	r25, 0x00	; 0
}
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	08 95       	ret

00000204 <twi_send_sla_w>:

// Transmit slave address with write flag
static ret_code_t twi_send_sla_w(uint8_t slave_addr)
{
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	1f 92       	push	r1
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	89 83       	std	Y+1, r24	; 0x01
	// Write slave address
	TWDR = TWI_SLA_W(slave_addr);
     210:	8b eb       	ldi	r24, 0xBB	; 187
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	29 81       	ldd	r18, Y+1	; 0x01
     216:	22 0f       	add	r18, r18
     218:	fc 01       	movw	r30, r24
     21a:	20 83       	st	Z, r18
	// Write TWINT bit
	TWCR = (1 << TWINT) | (1 << TWEN);
     21c:	8c eb       	ldi	r24, 0xBC	; 188
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	24 e8       	ldi	r18, 0x84	; 132
     222:	fc 01       	movw	r30, r24
     224:	20 83       	st	Z, r18

	// Wait for operation to finish
	while(!(TWCR & (1 << TWINT)));
     226:	00 00       	nop
     228:	8c eb       	ldi	r24, 0xBC	; 188
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	fc 01       	movw	r30, r24
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	d4 f7       	brge	.-12     	; 0x228 <twi_send_sla_w+0x24>

	if(TWI_STATUS != 0x18)
     234:	89 eb       	ldi	r24, 0xB9	; 185
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	fc 01       	movw	r30, r24
     23a:	80 81       	ld	r24, Z
     23c:	88 2f       	mov	r24, r24
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	88 7f       	andi	r24, 0xF8	; 248
     242:	99 27       	eor	r25, r25
     244:	48 97       	sbiw	r24, 0x18	; 24
     246:	81 f0       	breq	.+32     	; 0x268 <twi_send_sla_w+0x64>
	{
		if(TWI_STATUS == 0x20)
     248:	89 eb       	ldi	r24, 0xB9	; 185
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	fc 01       	movw	r30, r24
     24e:	80 81       	ld	r24, Z
     250:	88 2f       	mov	r24, r24
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	88 7f       	andi	r24, 0xF8	; 248
     256:	99 27       	eor	r25, r25
     258:	80 97       	sbiw	r24, 0x20	; 32
     25a:	19 f4       	brne	.+6      	; 0x262 <twi_send_sla_w+0x5e>
		{
			// Received NACK
			return TWI_ERR_NACK;
     25c:	84 e0       	ldi	r24, 0x04	; 4
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	05 c0       	rjmp	.+10     	; 0x26c <twi_send_sla_w+0x68>
		}
		// unknow error code in TWSR
		return TWI_ERROR;
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	02 c0       	rjmp	.+4      	; 0x26c <twi_send_sla_w+0x68>
	}
	return TWI_SUCCESS;
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	90 e0       	ldi	r25, 0x00	; 0
}
     26c:	0f 90       	pop	r0
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <twi_send_sla_r>:

// Transmit slave address with read flag
static ret_code_t twi_send_sla_r(uint8_t slave_addr)
{
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	1f 92       	push	r1
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	89 83       	std	Y+1, r24	; 0x01
	// Write slave address
	TWDR = TWI_SLA_R(slave_addr);
     280:	8b eb       	ldi	r24, 0xBB	; 187
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	29 81       	ldd	r18, Y+1	; 0x01
     286:	22 2f       	mov	r18, r18
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	22 0f       	add	r18, r18
     28c:	33 1f       	adc	r19, r19
     28e:	21 60       	ori	r18, 0x01	; 1
     290:	fc 01       	movw	r30, r24
     292:	20 83       	st	Z, r18
	// Write TWINT bit
	TWCR = (1 << TWINT) | (1 << TWEN);
     294:	8c eb       	ldi	r24, 0xBC	; 188
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	24 e8       	ldi	r18, 0x84	; 132
     29a:	fc 01       	movw	r30, r24
     29c:	20 83       	st	Z, r18

	// Wait for operation to finish
	while(!(TWCR & (1 << TWINT)));
     29e:	00 00       	nop
     2a0:	8c eb       	ldi	r24, 0xBC	; 188
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	fc 01       	movw	r30, r24
     2a6:	80 81       	ld	r24, Z
     2a8:	88 23       	and	r24, r24
     2aa:	d4 f7       	brge	.-12     	; 0x2a0 <twi_send_sla_r+0x2c>

	if(TWI_STATUS != 0x40)
     2ac:	89 eb       	ldi	r24, 0xB9	; 185
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	fc 01       	movw	r30, r24
     2b2:	80 81       	ld	r24, Z
     2b4:	88 2f       	mov	r24, r24
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	88 7f       	andi	r24, 0xF8	; 248
     2ba:	99 27       	eor	r25, r25
     2bc:	80 34       	cpi	r24, 0x40	; 64
     2be:	91 05       	cpc	r25, r1
     2c0:	89 f0       	breq	.+34     	; 0x2e4 <twi_send_sla_r+0x70>
	{
		if(TWI_STATUS == 0x48)
     2c2:	89 eb       	ldi	r24, 0xB9	; 185
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	fc 01       	movw	r30, r24
     2c8:	80 81       	ld	r24, Z
     2ca:	88 2f       	mov	r24, r24
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	88 7f       	andi	r24, 0xF8	; 248
     2d0:	99 27       	eor	r25, r25
     2d2:	88 34       	cpi	r24, 0x48	; 72
     2d4:	91 05       	cpc	r25, r1
     2d6:	19 f4       	brne	.+6      	; 0x2de <twi_send_sla_r+0x6a>
		{
			// Received NACK
			return TWI_ERR_NACK;
     2d8:	84 e0       	ldi	r24, 0x04	; 4
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <twi_send_sla_r+0x74>
		}
		// unknow error code in TWSR
		return TWI_ERROR;
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <twi_send_sla_r+0x74>
	}
	return TWI_SUCCESS;
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
}
     2e8:	0f 90       	pop	r0
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <twi_send_data>:

// Send data byte
static ret_code_t twi_send_data(uint8_t data)
{
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	1f 92       	push	r1
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	89 83       	std	Y+1, r24	; 0x01
	// Write data byte
	TWDR = data;
     2fc:	8b eb       	ldi	r24, 0xBB	; 187
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	29 81       	ldd	r18, Y+1	; 0x01
     302:	fc 01       	movw	r30, r24
     304:	20 83       	st	Z, r18
	// Write TWINT bit
	TWCR = (1 << TWINT) | (1 << TWEN);
     306:	8c eb       	ldi	r24, 0xBC	; 188
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	24 e8       	ldi	r18, 0x84	; 132
     30c:	fc 01       	movw	r30, r24
     30e:	20 83       	st	Z, r18

	// Wait for operation to finish
	while(!(TWCR & (1 << TWINT)));
     310:	00 00       	nop
     312:	8c eb       	ldi	r24, 0xBC	; 188
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	fc 01       	movw	r30, r24
     318:	80 81       	ld	r24, Z
     31a:	88 23       	and	r24, r24
     31c:	d4 f7       	brge	.-12     	; 0x312 <twi_send_data+0x22>

	if(TWI_STATUS != 0x28)
     31e:	89 eb       	ldi	r24, 0xB9	; 185
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	fc 01       	movw	r30, r24
     324:	80 81       	ld	r24, Z
     326:	88 2f       	mov	r24, r24
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	88 7f       	andi	r24, 0xF8	; 248
     32c:	99 27       	eor	r25, r25
     32e:	88 97       	sbiw	r24, 0x28	; 40
     330:	81 f0       	breq	.+32     	; 0x352 <twi_send_data+0x62>
	{
		if(TWI_STATUS == 0x30)
     332:	89 eb       	ldi	r24, 0xB9	; 185
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	fc 01       	movw	r30, r24
     338:	80 81       	ld	r24, Z
     33a:	88 2f       	mov	r24, r24
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	88 7f       	andi	r24, 0xF8	; 248
     340:	99 27       	eor	r25, r25
     342:	c0 97       	sbiw	r24, 0x30	; 48
     344:	19 f4       	brne	.+6      	; 0x34c <twi_send_data+0x5c>
		{
			// Received NACK
			return TWI_ERR_NACK;
     346:	84 e0       	ldi	r24, 0x04	; 4
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	05 c0       	rjmp	.+10     	; 0x356 <twi_send_data+0x66>
		}
		// unknow error code in TWSR
		return TWI_ERROR;
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	02 c0       	rjmp	.+4      	; 0x356 <twi_send_data+0x66>
	}

	return TWI_SUCCESS;
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	90 e0       	ldi	r25, 0x00	; 0
}
     356:	0f 90       	pop	r0
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <twi_read_data>:

// Read data byte
static uint8_t twi_read_data(char read_ack)
{
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	1f 92       	push	r1
     364:	1f 92       	push	r1
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	8a 83       	std	Y+2, r24	; 0x02
	if(read_ack)
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	88 23       	and	r24, r24
     370:	e9 f0       	breq	.+58     	; 0x3ac <twi_read_data+0x4e>
	{
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     372:	8c eb       	ldi	r24, 0xBC	; 188
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	24 ec       	ldi	r18, 0xC4	; 196
     378:	fc 01       	movw	r30, r24
     37a:	20 83       	st	Z, r18
		while(!(TWCR & (1 << TWINT)));
     37c:	00 00       	nop
     37e:	8c eb       	ldi	r24, 0xBC	; 188
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	fc 01       	movw	r30, r24
     384:	80 81       	ld	r24, Z
     386:	88 23       	and	r24, r24
     388:	d4 f7       	brge	.-12     	; 0x37e <twi_read_data+0x20>
		if(TWI_STATUS != 0x50)
     38a:	89 eb       	ldi	r24, 0xB9	; 185
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	fc 01       	movw	r30, r24
     390:	80 81       	ld	r24, Z
     392:	88 2f       	mov	r24, r24
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	88 7f       	andi	r24, 0xF8	; 248
     398:	99 27       	eor	r25, r25
     39a:	80 35       	cpi	r24, 0x50	; 80
     39c:	91 05       	cpc	r25, r1
     39e:	19 f1       	breq	.+70     	; 0x3e6 <twi_read_data+0x88>
		{
			return TWI_STATUS;
     3a0:	89 eb       	ldi	r24, 0xB9	; 185
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	fc 01       	movw	r30, r24
     3a6:	80 81       	ld	r24, Z
     3a8:	88 7f       	andi	r24, 0xF8	; 248
     3aa:	23 c0       	rjmp	.+70     	; 0x3f2 <twi_read_data+0x94>
		}
	}
	else
	{
		TWCR = (1 << TWINT) | (1 << TWEN);
     3ac:	8c eb       	ldi	r24, 0xBC	; 188
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	24 e8       	ldi	r18, 0x84	; 132
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18
		while(!(TWCR & (1 << TWINT)));
     3b6:	00 00       	nop
     3b8:	8c eb       	ldi	r24, 0xBC	; 188
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	fc 01       	movw	r30, r24
     3be:	80 81       	ld	r24, Z
     3c0:	88 23       	and	r24, r24
     3c2:	d4 f7       	brge	.-12     	; 0x3b8 <twi_read_data+0x5a>
		if(TWI_STATUS != 0x58)
     3c4:	89 eb       	ldi	r24, 0xB9	; 185
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	fc 01       	movw	r30, r24
     3ca:	80 81       	ld	r24, Z
     3cc:	88 2f       	mov	r24, r24
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	88 7f       	andi	r24, 0xF8	; 248
     3d2:	99 27       	eor	r25, r25
     3d4:	88 35       	cpi	r24, 0x58	; 88
     3d6:	91 05       	cpc	r25, r1
     3d8:	31 f0       	breq	.+12     	; 0x3e6 <twi_read_data+0x88>
		{
			return TWI_STATUS;
     3da:	89 eb       	ldi	r24, 0xB9	; 185
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	fc 01       	movw	r30, r24
     3e0:	80 81       	ld	r24, Z
     3e2:	88 7f       	andi	r24, 0xF8	; 248
     3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <twi_read_data+0x94>
		}
	}
	uint8_t data = TWDR;
     3e6:	8b eb       	ldi	r24, 0xBB	; 187
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	fc 01       	movw	r30, r24
     3ec:	80 81       	ld	r24, Z
     3ee:	89 83       	std	Y+1, r24	; 0x01

	return data;
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
}
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <twi_send_stop>:

// Send stop condition
ret_code_t twi_send_stop(void)
{
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     404:	8c eb       	ldi	r24, 0xBC	; 188
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	24 e9       	ldi	r18, 0x94	; 148
     40a:	fc 01       	movw	r30, r24
     40c:	20 83       	st	Z, r18

	return TWI_SUCCESS;
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	90 e0       	ldi	r25, 0x00	; 0
}
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <twi_init>:

// Initialise TWI interface
ret_code_t twi_init(twi_freq_t twi_freq)
{
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	1f 92       	push	r1
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	89 83       	std	Y+1, r24	; 0x01
	// Set power reduction register
#if defined (__AVR_ATmega2561__)
	PRR0 &= ~(1 << PRTWI);
     424:	84 e6       	ldi	r24, 0x64	; 100
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	24 e6       	ldi	r18, 0x64	; 100
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	f9 01       	movw	r30, r18
     42e:	20 81       	ld	r18, Z
     430:	2f 77       	andi	r18, 0x7F	; 127
     432:	fc 01       	movw	r30, r24
     434:	20 83       	st	Z, r18
#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
	PRR &= ~(1 << PRTWI);
#endif

	// Set frequency
	switch(twi_freq)
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	88 2f       	mov	r24, r24
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	09 2e       	mov	r0, r25
     43e:	00 0c       	add	r0, r0
     440:	aa 0b       	sbc	r26, r26
     442:	bb 0b       	sbc	r27, r27
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	50 e0       	ldi	r21, 0x00	; 0
     448:	2a e0       	ldi	r18, 0x0A	; 10
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	84 1b       	sub	r24, r20
     44e:	95 0b       	sbc	r25, r21
     450:	28 17       	cp	r18, r24
     452:	39 07       	cpc	r19, r25
     454:	08 f4       	brcc	.+2      	; 0x458 <twi_init+0x40>
     456:	48 c0       	rjmp	.+144    	; 0x4e8 <twi_init+0xd0>
     458:	fc 01       	movw	r30, r24
     45a:	88 27       	eor	r24, r24
     45c:	ea 59       	subi	r30, 0x9A	; 154
     45e:	ff 4f       	sbci	r31, 0xFF	; 255
     460:	8f 4f       	sbci	r24, 0xFF	; 255
     462:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__tablejump2__>
	{
		case TWI_FREQ_100K_8M:
			// Set TWBR 32 and Prescaler 1 -> 8MHz / (16 + 2 * 32 * 1) = 100kHz
			TWBR = 32;
     466:	88 eb       	ldi	r24, 0xB8	; 184
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	20 e2       	ldi	r18, 0x20	; 32
     46c:	fc 01       	movw	r30, r24
     46e:	20 83       	st	Z, r18
			break;
     470:	3e c0       	rjmp	.+124    	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_100K_16M:
			// Set TWBR 32 and Prescaler 1 -> 16MHz / (16 + 2 * 72 * 1) = 100kHz
			TWBR = 72;
     472:	88 eb       	ldi	r24, 0xB8	; 184
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	28 e4       	ldi	r18, 0x48	; 72
     478:	fc 01       	movw	r30, r24
     47a:	20 83       	st	Z, r18
			break;
     47c:	38 c0       	rjmp	.+112    	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_100K_20M:
			// Set TWBR 32 and Prescaler 1 -> 20MHz / (16 + 2 * 92 * 1) = 100kHz
			TWBR = 92;
     47e:	88 eb       	ldi	r24, 0xB8	; 184
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	2c e5       	ldi	r18, 0x5C	; 92
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
			break;
     488:	32 c0       	rjmp	.+100    	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_250K_8M:
			// Set TWBR 8 and Prescaler 1 -> 8MHz / (16 + 2 * 8 * 1) = 250kHz
			TWBR = 8;
     48a:	88 eb       	ldi	r24, 0xB8	; 184
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	28 e0       	ldi	r18, 0x08	; 8
     490:	fc 01       	movw	r30, r24
     492:	20 83       	st	Z, r18
			break;
     494:	2c c0       	rjmp	.+88     	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_250K_16M:
			// Set TWBR 32 and Prescaler 1 -> 16MHz / (16 + 2 * 24 * 1) = 100kHz
			TWBR = 24;
     496:	88 eb       	ldi	r24, 0xB8	; 184
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	28 e1       	ldi	r18, 0x18	; 24
     49c:	fc 01       	movw	r30, r24
     49e:	20 83       	st	Z, r18
			break;
     4a0:	26 c0       	rjmp	.+76     	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_250K_20M:
			// Set TWBR 32 and Prescaler 1 -> 20MHz / (16 + 2 * 32 * 1) = 100kHz
			TWBR = 32;
     4a2:	88 eb       	ldi	r24, 0xB8	; 184
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	20 e2       	ldi	r18, 0x20	; 32
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18
			break;
     4ac:	20 c0       	rjmp	.+64     	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_400K_8M:
			// Set TWBR 2 and Prescaler 1 -> 8MHz / (16 + 2 * 2 * 1) = 400kHz
			TWBR = 2;
     4ae:	88 eb       	ldi	r24, 0xB8	; 184
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	22 e0       	ldi	r18, 0x02	; 2
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
			break;
     4b8:	1a c0       	rjmp	.+52     	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_400K_16M:
			// Set TWBR 32 and Prescaler 1 -> 16MHz / (16 + 2 * 12 * 1) = 100kHz
			TWBR = 12;
     4ba:	88 eb       	ldi	r24, 0xB8	; 184
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	2c e0       	ldi	r18, 0x0C	; 12
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 83       	st	Z, r18
			break;
     4c4:	14 c0       	rjmp	.+40     	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_400K_20M:
			// Set TWBR 32 and Prescaler 1 -> 20MHz / (16 + 2 * 17 * 1) = 100kHz
			TWBR = 17;
     4c6:	88 eb       	ldi	r24, 0xB8	; 184
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	21 e1       	ldi	r18, 0x11	; 17
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18
			break;
     4d0:	0e c0       	rjmp	.+28     	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_1M_16M:
			// Set TWBR 2 and Prescaler 1 -> 16MHz / (16 + 2 * 0 * 1) = 1MHz
			TWBR = 0;
     4d2:	88 eb       	ldi	r24, 0xB8	; 184
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	fc 01       	movw	r30, r24
     4d8:	10 82       	st	Z, r1
			break;
     4da:	09 c0       	rjmp	.+18     	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_1M_20M:
			// Set TWBR 32 and Prescaler 1 -> 20MHz / (16 + 2 * 2 * 1) = 100kHz
			TWBR = 2;
     4dc:	88 eb       	ldi	r24, 0xB8	; 184
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	22 e0       	ldi	r18, 0x02	; 2
     4e2:	fc 01       	movw	r30, r24
     4e4:	20 83       	st	Z, r18
			break;
     4e6:	03 c0       	rjmp	.+6      	; 0x4ee <twi_init+0xd6>
		default:
			return TWI_ERR_FREQ;
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <twi_init+0xda>
			break;
	}
	return TWI_SUCCESS;
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
}
     4f2:	0f 90       	pop	r0
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <twi_master_transmit>:

// Transmit on the TWI Interface as a master
ret_code_t twi_master_transmit(uint8_t slave_addr, uint8_t* pData, uint8_t len, char repeat_start)
{
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	29 97       	sbiw	r28, 0x09	; 9
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	de bf       	out	0x3e, r29	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	cd bf       	out	0x3d, r28	; 61
     50e:	8d 83       	std	Y+5, r24	; 0x05
     510:	7f 83       	std	Y+7, r23	; 0x07
     512:	6e 83       	std	Y+6, r22	; 0x06
     514:	48 87       	std	Y+8, r20	; 0x08
     516:	29 87       	std	Y+9, r18	; 0x09
	// Send start condition
	ret_code_t error_code = twi_send_start();
     518:	53 de       	rcall	.-858    	; 0x1c0 <twi_send_start>
     51a:	9c 83       	std	Y+4, r25	; 0x04
     51c:	8b 83       	std	Y+3, r24	; 0x03
	if(error_code != TWI_SUCCESS)
     51e:	8b 81       	ldd	r24, Y+3	; 0x03
     520:	9c 81       	ldd	r25, Y+4	; 0x04
     522:	89 2b       	or	r24, r25
     524:	19 f0       	breq	.+6      	; 0x52c <twi_master_transmit+0x32>
	{
		return error_code;
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	9c 81       	ldd	r25, Y+4	; 0x04
     52a:	33 c0       	rjmp	.+102    	; 0x592 <twi_master_transmit+0x98>
	}

	// Send slave address with write flag
	error_code = twi_send_sla_w(slave_addr);
     52c:	8d 81       	ldd	r24, Y+5	; 0x05
     52e:	6a de       	rcall	.-812    	; 0x204 <twi_send_sla_w>
     530:	9c 83       	std	Y+4, r25	; 0x04
     532:	8b 83       	std	Y+3, r24	; 0x03
	if(error_code != TWI_SUCCESS)
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	9c 81       	ldd	r25, Y+4	; 0x04
     538:	89 2b       	or	r24, r25
     53a:	19 f0       	breq	.+6      	; 0x542 <twi_master_transmit+0x48>
	{
		return error_code;
     53c:	8b 81       	ldd	r24, Y+3	; 0x03
     53e:	9c 81       	ldd	r25, Y+4	; 0x04
     540:	28 c0       	rjmp	.+80     	; 0x592 <twi_master_transmit+0x98>
	}

	// Send data byte or bytes
	for(int i = 0; i < len; i++)
     542:	1a 82       	std	Y+2, r1	; 0x02
     544:	19 82       	std	Y+1, r1	; 0x01
     546:	17 c0       	rjmp	.+46     	; 0x576 <twi_master_transmit+0x7c>
	{
		error_code = twi_send_data(pData[i]);
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	9a 81       	ldd	r25, Y+2	; 0x02
     54c:	2e 81       	ldd	r18, Y+6	; 0x06
     54e:	3f 81       	ldd	r19, Y+7	; 0x07
     550:	82 0f       	add	r24, r18
     552:	93 1f       	adc	r25, r19
     554:	fc 01       	movw	r30, r24
     556:	80 81       	ld	r24, Z
     558:	cb de       	rcall	.-618    	; 0x2f0 <twi_send_data>
     55a:	9c 83       	std	Y+4, r25	; 0x04
     55c:	8b 83       	std	Y+3, r24	; 0x03
		if(error_code != TWI_SUCCESS)
     55e:	8b 81       	ldd	r24, Y+3	; 0x03
     560:	9c 81       	ldd	r25, Y+4	; 0x04
     562:	89 2b       	or	r24, r25
     564:	19 f0       	breq	.+6      	; 0x56c <twi_master_transmit+0x72>
		{
			return error_code;
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	9c 81       	ldd	r25, Y+4	; 0x04
     56a:	13 c0       	rjmp	.+38     	; 0x592 <twi_master_transmit+0x98>
	{
		return error_code;
	}

	// Send data byte or bytes
	for(int i = 0; i < len; i++)
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	9a 81       	ldd	r25, Y+2	; 0x02
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	9a 83       	std	Y+2, r25	; 0x02
     574:	89 83       	std	Y+1, r24	; 0x01
     576:	88 85       	ldd	r24, Y+8	; 0x08
     578:	28 2f       	mov	r18, r24
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
     580:	82 17       	cp	r24, r18
     582:	93 07       	cpc	r25, r19
     584:	0c f3       	brlt	.-62     	; 0x548 <twi_master_transmit+0x4e>
			return error_code;
		}
	}

	// Send stop condition
	if(!repeat_start)
     586:	89 85       	ldd	r24, Y+9	; 0x09
     588:	88 23       	and	r24, r24
	{
		twi_send_stop();
     58a:	09 f4       	brne	.+2      	; 0x58e <twi_master_transmit+0x94>
     58c:	37 df       	rcall	.-402    	; 0x3fc <twi_send_stop>
	}

	return TWI_SUCCESS;
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
}
     592:	29 96       	adiw	r28, 0x09	; 9
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <twi_master_receive>:

ret_code_t twi_master_receive(uint8_t slave_addr, uint8_t* pData, uint8_t len)
{
     5a4:	0f 93       	push	r16
     5a6:	1f 93       	push	r17
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	cd b7       	in	r28, 0x3d	; 61
     5ae:	de b7       	in	r29, 0x3e	; 62
     5b0:	28 97       	sbiw	r28, 0x08	; 8
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	8d 83       	std	Y+5, r24	; 0x05
     5be:	7f 83       	std	Y+7, r23	; 0x07
     5c0:	6e 83       	std	Y+6, r22	; 0x06
     5c2:	48 87       	std	Y+8, r20	; 0x08
	// Send start condition
	ret_code_t error_code = twi_send_start();
     5c4:	fd dd       	rcall	.-1030   	; 0x1c0 <twi_send_start>
     5c6:	9c 83       	std	Y+4, r25	; 0x04
     5c8:	8b 83       	std	Y+3, r24	; 0x03
	if(error_code != TWI_SUCCESS)
     5ca:	8b 81       	ldd	r24, Y+3	; 0x03
     5cc:	9c 81       	ldd	r25, Y+4	; 0x04
     5ce:	89 2b       	or	r24, r25
     5d0:	19 f0       	breq	.+6      	; 0x5d8 <twi_master_receive+0x34>
	{
		return error_code;
     5d2:	8b 81       	ldd	r24, Y+3	; 0x03
     5d4:	9c 81       	ldd	r25, Y+4	; 0x04
     5d6:	39 c0       	rjmp	.+114    	; 0x64a <twi_master_receive+0xa6>
	}

	// Send slave address with write flag
	error_code = twi_send_sla_r(slave_addr);
     5d8:	8d 81       	ldd	r24, Y+5	; 0x05
     5da:	4c de       	rcall	.-872    	; 0x274 <twi_send_sla_r>
     5dc:	9c 83       	std	Y+4, r25	; 0x04
     5de:	8b 83       	std	Y+3, r24	; 0x03
	if(error_code != TWI_SUCCESS)
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	9c 81       	ldd	r25, Y+4	; 0x04
     5e4:	89 2b       	or	r24, r25
     5e6:	19 f0       	breq	.+6      	; 0x5ee <twi_master_receive+0x4a>
	{
		return error_code;
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	9c 81       	ldd	r25, Y+4	; 0x04
     5ec:	2e c0       	rjmp	.+92     	; 0x64a <twi_master_receive+0xa6>
	}

	/* Read single or multiple data byte and send ack */
	for(int i = 0; i < len-1; i++)
     5ee:	1a 82       	std	Y+2, r1	; 0x02
     5f0:	19 82       	std	Y+1, r1	; 0x01
     5f2:	10 c0       	rjmp	.+32     	; 0x614 <twi_master_receive+0x70>
	{
		pData[i] = twi_read_data(TWI_READ_ACK);
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	9a 81       	ldd	r25, Y+2	; 0x02
     5f8:	2e 81       	ldd	r18, Y+6	; 0x06
     5fa:	3f 81       	ldd	r19, Y+7	; 0x07
     5fc:	89 01       	movw	r16, r18
     5fe:	08 0f       	add	r16, r24
     600:	19 1f       	adc	r17, r25
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	ac de       	rcall	.-680    	; 0x35e <twi_read_data>
     606:	f8 01       	movw	r30, r16
     608:	80 83       	st	Z, r24
	{
		return error_code;
	}

	/* Read single or multiple data byte and send ack */
	for(int i = 0; i < len-1; i++)
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	9a 81       	ldd	r25, Y+2	; 0x02
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	9a 83       	std	Y+2, r25	; 0x02
     612:	89 83       	std	Y+1, r24	; 0x01
     614:	88 85       	ldd	r24, Y+8	; 0x08
     616:	88 2f       	mov	r24, r24
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	9c 01       	movw	r18, r24
     61c:	21 50       	subi	r18, 0x01	; 1
     61e:	31 09       	sbc	r19, r1
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	9a 81       	ldd	r25, Y+2	; 0x02
     624:	82 17       	cp	r24, r18
     626:	93 07       	cpc	r25, r19
     628:	2c f3       	brlt	.-54     	; 0x5f4 <twi_master_receive+0x50>
	{
		pData[i] = twi_read_data(TWI_READ_ACK);
	}
	pData[len-1] = twi_read_data(TWI_READ_NACK);
     62a:	88 85       	ldd	r24, Y+8	; 0x08
     62c:	88 2f       	mov	r24, r24
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	2e 81       	ldd	r18, Y+6	; 0x06
     634:	3f 81       	ldd	r19, Y+7	; 0x07
     636:	89 01       	movw	r16, r18
     638:	08 0f       	add	r16, r24
     63a:	19 1f       	adc	r17, r25
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	8f de       	rcall	.-738    	; 0x35e <twi_read_data>
     640:	f8 01       	movw	r30, r16

	/* Send STOP condition */
	twi_send_stop();
     642:	80 83       	st	Z, r24
     644:	db de       	rcall	.-586    	; 0x3fc <twi_send_stop>

	return TWI_SUCCESS;
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
}
     64a:	28 96       	adiw	r28, 0x08	; 8
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	08 95       	ret

00000660 <main>:

#include "Header.h"
volatile unsigned char cRecieve[5];

int main(void)
{
     660:	cf 92       	push	r12
     662:	df 92       	push	r13
     664:	ef 92       	push	r14
     666:	ff 92       	push	r15
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	c7 54       	subi	r28, 0x47	; 71
     672:	d1 09       	sbc	r29, r1
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
	char cRET = 0;
     67e:	19 8a       	std	Y+17, r1	; 0x11
	cRET = INIT();
     680:	d1 d3       	rcall	.+1954   	; 0xe24 <INIT>
     682:	89 8b       	std	Y+17, r24	; 0x11
	float TEMP;
	float PRESS;
	float HUM;
	char Ziffern[10];
	char TEMPRATURE[] = {'T','E','M','P','R','A','T','U','R','E',':',' '};
     684:	8c e0       	ldi	r24, 0x0C	; 12
     686:	e0 e0       	ldi	r30, 0x00	; 0
     688:	f2 e0       	ldi	r31, 0x02	; 2
     68a:	de 01       	movw	r26, r28
     68c:	98 96       	adiw	r26, 0x28	; 40
     68e:	01 90       	ld	r0, Z+
     690:	0d 92       	st	X+, r0
     692:	8a 95       	dec	r24
     694:	e1 f7       	brne	.-8      	; 0x68e <main+0x2e>
	char PRESSURE[] =	{'P','R','E','S','S','U','R','E',':',' '};
     696:	8a e0       	ldi	r24, 0x0A	; 10
     698:	ec e0       	ldi	r30, 0x0C	; 12
     69a:	f2 e0       	ldi	r31, 0x02	; 2
     69c:	de 01       	movw	r26, r28
     69e:	d4 96       	adiw	r26, 0x34	; 52
     6a0:	01 90       	ld	r0, Z+
     6a2:	0d 92       	st	X+, r0
     6a4:	8a 95       	dec	r24
     6a6:	e1 f7       	brne	.-8      	; 0x6a0 <main+0x40>
	char HUMIDITY[] =	{'H','U','M','I','D','I','T','Y',':',' '};
     6a8:	8a e0       	ldi	r24, 0x0A	; 10
     6aa:	e6 e1       	ldi	r30, 0x16	; 22
     6ac:	f2 e0       	ldi	r31, 0x02	; 2
     6ae:	de 01       	movw	r26, r28
     6b0:	de 96       	adiw	r26, 0x3e	; 62
     6b2:	01 90       	ld	r0, Z+
     6b4:	0d 92       	st	X+, r0
     6b6:	8a 95       	dec	r24
	
    /* Replace with your application code */
    while (1) 
    {
		
		START_CONVERSION();
     6b8:	e1 f7       	brne	.-8      	; 0x6b2 <main+0x52>
		TEMP = READ_TEMP_F();
     6ba:	31 d4       	rcall	.+2146   	; 0xf1e <START_CONVERSION>
     6bc:	56 d4       	rcall	.+2220   	; 0xf6a <READ_TEMP_F>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	8a 8b       	std	Y+18, r24	; 0x12
     6c4:	9b 8b       	std	Y+19, r25	; 0x13
     6c6:	ac 8b       	std	Y+20, r26	; 0x14
		PRESS = READ_PRESS();
     6c8:	bd 8b       	std	Y+21, r27	; 0x15
     6ca:	28 d6       	rcall	.+3152   	; 0x131c <READ_PRESS>
     6cc:	dc 01       	movw	r26, r24
     6ce:	cb 01       	movw	r24, r22
     6d0:	8e 8b       	std	Y+22, r24	; 0x16
     6d2:	9f 8b       	std	Y+23, r25	; 0x17
     6d4:	a8 8f       	std	Y+24, r26	; 0x18
     6d6:	b9 8f       	std	Y+25, r27	; 0x19
		HUM = READ_HUM ();
     6d8:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <READ_HUM>
     6dc:	dc 01       	movw	r26, r24
     6de:	cb 01       	movw	r24, r22
     6e0:	8a 8f       	std	Y+26, r24	; 0x1a
     6e2:	9b 8f       	std	Y+27, r25	; 0x1b
     6e4:	ac 8f       	std	Y+28, r26	; 0x1c
     6e6:	bd 8f       	std	Y+29, r27	; 0x1d
		
		Ziffern[0] = TEMP / 10;
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e2       	ldi	r20, 0x20	; 32
     6ee:	51 e4       	ldi	r21, 0x41	; 65
     6f0:	6a 89       	ldd	r22, Y+18	; 0x12
     6f2:	7b 89       	ldd	r23, Y+19	; 0x13
     6f4:	8c 89       	ldd	r24, Y+20	; 0x14
     6f6:	9d 89       	ldd	r25, Y+21	; 0x15
     6f8:	0e 94 20 10 	call	0x2040	; 0x2040 <__divsf3>
     6fc:	dc 01       	movw	r26, r24
     6fe:	cb 01       	movw	r24, r22
     700:	bc 01       	movw	r22, r24
     702:	cd 01       	movw	r24, r26
     704:	0e 94 8d 10 	call	0x211a	; 0x211a <__fixunssfsi>
     708:	dc 01       	movw	r26, r24
     70a:	cb 01       	movw	r24, r22
     70c:	8e 8f       	std	Y+30, r24	; 0x1e
		Ziffern[1] = TEMP  - Ziffern[0] * 10;
     70e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     710:	88 2f       	mov	r24, r24
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	88 0f       	add	r24, r24
     716:	99 1f       	adc	r25, r25
     718:	9c 01       	movw	r18, r24
     71a:	22 0f       	add	r18, r18
     71c:	33 1f       	adc	r19, r19
     71e:	22 0f       	add	r18, r18
     720:	33 1f       	adc	r19, r19
     722:	82 0f       	add	r24, r18
     724:	93 1f       	adc	r25, r19
     726:	09 2e       	mov	r0, r25
     728:	00 0c       	add	r0, r0
     72a:	aa 0b       	sbc	r26, r26
     72c:	bb 0b       	sbc	r27, r27
     72e:	bc 01       	movw	r22, r24
     730:	cd 01       	movw	r24, r26
     732:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     736:	dc 01       	movw	r26, r24
     738:	cb 01       	movw	r24, r22
     73a:	9c 01       	movw	r18, r24
     73c:	ad 01       	movw	r20, r26
     73e:	6a 89       	ldd	r22, Y+18	; 0x12
     740:	7b 89       	ldd	r23, Y+19	; 0x13
     742:	8c 89       	ldd	r24, Y+20	; 0x14
     744:	9d 89       	ldd	r25, Y+21	; 0x15
     746:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     74a:	dc 01       	movw	r26, r24
     74c:	cb 01       	movw	r24, r22
     74e:	bc 01       	movw	r22, r24
     750:	cd 01       	movw	r24, r26
     752:	0e 94 8d 10 	call	0x211a	; 0x211a <__fixunssfsi>
     756:	dc 01       	movw	r26, r24
     758:	cb 01       	movw	r24, r22
     75a:	8f 8f       	std	Y+31, r24	; 0x1f
		Ziffern[2] = (TEMP - Ziffern[0] * 10 -  Ziffern[1]) * 10;
     75c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     75e:	88 2f       	mov	r24, r24
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	88 0f       	add	r24, r24
     764:	99 1f       	adc	r25, r25
     766:	9c 01       	movw	r18, r24
     768:	22 0f       	add	r18, r18
     76a:	33 1f       	adc	r19, r19
     76c:	22 0f       	add	r18, r18
     76e:	33 1f       	adc	r19, r19
     770:	82 0f       	add	r24, r18
     772:	93 1f       	adc	r25, r19
     774:	09 2e       	mov	r0, r25
     776:	00 0c       	add	r0, r0
     778:	aa 0b       	sbc	r26, r26
     77a:	bb 0b       	sbc	r27, r27
     77c:	bc 01       	movw	r22, r24
     77e:	cd 01       	movw	r24, r26
     780:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     784:	dc 01       	movw	r26, r24
     786:	cb 01       	movw	r24, r22
     788:	9c 01       	movw	r18, r24
     78a:	ad 01       	movw	r20, r26
     78c:	6a 89       	ldd	r22, Y+18	; 0x12
     78e:	7b 89       	ldd	r23, Y+19	; 0x13
     790:	8c 89       	ldd	r24, Y+20	; 0x14
     792:	9d 89       	ldd	r25, Y+21	; 0x15
     794:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     798:	dc 01       	movw	r26, r24
     79a:	cb 01       	movw	r24, r22
     79c:	6c 01       	movw	r12, r24
     79e:	7d 01       	movw	r14, r26
     7a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     7a2:	88 2f       	mov	r24, r24
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	09 2e       	mov	r0, r25
     7a8:	00 0c       	add	r0, r0
     7aa:	aa 0b       	sbc	r26, r26
     7ac:	bb 0b       	sbc	r27, r27
     7ae:	bc 01       	movw	r22, r24
     7b0:	cd 01       	movw	r24, r26
     7b2:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     7b6:	dc 01       	movw	r26, r24
     7b8:	cb 01       	movw	r24, r22
     7ba:	9c 01       	movw	r18, r24
     7bc:	ad 01       	movw	r20, r26
     7be:	c7 01       	movw	r24, r14
     7c0:	b6 01       	movw	r22, r12
     7c2:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     7c6:	dc 01       	movw	r26, r24
     7c8:	cb 01       	movw	r24, r22
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	40 e2       	ldi	r20, 0x20	; 32
     7d0:	51 e4       	ldi	r21, 0x41	; 65
     7d2:	bc 01       	movw	r22, r24
     7d4:	cd 01       	movw	r24, r26
     7d6:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     7da:	dc 01       	movw	r26, r24
     7dc:	cb 01       	movw	r24, r22
     7de:	bc 01       	movw	r22, r24
     7e0:	cd 01       	movw	r24, r26
     7e2:	0e 94 8d 10 	call	0x211a	; 0x211a <__fixunssfsi>
     7e6:	dc 01       	movw	r26, r24
     7e8:	cb 01       	movw	r24, r22
     7ea:	88 a3       	std	Y+32, r24	; 0x20
		Ziffern[3] = (TEMP - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
     7ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
     7ee:	88 2f       	mov	r24, r24
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	88 0f       	add	r24, r24
     7f4:	99 1f       	adc	r25, r25
     7f6:	9c 01       	movw	r18, r24
     7f8:	22 0f       	add	r18, r18
     7fa:	33 1f       	adc	r19, r19
     7fc:	22 0f       	add	r18, r18
     7fe:	33 1f       	adc	r19, r19
     800:	82 0f       	add	r24, r18
     802:	93 1f       	adc	r25, r19
     804:	09 2e       	mov	r0, r25
     806:	00 0c       	add	r0, r0
     808:	aa 0b       	sbc	r26, r26
     80a:	bb 0b       	sbc	r27, r27
     80c:	bc 01       	movw	r22, r24
     80e:	cd 01       	movw	r24, r26
     810:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     814:	dc 01       	movw	r26, r24
     816:	cb 01       	movw	r24, r22
     818:	9c 01       	movw	r18, r24
     81a:	ad 01       	movw	r20, r26
     81c:	6a 89       	ldd	r22, Y+18	; 0x12
     81e:	7b 89       	ldd	r23, Y+19	; 0x13
     820:	8c 89       	ldd	r24, Y+20	; 0x14
     822:	9d 89       	ldd	r25, Y+21	; 0x15
     824:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     828:	dc 01       	movw	r26, r24
     82a:	cb 01       	movw	r24, r22
     82c:	6c 01       	movw	r12, r24
     82e:	7d 01       	movw	r14, r26
     830:	8f 8d       	ldd	r24, Y+31	; 0x1f
     832:	88 2f       	mov	r24, r24
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	09 2e       	mov	r0, r25
     838:	00 0c       	add	r0, r0
     83a:	aa 0b       	sbc	r26, r26
     83c:	bb 0b       	sbc	r27, r27
     83e:	bc 01       	movw	r22, r24
     840:	cd 01       	movw	r24, r26
     842:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     846:	dc 01       	movw	r26, r24
     848:	cb 01       	movw	r24, r22
     84a:	9c 01       	movw	r18, r24
     84c:	ad 01       	movw	r20, r26
     84e:	c7 01       	movw	r24, r14
     850:	b6 01       	movw	r22, r12
     852:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     856:	dc 01       	movw	r26, r24
     858:	cb 01       	movw	r24, r22
     85a:	6c 01       	movw	r12, r24
     85c:	7d 01       	movw	r14, r26
     85e:	88 a1       	ldd	r24, Y+32	; 0x20
     860:	88 2f       	mov	r24, r24
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	a0 e0       	ldi	r26, 0x00	; 0
     866:	b0 e0       	ldi	r27, 0x00	; 0
     868:	bc 01       	movw	r22, r24
     86a:	cd 01       	movw	r24, r26
     86c:	0e 94 b9 10 	call	0x2172	; 0x2172 <__floatunsisf>
     870:	dc 01       	movw	r26, r24
     872:	cb 01       	movw	r24, r22
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	40 e2       	ldi	r20, 0x20	; 32
     87a:	51 e4       	ldi	r21, 0x41	; 65
     87c:	bc 01       	movw	r22, r24
     87e:	cd 01       	movw	r24, r26
     880:	0e 94 20 10 	call	0x2040	; 0x2040 <__divsf3>
     884:	dc 01       	movw	r26, r24
     886:	cb 01       	movw	r24, r22
     888:	9c 01       	movw	r18, r24
     88a:	ad 01       	movw	r20, r26
     88c:	c7 01       	movw	r24, r14
     88e:	b6 01       	movw	r22, r12
     890:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	48 ec       	ldi	r20, 0xC8	; 200
     89e:	52 e4       	ldi	r21, 0x42	; 66
     8a0:	bc 01       	movw	r22, r24
     8a2:	cd 01       	movw	r24, r26
     8a4:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	bc 01       	movw	r22, r24
     8ae:	cd 01       	movw	r24, r26
     8b0:	0e 94 8d 10 	call	0x211a	; 0x211a <__fixunssfsi>
     8b4:	dc 01       	movw	r26, r24
     8b6:	cb 01       	movw	r24, r22
     8b8:	89 a3       	std	Y+33, r24	; 0x21
		for(int i = 0; i < 12; i++)
     8ba:	1a 82       	std	Y+2, r1	; 0x02
     8bc:	19 82       	std	Y+1, r1	; 0x01
     8be:	0f c0       	rjmp	.+30     	; 0x8de <main+0x27e>
		{
			USART0SendByte(TEMPRATURE[i]);
     8c0:	9e 01       	movw	r18, r28
     8c2:	28 5d       	subi	r18, 0xD8	; 216
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	89 81       	ldd	r24, Y+1	; 0x01
     8c8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ca:	82 0f       	add	r24, r18
     8cc:	93 1f       	adc	r25, r19
     8ce:	fc 01       	movw	r30, r24
     8d0:	80 81       	ld	r24, Z
     8d2:	5b dc       	rcall	.-1866   	; 0x18a <USART0SendByte>
		
		Ziffern[0] = TEMP / 10;
		Ziffern[1] = TEMP  - Ziffern[0] * 10;
		Ziffern[2] = (TEMP - Ziffern[0] * 10 -  Ziffern[1]) * 10;
		Ziffern[3] = (TEMP - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
		for(int i = 0; i < 12; i++)
     8d4:	89 81       	ldd	r24, Y+1	; 0x01
     8d6:	9a 81       	ldd	r25, Y+2	; 0x02
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	9a 83       	std	Y+2, r25	; 0x02
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	89 81       	ldd	r24, Y+1	; 0x01
     8e0:	9a 81       	ldd	r25, Y+2	; 0x02
     8e2:	0c 97       	sbiw	r24, 0x0c	; 12
     8e4:	6c f3       	brlt	.-38     	; 0x8c0 <main+0x260>
		{
			USART0SendByte(TEMPRATURE[i]);
		}	
		for (int i = 0; i < 2; i++)
     8e6:	1c 82       	std	Y+4, r1	; 0x04
     8e8:	1b 82       	std	Y+3, r1	; 0x03
     8ea:	10 c0       	rjmp	.+32     	; 0x90c <main+0x2ac>
		{
			USART0SendByte(Ziffern[i] + 0x30);
     8ec:	9e 01       	movw	r18, r28
     8ee:	22 5e       	subi	r18, 0xE2	; 226
     8f0:	3f 4f       	sbci	r19, 0xFF	; 255
     8f2:	8b 81       	ldd	r24, Y+3	; 0x03
     8f4:	9c 81       	ldd	r25, Y+4	; 0x04
     8f6:	82 0f       	add	r24, r18
     8f8:	93 1f       	adc	r25, r19
     8fa:	fc 01       	movw	r30, r24
     8fc:	80 81       	ld	r24, Z
     8fe:	80 5d       	subi	r24, 0xD0	; 208
     900:	44 dc       	rcall	.-1912   	; 0x18a <USART0SendByte>
		Ziffern[3] = (TEMP - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
		for(int i = 0; i < 12; i++)
		{
			USART0SendByte(TEMPRATURE[i]);
		}	
		for (int i = 0; i < 2; i++)
     902:	8b 81       	ldd	r24, Y+3	; 0x03
     904:	9c 81       	ldd	r25, Y+4	; 0x04
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	9c 83       	std	Y+4, r25	; 0x04
     90a:	8b 83       	std	Y+3, r24	; 0x03
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	9c 81       	ldd	r25, Y+4	; 0x04
     910:	02 97       	sbiw	r24, 0x02	; 2
		{
			USART0SendByte(Ziffern[i] + 0x30);
		}
		USART0SendByte(0x2E);
     912:	64 f3       	brlt	.-40     	; 0x8ec <main+0x28c>
     914:	8e e2       	ldi	r24, 0x2E	; 46
     916:	39 dc       	rcall	.-1934   	; 0x18a <USART0SendByte>
		for (int i = 0; i < 2; i++)
     918:	1e 82       	std	Y+6, r1	; 0x06
     91a:	1d 82       	std	Y+5, r1	; 0x05
     91c:	11 c0       	rjmp	.+34     	; 0x940 <main+0x2e0>
		{
			USART0SendByte(Ziffern[i+2] + 0x30);
     91e:	8d 81       	ldd	r24, Y+5	; 0x05
     920:	9e 81       	ldd	r25, Y+6	; 0x06
     922:	02 96       	adiw	r24, 0x02	; 2
     924:	9e 01       	movw	r18, r28
     926:	22 5e       	subi	r18, 0xE2	; 226
     928:	3f 4f       	sbci	r19, 0xFF	; 255
     92a:	82 0f       	add	r24, r18
     92c:	93 1f       	adc	r25, r19
     92e:	fc 01       	movw	r30, r24
     930:	80 81       	ld	r24, Z
     932:	80 5d       	subi	r24, 0xD0	; 208
     934:	2a dc       	rcall	.-1964   	; 0x18a <USART0SendByte>
		for (int i = 0; i < 2; i++)
		{
			USART0SendByte(Ziffern[i] + 0x30);
		}
		USART0SendByte(0x2E);
		for (int i = 0; i < 2; i++)
     936:	8d 81       	ldd	r24, Y+5	; 0x05
     938:	9e 81       	ldd	r25, Y+6	; 0x06
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	9e 83       	std	Y+6, r25	; 0x06
     93e:	8d 83       	std	Y+5, r24	; 0x05
     940:	8d 81       	ldd	r24, Y+5	; 0x05
     942:	9e 81       	ldd	r25, Y+6	; 0x06
     944:	02 97       	sbiw	r24, 0x02	; 2
		{
			USART0SendByte(Ziffern[i+2] + 0x30);
		}
		
		USART0SendByte(',');
     946:	5c f3       	brlt	.-42     	; 0x91e <main+0x2be>
     948:	8c e2       	ldi	r24, 0x2C	; 44
     94a:	1f dc       	rcall	.-1986   	; 0x18a <USART0SendByte>
		USART0SendByte(' ');
     94c:	80 e2       	ldi	r24, 0x20	; 32
     94e:	1d dc       	rcall	.-1990   	; 0x18a <USART0SendByte>
     950:	20 e0       	ldi	r18, 0x00	; 0
		
		PRESS = PRESS / 100;
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	48 ec       	ldi	r20, 0xC8	; 200
     956:	52 e4       	ldi	r21, 0x42	; 66
     958:	6e 89       	ldd	r22, Y+22	; 0x16
     95a:	7f 89       	ldd	r23, Y+23	; 0x17
     95c:	88 8d       	ldd	r24, Y+24	; 0x18
     95e:	99 8d       	ldd	r25, Y+25	; 0x19
     960:	0e 94 20 10 	call	0x2040	; 0x2040 <__divsf3>
     964:	dc 01       	movw	r26, r24
     966:	cb 01       	movw	r24, r22
     968:	8e 8b       	std	Y+22, r24	; 0x16
     96a:	9f 8b       	std	Y+23, r25	; 0x17
     96c:	a8 8f       	std	Y+24, r26	; 0x18
     96e:	b9 8f       	std	Y+25, r27	; 0x19
     970:	20 e0       	ldi	r18, 0x00	; 0
		Ziffern[0] = PRESS / 1000;
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	4a e7       	ldi	r20, 0x7A	; 122
     976:	54 e4       	ldi	r21, 0x44	; 68
     978:	6e 89       	ldd	r22, Y+22	; 0x16
     97a:	7f 89       	ldd	r23, Y+23	; 0x17
     97c:	88 8d       	ldd	r24, Y+24	; 0x18
     97e:	99 8d       	ldd	r25, Y+25	; 0x19
     980:	0e 94 20 10 	call	0x2040	; 0x2040 <__divsf3>
     984:	dc 01       	movw	r26, r24
     986:	cb 01       	movw	r24, r22
     988:	bc 01       	movw	r22, r24
     98a:	cd 01       	movw	r24, r26
     98c:	0e 94 8d 10 	call	0x211a	; 0x211a <__fixunssfsi>
     990:	dc 01       	movw	r26, r24
     992:	cb 01       	movw	r24, r22
     994:	8e 8f       	std	Y+30, r24	; 0x1e
     996:	8e 8d       	ldd	r24, Y+30	; 0x1e
		Ziffern[1] = (PRESS - Ziffern[0] * 1000) / 100; 
     998:	48 2f       	mov	r20, r24
     99a:	50 e0       	ldi	r21, 0x00	; 0
     99c:	28 ee       	ldi	r18, 0xE8	; 232
     99e:	33 e0       	ldi	r19, 0x03	; 3
     9a0:	42 9f       	mul	r20, r18
     9a2:	c0 01       	movw	r24, r0
     9a4:	43 9f       	mul	r20, r19
     9a6:	90 0d       	add	r25, r0
     9a8:	52 9f       	mul	r21, r18
     9aa:	90 0d       	add	r25, r0
     9ac:	11 24       	eor	r1, r1
     9ae:	09 2e       	mov	r0, r25
     9b0:	00 0c       	add	r0, r0
     9b2:	aa 0b       	sbc	r26, r26
     9b4:	bb 0b       	sbc	r27, r27
     9b6:	bc 01       	movw	r22, r24
     9b8:	cd 01       	movw	r24, r26
     9ba:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     9be:	dc 01       	movw	r26, r24
     9c0:	cb 01       	movw	r24, r22
     9c2:	9c 01       	movw	r18, r24
     9c4:	ad 01       	movw	r20, r26
     9c6:	6e 89       	ldd	r22, Y+22	; 0x16
     9c8:	7f 89       	ldd	r23, Y+23	; 0x17
     9ca:	88 8d       	ldd	r24, Y+24	; 0x18
     9cc:	99 8d       	ldd	r25, Y+25	; 0x19
     9ce:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     9d2:	dc 01       	movw	r26, r24
     9d4:	cb 01       	movw	r24, r22
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	48 ec       	ldi	r20, 0xC8	; 200
     9dc:	52 e4       	ldi	r21, 0x42	; 66
     9de:	bc 01       	movw	r22, r24
     9e0:	cd 01       	movw	r24, r26
     9e2:	0e 94 20 10 	call	0x2040	; 0x2040 <__divsf3>
     9e6:	dc 01       	movw	r26, r24
     9e8:	cb 01       	movw	r24, r22
     9ea:	bc 01       	movw	r22, r24
     9ec:	cd 01       	movw	r24, r26
     9ee:	0e 94 8d 10 	call	0x211a	; 0x211a <__fixunssfsi>
     9f2:	dc 01       	movw	r26, r24
     9f4:	cb 01       	movw	r24, r22
     9f6:	8f 8f       	std	Y+31, r24	; 0x1f
     9f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
		Ziffern[2] = (PRESS - Ziffern[0] * 1000 - Ziffern[1] * 100) / 10; 
     9fa:	48 2f       	mov	r20, r24
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	28 ee       	ldi	r18, 0xE8	; 232
     a00:	33 e0       	ldi	r19, 0x03	; 3
     a02:	42 9f       	mul	r20, r18
     a04:	c0 01       	movw	r24, r0
     a06:	43 9f       	mul	r20, r19
     a08:	90 0d       	add	r25, r0
     a0a:	52 9f       	mul	r21, r18
     a0c:	90 0d       	add	r25, r0
     a0e:	11 24       	eor	r1, r1
     a10:	09 2e       	mov	r0, r25
     a12:	00 0c       	add	r0, r0
     a14:	aa 0b       	sbc	r26, r26
     a16:	bb 0b       	sbc	r27, r27
     a18:	bc 01       	movw	r22, r24
     a1a:	cd 01       	movw	r24, r26
     a1c:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	9c 01       	movw	r18, r24
     a26:	ad 01       	movw	r20, r26
     a28:	6e 89       	ldd	r22, Y+22	; 0x16
     a2a:	7f 89       	ldd	r23, Y+23	; 0x17
     a2c:	88 8d       	ldd	r24, Y+24	; 0x18
     a2e:	99 8d       	ldd	r25, Y+25	; 0x19
     a30:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     a34:	dc 01       	movw	r26, r24
     a36:	cb 01       	movw	r24, r22
     a38:	6c 01       	movw	r12, r24
     a3a:	7d 01       	movw	r14, r26
     a3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a3e:	28 2f       	mov	r18, r24
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	44 e6       	ldi	r20, 0x64	; 100
     a44:	42 9f       	mul	r20, r18
     a46:	c0 01       	movw	r24, r0
     a48:	43 9f       	mul	r20, r19
     a4a:	90 0d       	add	r25, r0
     a4c:	11 24       	eor	r1, r1
     a4e:	09 2e       	mov	r0, r25
     a50:	00 0c       	add	r0, r0
     a52:	aa 0b       	sbc	r26, r26
     a54:	bb 0b       	sbc	r27, r27
     a56:	bc 01       	movw	r22, r24
     a58:	cd 01       	movw	r24, r26
     a5a:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     a5e:	dc 01       	movw	r26, r24
     a60:	cb 01       	movw	r24, r22
     a62:	9c 01       	movw	r18, r24
     a64:	ad 01       	movw	r20, r26
     a66:	c7 01       	movw	r24, r14
     a68:	b6 01       	movw	r22, r12
     a6a:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     a6e:	dc 01       	movw	r26, r24
     a70:	cb 01       	movw	r24, r22
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e2       	ldi	r20, 0x20	; 32
     a78:	51 e4       	ldi	r21, 0x41	; 65
     a7a:	bc 01       	movw	r22, r24
     a7c:	cd 01       	movw	r24, r26
     a7e:	0e 94 20 10 	call	0x2040	; 0x2040 <__divsf3>
     a82:	dc 01       	movw	r26, r24
     a84:	cb 01       	movw	r24, r22
     a86:	bc 01       	movw	r22, r24
     a88:	cd 01       	movw	r24, r26
     a8a:	0e 94 8d 10 	call	0x211a	; 0x211a <__fixunssfsi>
     a8e:	dc 01       	movw	r26, r24
     a90:	cb 01       	movw	r24, r22
     a92:	88 a3       	std	Y+32, r24	; 0x20
     a94:	8e 8d       	ldd	r24, Y+30	; 0x1e
		Ziffern[3] = (PRESS - Ziffern[0] * 1000 - Ziffern[1] * 100 - Ziffern[2] * 10); 
     a96:	48 2f       	mov	r20, r24
     a98:	50 e0       	ldi	r21, 0x00	; 0
     a9a:	28 ee       	ldi	r18, 0xE8	; 232
     a9c:	33 e0       	ldi	r19, 0x03	; 3
     a9e:	42 9f       	mul	r20, r18
     aa0:	c0 01       	movw	r24, r0
     aa2:	43 9f       	mul	r20, r19
     aa4:	90 0d       	add	r25, r0
     aa6:	52 9f       	mul	r21, r18
     aa8:	90 0d       	add	r25, r0
     aaa:	11 24       	eor	r1, r1
     aac:	09 2e       	mov	r0, r25
     aae:	00 0c       	add	r0, r0
     ab0:	aa 0b       	sbc	r26, r26
     ab2:	bb 0b       	sbc	r27, r27
     ab4:	bc 01       	movw	r22, r24
     ab6:	cd 01       	movw	r24, r26
     ab8:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     abc:	dc 01       	movw	r26, r24
     abe:	cb 01       	movw	r24, r22
     ac0:	9c 01       	movw	r18, r24
     ac2:	ad 01       	movw	r20, r26
     ac4:	6e 89       	ldd	r22, Y+22	; 0x16
     ac6:	7f 89       	ldd	r23, Y+23	; 0x17
     ac8:	88 8d       	ldd	r24, Y+24	; 0x18
     aca:	99 8d       	ldd	r25, Y+25	; 0x19
     acc:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	6c 01       	movw	r12, r24
     ad6:	7d 01       	movw	r14, r26
     ad8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ada:	28 2f       	mov	r18, r24
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	44 e6       	ldi	r20, 0x64	; 100
     ae0:	42 9f       	mul	r20, r18
     ae2:	c0 01       	movw	r24, r0
     ae4:	43 9f       	mul	r20, r19
     ae6:	90 0d       	add	r25, r0
     ae8:	11 24       	eor	r1, r1
     aea:	09 2e       	mov	r0, r25
     aec:	00 0c       	add	r0, r0
     aee:	aa 0b       	sbc	r26, r26
     af0:	bb 0b       	sbc	r27, r27
     af2:	bc 01       	movw	r22, r24
     af4:	cd 01       	movw	r24, r26
     af6:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     afa:	dc 01       	movw	r26, r24
     afc:	cb 01       	movw	r24, r22
     afe:	9c 01       	movw	r18, r24
     b00:	ad 01       	movw	r20, r26
     b02:	c7 01       	movw	r24, r14
     b04:	b6 01       	movw	r22, r12
     b06:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     b0a:	dc 01       	movw	r26, r24
     b0c:	cb 01       	movw	r24, r22
     b0e:	6c 01       	movw	r12, r24
     b10:	7d 01       	movw	r14, r26
     b12:	88 a1       	ldd	r24, Y+32	; 0x20
     b14:	88 2f       	mov	r24, r24
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	9c 01       	movw	r18, r24
     b1e:	22 0f       	add	r18, r18
     b20:	33 1f       	adc	r19, r19
     b22:	22 0f       	add	r18, r18
     b24:	33 1f       	adc	r19, r19
     b26:	82 0f       	add	r24, r18
     b28:	93 1f       	adc	r25, r19
     b2a:	09 2e       	mov	r0, r25
     b2c:	00 0c       	add	r0, r0
     b2e:	aa 0b       	sbc	r26, r26
     b30:	bb 0b       	sbc	r27, r27
     b32:	bc 01       	movw	r22, r24
     b34:	cd 01       	movw	r24, r26
     b36:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     b3a:	dc 01       	movw	r26, r24
     b3c:	cb 01       	movw	r24, r22
     b3e:	9c 01       	movw	r18, r24
     b40:	ad 01       	movw	r20, r26
     b42:	c7 01       	movw	r24, r14
     b44:	b6 01       	movw	r22, r12
     b46:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     b4a:	dc 01       	movw	r26, r24
     b4c:	cb 01       	movw	r24, r22
     b4e:	bc 01       	movw	r22, r24
     b50:	cd 01       	movw	r24, r26
     b52:	0e 94 8d 10 	call	0x211a	; 0x211a <__fixunssfsi>
     b56:	dc 01       	movw	r26, r24
     b58:	cb 01       	movw	r24, r22
     b5a:	89 a3       	std	Y+33, r24	; 0x21
     b5c:	18 86       	std	Y+8, r1	; 0x08
		for(int i = 0; i < 10; i++)
     b5e:	1f 82       	std	Y+7, r1	; 0x07
     b60:	0f c0       	rjmp	.+30     	; 0xb80 <main+0x520>
		{
			USART0SendByte(PRESSURE[i]);
     b62:	9e 01       	movw	r18, r28
     b64:	2c 5c       	subi	r18, 0xCC	; 204
     b66:	3f 4f       	sbci	r19, 0xFF	; 255
     b68:	8f 81       	ldd	r24, Y+7	; 0x07
     b6a:	98 85       	ldd	r25, Y+8	; 0x08
     b6c:	82 0f       	add	r24, r18
     b6e:	93 1f       	adc	r25, r19
     b70:	fc 01       	movw	r30, r24
     b72:	80 81       	ld	r24, Z
     b74:	0a db       	rcall	.-2540   	; 0x18a <USART0SendByte>
     b76:	8f 81       	ldd	r24, Y+7	; 0x07
		PRESS = PRESS / 100;
		Ziffern[0] = PRESS / 1000;
		Ziffern[1] = (PRESS - Ziffern[0] * 1000) / 100; 
		Ziffern[2] = (PRESS - Ziffern[0] * 1000 - Ziffern[1] * 100) / 10; 
		Ziffern[3] = (PRESS - Ziffern[0] * 1000 - Ziffern[1] * 100 - Ziffern[2] * 10); 
		for(int i = 0; i < 10; i++)
     b78:	98 85       	ldd	r25, Y+8	; 0x08
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	98 87       	std	Y+8, r25	; 0x08
     b7e:	8f 83       	std	Y+7, r24	; 0x07
     b80:	8f 81       	ldd	r24, Y+7	; 0x07
     b82:	98 85       	ldd	r25, Y+8	; 0x08
     b84:	0a 97       	sbiw	r24, 0x0a	; 10
     b86:	6c f3       	brlt	.-38     	; 0xb62 <main+0x502>
     b88:	1a 86       	std	Y+10, r1	; 0x0a
		{
			USART0SendByte(PRESSURE[i]);
		}
		for (int i = 0; i < 4; i++)
     b8a:	19 86       	std	Y+9, r1	; 0x09
     b8c:	10 c0       	rjmp	.+32     	; 0xbae <main+0x54e>
		{
			USART0SendByte(Ziffern[i] + 0x30);
     b8e:	9e 01       	movw	r18, r28
     b90:	22 5e       	subi	r18, 0xE2	; 226
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	89 85       	ldd	r24, Y+9	; 0x09
     b96:	9a 85       	ldd	r25, Y+10	; 0x0a
     b98:	82 0f       	add	r24, r18
     b9a:	93 1f       	adc	r25, r19
     b9c:	fc 01       	movw	r30, r24
     b9e:	80 81       	ld	r24, Z
     ba0:	80 5d       	subi	r24, 0xD0	; 208
     ba2:	f3 da       	rcall	.-2586   	; 0x18a <USART0SendByte>
		Ziffern[3] = (PRESS - Ziffern[0] * 1000 - Ziffern[1] * 100 - Ziffern[2] * 10); 
		for(int i = 0; i < 10; i++)
		{
			USART0SendByte(PRESSURE[i]);
		}
		for (int i = 0; i < 4; i++)
     ba4:	89 85       	ldd	r24, Y+9	; 0x09
     ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	9a 87       	std	Y+10, r25	; 0x0a
     bac:	89 87       	std	Y+9, r24	; 0x09
     bae:	89 85       	ldd	r24, Y+9	; 0x09
     bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     bb2:	04 97       	sbiw	r24, 0x04	; 4
		{
			USART0SendByte(Ziffern[i] + 0x30);
		}
		
		USART0SendByte(',');
     bb4:	64 f3       	brlt	.-40     	; 0xb8e <main+0x52e>
     bb6:	8c e2       	ldi	r24, 0x2C	; 44
     bb8:	e8 da       	rcall	.-2608   	; 0x18a <USART0SendByte>
		USART0SendByte(' ');
     bba:	80 e2       	ldi	r24, 0x20	; 32
     bbc:	e6 da       	rcall	.-2612   	; 0x18a <USART0SendByte>
     bbe:	20 e0       	ldi	r18, 0x00	; 0
		
		Ziffern[0] = HUM / 10;
     bc0:	30 e0       	ldi	r19, 0x00	; 0
     bc2:	40 e2       	ldi	r20, 0x20	; 32
     bc4:	51 e4       	ldi	r21, 0x41	; 65
     bc6:	6a 8d       	ldd	r22, Y+26	; 0x1a
     bc8:	7b 8d       	ldd	r23, Y+27	; 0x1b
     bca:	8c 8d       	ldd	r24, Y+28	; 0x1c
     bcc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     bce:	0e 94 20 10 	call	0x2040	; 0x2040 <__divsf3>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	bc 01       	movw	r22, r24
     bd8:	cd 01       	movw	r24, r26
     bda:	0e 94 8d 10 	call	0x211a	; 0x211a <__fixunssfsi>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	8e 8f       	std	Y+30, r24	; 0x1e
     be4:	8e 8d       	ldd	r24, Y+30	; 0x1e
		Ziffern[1] = HUM  - Ziffern[0] * 10;
     be6:	88 2f       	mov	r24, r24
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	9c 01       	movw	r18, r24
     bf0:	22 0f       	add	r18, r18
     bf2:	33 1f       	adc	r19, r19
     bf4:	22 0f       	add	r18, r18
     bf6:	33 1f       	adc	r19, r19
     bf8:	82 0f       	add	r24, r18
     bfa:	93 1f       	adc	r25, r19
     bfc:	09 2e       	mov	r0, r25
     bfe:	00 0c       	add	r0, r0
     c00:	aa 0b       	sbc	r26, r26
     c02:	bb 0b       	sbc	r27, r27
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9c 01       	movw	r18, r24
     c12:	ad 01       	movw	r20, r26
     c14:	6a 8d       	ldd	r22, Y+26	; 0x1a
     c16:	7b 8d       	ldd	r23, Y+27	; 0x1b
     c18:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c1a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c1c:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     c20:	dc 01       	movw	r26, r24
     c22:	cb 01       	movw	r24, r22
     c24:	bc 01       	movw	r22, r24
     c26:	cd 01       	movw	r24, r26
     c28:	0e 94 8d 10 	call	0x211a	; 0x211a <__fixunssfsi>
     c2c:	dc 01       	movw	r26, r24
     c2e:	cb 01       	movw	r24, r22
     c30:	8f 8f       	std	Y+31, r24	; 0x1f
     c32:	8e 8d       	ldd	r24, Y+30	; 0x1e
		Ziffern[2] = (HUM - Ziffern[0] * 10 -  Ziffern[1]) * 10;
     c34:	88 2f       	mov	r24, r24
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	9c 01       	movw	r18, r24
     c3e:	22 0f       	add	r18, r18
     c40:	33 1f       	adc	r19, r19
     c42:	22 0f       	add	r18, r18
     c44:	33 1f       	adc	r19, r19
     c46:	82 0f       	add	r24, r18
     c48:	93 1f       	adc	r25, r19
     c4a:	09 2e       	mov	r0, r25
     c4c:	00 0c       	add	r0, r0
     c4e:	aa 0b       	sbc	r26, r26
     c50:	bb 0b       	sbc	r27, r27
     c52:	bc 01       	movw	r22, r24
     c54:	cd 01       	movw	r24, r26
     c56:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     c5a:	dc 01       	movw	r26, r24
     c5c:	cb 01       	movw	r24, r22
     c5e:	9c 01       	movw	r18, r24
     c60:	ad 01       	movw	r20, r26
     c62:	6a 8d       	ldd	r22, Y+26	; 0x1a
     c64:	7b 8d       	ldd	r23, Y+27	; 0x1b
     c66:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c68:	9d 8d       	ldd	r25, Y+29	; 0x1d
     c6a:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	6c 01       	movw	r12, r24
     c74:	7d 01       	movw	r14, r26
     c76:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c78:	88 2f       	mov	r24, r24
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	09 2e       	mov	r0, r25
     c7e:	00 0c       	add	r0, r0
     c80:	aa 0b       	sbc	r26, r26
     c82:	bb 0b       	sbc	r27, r27
     c84:	bc 01       	movw	r22, r24
     c86:	cd 01       	movw	r24, r26
     c88:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     c8c:	dc 01       	movw	r26, r24
     c8e:	cb 01       	movw	r24, r22
     c90:	9c 01       	movw	r18, r24
     c92:	ad 01       	movw	r20, r26
     c94:	c7 01       	movw	r24, r14
     c96:	b6 01       	movw	r22, r12
     c98:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	20 e0       	ldi	r18, 0x00	; 0
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	40 e2       	ldi	r20, 0x20	; 32
     ca6:	51 e4       	ldi	r21, 0x41	; 65
     ca8:	bc 01       	movw	r22, r24
     caa:	cd 01       	movw	r24, r26
     cac:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	bc 01       	movw	r22, r24
     cb6:	cd 01       	movw	r24, r26
     cb8:	0e 94 8d 10 	call	0x211a	; 0x211a <__fixunssfsi>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	88 a3       	std	Y+32, r24	; 0x20
     cc2:	8e 8d       	ldd	r24, Y+30	; 0x1e
		Ziffern[3] = (HUM - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
     cc4:	88 2f       	mov	r24, r24
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	88 0f       	add	r24, r24
     cca:	99 1f       	adc	r25, r25
     ccc:	9c 01       	movw	r18, r24
     cce:	22 0f       	add	r18, r18
     cd0:	33 1f       	adc	r19, r19
     cd2:	22 0f       	add	r18, r18
     cd4:	33 1f       	adc	r19, r19
     cd6:	82 0f       	add	r24, r18
     cd8:	93 1f       	adc	r25, r19
     cda:	09 2e       	mov	r0, r25
     cdc:	00 0c       	add	r0, r0
     cde:	aa 0b       	sbc	r26, r26
     ce0:	bb 0b       	sbc	r27, r27
     ce2:	bc 01       	movw	r22, r24
     ce4:	cd 01       	movw	r24, r26
     ce6:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	9c 01       	movw	r18, r24
     cf0:	ad 01       	movw	r20, r26
     cf2:	6a 8d       	ldd	r22, Y+26	; 0x1a
     cf4:	7b 8d       	ldd	r23, Y+27	; 0x1b
     cf6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     cf8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     cfa:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	6c 01       	movw	r12, r24
     d04:	7d 01       	movw	r14, r26
     d06:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d08:	88 2f       	mov	r24, r24
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	09 2e       	mov	r0, r25
     d0e:	00 0c       	add	r0, r0
     d10:	aa 0b       	sbc	r26, r26
     d12:	bb 0b       	sbc	r27, r27
     d14:	bc 01       	movw	r22, r24
     d16:	cd 01       	movw	r24, r26
     d18:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	9c 01       	movw	r18, r24
     d22:	ad 01       	movw	r20, r26
     d24:	c7 01       	movw	r24, r14
     d26:	b6 01       	movw	r22, r12
     d28:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     d2c:	dc 01       	movw	r26, r24
     d2e:	cb 01       	movw	r24, r22
     d30:	6c 01       	movw	r12, r24
     d32:	7d 01       	movw	r14, r26
     d34:	88 a1       	ldd	r24, Y+32	; 0x20
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	a0 e0       	ldi	r26, 0x00	; 0
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	0e 94 b9 10 	call	0x2172	; 0x2172 <__floatunsisf>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	20 e0       	ldi	r18, 0x00	; 0
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	40 e2       	ldi	r20, 0x20	; 32
     d50:	51 e4       	ldi	r21, 0x41	; 65
     d52:	bc 01       	movw	r22, r24
     d54:	cd 01       	movw	r24, r26
     d56:	0e 94 20 10 	call	0x2040	; 0x2040 <__divsf3>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	9c 01       	movw	r18, r24
     d60:	ad 01       	movw	r20, r26
     d62:	c7 01       	movw	r24, r14
     d64:	b6 01       	movw	r22, r12
     d66:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <__subsf3>
     d6a:	dc 01       	movw	r26, r24
     d6c:	cb 01       	movw	r24, r22
     d6e:	20 e0       	ldi	r18, 0x00	; 0
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	48 ec       	ldi	r20, 0xC8	; 200
     d74:	52 e4       	ldi	r21, 0x42	; 66
     d76:	bc 01       	movw	r22, r24
     d78:	cd 01       	movw	r24, r26
     d7a:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	bc 01       	movw	r22, r24
     d84:	cd 01       	movw	r24, r26
     d86:	0e 94 8d 10 	call	0x211a	; 0x211a <__fixunssfsi>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	89 a3       	std	Y+33, r24	; 0x21
		for(int i = 0; i < 10; i++)
     d90:	1c 86       	std	Y+12, r1	; 0x0c
     d92:	1b 86       	std	Y+11, r1	; 0x0b
     d94:	0f c0       	rjmp	.+30     	; 0xdb4 <main+0x754>
		{
			USART0SendByte(HUMIDITY[i]);
     d96:	9e 01       	movw	r18, r28
     d98:	22 5c       	subi	r18, 0xC2	; 194
     d9a:	3f 4f       	sbci	r19, 0xFF	; 255
     d9c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d9e:	9c 85       	ldd	r25, Y+12	; 0x0c
     da0:	82 0f       	add	r24, r18
     da2:	93 1f       	adc	r25, r19
     da4:	fc 01       	movw	r30, r24
     da6:	80 81       	ld	r24, Z
     da8:	f0 d9       	rcall	.-3104   	; 0x18a <USART0SendByte>
     daa:	8b 85       	ldd	r24, Y+11	; 0x0b
		
		Ziffern[0] = HUM / 10;
		Ziffern[1] = HUM  - Ziffern[0] * 10;
		Ziffern[2] = (HUM - Ziffern[0] * 10 -  Ziffern[1]) * 10;
		Ziffern[3] = (HUM - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
		for(int i = 0; i < 10; i++)
     dac:	9c 85       	ldd	r25, Y+12	; 0x0c
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	9c 87       	std	Y+12, r25	; 0x0c
     db2:	8b 87       	std	Y+11, r24	; 0x0b
     db4:	8b 85       	ldd	r24, Y+11	; 0x0b
     db6:	9c 85       	ldd	r25, Y+12	; 0x0c
     db8:	0a 97       	sbiw	r24, 0x0a	; 10
     dba:	6c f3       	brlt	.-38     	; 0xd96 <main+0x736>
		{
			USART0SendByte(HUMIDITY[i]);
		}
		for (int i = 0; i < 2; i++)
     dbc:	1e 86       	std	Y+14, r1	; 0x0e
     dbe:	1d 86       	std	Y+13, r1	; 0x0d
     dc0:	10 c0       	rjmp	.+32     	; 0xde2 <main+0x782>
		{
			USART0SendByte(Ziffern[i] + 0x30);
     dc2:	9e 01       	movw	r18, r28
     dc4:	22 5e       	subi	r18, 0xE2	; 226
     dc6:	3f 4f       	sbci	r19, 0xFF	; 255
     dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dca:	9e 85       	ldd	r25, Y+14	; 0x0e
     dcc:	82 0f       	add	r24, r18
     dce:	93 1f       	adc	r25, r19
     dd0:	fc 01       	movw	r30, r24
     dd2:	80 81       	ld	r24, Z
     dd4:	80 5d       	subi	r24, 0xD0	; 208
     dd6:	d9 d9       	rcall	.-3150   	; 0x18a <USART0SendByte>
		Ziffern[3] = (HUM - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
		for(int i = 0; i < 10; i++)
		{
			USART0SendByte(HUMIDITY[i]);
		}
		for (int i = 0; i < 2; i++)
     dd8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dda:	9e 85       	ldd	r25, Y+14	; 0x0e
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	9e 87       	std	Y+14, r25	; 0x0e
     de0:	8d 87       	std	Y+13, r24	; 0x0d
     de2:	8d 85       	ldd	r24, Y+13	; 0x0d
     de4:	9e 85       	ldd	r25, Y+14	; 0x0e
     de6:	02 97       	sbiw	r24, 0x02	; 2
     de8:	64 f3       	brlt	.-40     	; 0xdc2 <main+0x762>
		{
			USART0SendByte(Ziffern[i] + 0x30);
		}
		USART0SendByte(0x2E);
     dea:	8e e2       	ldi	r24, 0x2E	; 46
     dec:	ce d9       	rcall	.-3172   	; 0x18a <USART0SendByte>
		for (int i = 0; i < 2; i++)
     dee:	18 8a       	std	Y+16, r1	; 0x10
     df0:	1f 86       	std	Y+15, r1	; 0x0f
     df2:	11 c0       	rjmp	.+34     	; 0xe16 <main+0x7b6>
		{
			USART0SendByte(Ziffern[i+2] + 0x30);
     df4:	8f 85       	ldd	r24, Y+15	; 0x0f
     df6:	98 89       	ldd	r25, Y+16	; 0x10
     df8:	02 96       	adiw	r24, 0x02	; 2
     dfa:	9e 01       	movw	r18, r28
     dfc:	22 5e       	subi	r18, 0xE2	; 226
     dfe:	3f 4f       	sbci	r19, 0xFF	; 255
     e00:	82 0f       	add	r24, r18
     e02:	93 1f       	adc	r25, r19
     e04:	fc 01       	movw	r30, r24
     e06:	80 81       	ld	r24, Z
     e08:	80 5d       	subi	r24, 0xD0	; 208
     e0a:	bf d9       	rcall	.-3202   	; 0x18a <USART0SendByte>
		for (int i = 0; i < 2; i++)
		{
			USART0SendByte(Ziffern[i] + 0x30);
		}
		USART0SendByte(0x2E);
		for (int i = 0; i < 2; i++)
     e0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e0e:	98 89       	ldd	r25, Y+16	; 0x10
     e10:	01 96       	adiw	r24, 0x01	; 1
     e12:	98 8b       	std	Y+16, r25	; 0x10
     e14:	8f 87       	std	Y+15, r24	; 0x0f
     e16:	8f 85       	ldd	r24, Y+15	; 0x0f
     e18:	98 89       	ldd	r25, Y+16	; 0x10
     e1a:	02 97       	sbiw	r24, 0x02	; 2
     e1c:	5c f3       	brlt	.-42     	; 0xdf4 <main+0x794>
		{
			USART0SendByte(Ziffern[i+2] + 0x30);
		}
		
		
		USART0SendByte(0x0A);
     e1e:	8a e0       	ldi	r24, 0x0A	; 10
     e20:	b4 d9       	rcall	.-3224   	; 0x18a <USART0SendByte>
     e22:	4b cc       	rjmp	.-1898   	; 0x6ba <main+0x5a>

00000e24 <INIT>:
		
    }
     e24:	cf 93       	push	r28
}

char INIT ( void )
{
     e26:	df 93       	push	r29
     e28:	1f 92       	push	r1
     e2a:	cd b7       	in	r28, 0x3d	; 61
     e2c:	de b7       	in	r29, 0x3e	; 62
	char cRET = 0;
     e2e:	19 82       	std	Y+1, r1	; 0x01
	USART0Init(103);
     e30:	87 e6       	ldi	r24, 0x67	; 103
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	77 d9       	rcall	.-3346   	; 0x124 <USART0Init>

	
	cRET = twi_init(TWI_FREQ_100K_8M);
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	ef da       	rcall	.-2594   	; 0x418 <twi_init>
	cRET = INIT_BME();
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	0d d0       	rcall	.+26     	; 0xe58 <INIT_BME>

	USART0SendByte(0x21);
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	81 e2       	ldi	r24, 0x21	; 33
     e42:	a3 d9       	rcall	.-3258   	; 0x18a <USART0SendByte>
	
	if (cRET)
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	88 23       	and	r24, r24
     e48:	11 f0       	breq	.+4      	; 0xe4e <INIT+0x2a>
	{
		return 1;
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	01 c0       	rjmp	.+2      	; 0xe50 <INIT+0x2c>
	}
	else
	{
		return 0;
     e4e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     e50:	0f 90       	pop	r0
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	08 95       	ret

00000e58 <INIT_BME>:

char INIT_BME ( void )
{
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <INIT_BME+0x6>
     e5e:	1f 92       	push	r1
     e60:	cd b7       	in	r28, 0x3d	; 61
     e62:	de b7       	in	r29, 0x3e	; 62
	unsigned char ucInitValues[2];
	unsigned char ucIdRegister = REG_ID;
     e64:	80 ed       	ldi	r24, 0xD0	; 208
     e66:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char cID = 0;
     e68:	1c 82       	std	Y+4, r1	; 0x04
	
	twi_master_transmit(SLAVE_ADR_LOW, &ucIdRegister, 1, 0);
     e6a:	ce 01       	movw	r24, r28
     e6c:	03 96       	adiw	r24, 0x03	; 3
     e6e:	20 e0       	ldi	r18, 0x00	; 0
     e70:	41 e0       	ldi	r20, 0x01	; 1
     e72:	bc 01       	movw	r22, r24
     e74:	86 e7       	ldi	r24, 0x76	; 118
     e76:	41 db       	rcall	.-2430   	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, &cID , 1);
     e78:	ce 01       	movw	r24, r28
     e7a:	04 96       	adiw	r24, 0x04	; 4
     e7c:	41 e0       	ldi	r20, 0x01	; 1
     e7e:	bc 01       	movw	r22, r24
     e80:	86 e7       	ldi	r24, 0x76	; 118
     e82:	90 db       	rcall	.-2272   	; 0x5a4 <twi_master_receive>
	
	if (!cID)
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	88 23       	and	r24, r24
     e88:	11 f4       	brne	.+4      	; 0xe8e <INIT_BME+0x36>
	{
		return 1;
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	41 c0       	rjmp	.+130    	; 0xf10 <INIT_BME+0xb8>
	}
	
	/*** WRITE RESET REGISTER ***/
	ucInitValues[0] = REG_RESET;
     e8e:	80 ee       	ldi	r24, 0xE0	; 224
     e90:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = VAL_RESET;
     e92:	86 eb       	ldi	r24, 0xB6	; 182
     e94:	8a 83       	std	Y+2, r24	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	42 e0       	ldi	r20, 0x02	; 2
     e9a:	ce 01       	movw	r24, r28
     e9c:	01 96       	adiw	r24, 0x01	; 1
     e9e:	bc 01       	movw	r22, r24
     ea0:	86 e7       	ldi	r24, 0x76	; 118
     ea2:	2b db       	rcall	.-2474   	; 0x4fa <twi_master_transmit>
	
	/*** WRITE CTRL_HUM REGISTER ***/
	ucInitValues[0] = REG_CTRL_HUM;
     ea4:	82 e7       	ldi	r24, 0x72	; 114
     ea6:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = (0xBF & (0b00000111 & VAL_OSRS_1));
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	8a 83       	std	Y+2, r24	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	42 e0       	ldi	r20, 0x02	; 2
     eb0:	ce 01       	movw	r24, r28
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	bc 01       	movw	r22, r24
     eb6:	86 e7       	ldi	r24, 0x76	; 118
     eb8:	20 db       	rcall	.-2496   	; 0x4fa <twi_master_transmit>
	
	/*** WRITE CONFIG REGISTER ***/
	ucInitValues[0] = REG_CONFIG;
     eba:	85 e7       	ldi	r24, 0x75	; 117
     ebc:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = (0xFE & (0b00011100 & (VAL_FILTER_0 << 2)));
     ebe:	1a 82       	std	Y+2, r1	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	42 e0       	ldi	r20, 0x02	; 2
     ec4:	ce 01       	movw	r24, r28
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	bc 01       	movw	r22, r24
     eca:	86 e7       	ldi	r24, 0x76	; 118
     ecc:	16 db       	rcall	.-2516   	; 0x4fa <twi_master_transmit>
	
	/*** WRITE CTRL_MEAS REGISTER ***/
	ucInitValues[0] = REG_CTRL_MEAS;
     ece:	84 e7       	ldi	r24, 0x74	; 116
     ed0:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = ((0b00000011 & VAL_MODE_FORCED) | (0b00011100 & (VAL_OSRS_1 << 2)) | (0b11100000 & (VAL_OSRS_1 << 5)));
     ed2:	85 e2       	ldi	r24, 0x25	; 37
     ed4:	8a 83       	std	Y+2, r24	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	42 e0       	ldi	r20, 0x02	; 2
     eda:	ce 01       	movw	r24, r28
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	bc 01       	movw	r22, r24
     ee0:	86 e7       	ldi	r24, 0x76	; 118
     ee2:	0b db       	rcall	.-2538   	; 0x4fa <twi_master_transmit>
	
	/*** WRITE CTRL_GAS REGISTER ***/
	ucInitValues[0] = REG_CTRL_GAS_0;
     ee4:	80 e7       	ldi	r24, 0x70	; 112
     ee6:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = (0b00001000 & (VAL_HEAT_OFF << 3));
     ee8:	88 e0       	ldi	r24, 0x08	; 8
     eea:	8a 83       	std	Y+2, r24	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	42 e0       	ldi	r20, 0x02	; 2
     ef0:	ce 01       	movw	r24, r28
     ef2:	01 96       	adiw	r24, 0x01	; 1
     ef4:	bc 01       	movw	r22, r24
     ef6:	86 e7       	ldi	r24, 0x76	; 118
     ef8:	00 db       	rcall	.-2560   	; 0x4fa <twi_master_transmit>
	
	/*** WRITE CTRL_HUM REGISTER ***/
	ucInitValues[0] = REG_CTRL_GAS_1;
     efa:	81 e7       	ldi	r24, 0x71	; 113
     efc:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = (0b00010000 & (VAL_RUN_GAS_OFF << 4));
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
     efe:	1a 82       	std	Y+2, r1	; 0x02
     f00:	20 e0       	ldi	r18, 0x00	; 0
     f02:	42 e0       	ldi	r20, 0x02	; 2
     f04:	ce 01       	movw	r24, r28
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	bc 01       	movw	r22, r24
     f0a:	86 e7       	ldi	r24, 0x76	; 118
     f0c:	f6 da       	rcall	.-2580   	; 0x4fa <twi_master_transmit>
	
	return 0;
     f0e:	80 e0       	ldi	r24, 0x00	; 0
}
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <START_CONVERSION>:

void START_CONVERSION ( void )
{
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	00 d0       	rcall	.+0      	; 0xf24 <START_CONVERSION+0x6>
     f24:	1f 92       	push	r1
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
	unsigned char ucInitValues[2];
	
	ucInitValues[0] = REG_CTRL_MEAS;
     f2a:	84 e7       	ldi	r24, 0x74	; 116
     f2c:	8b 83       	std	Y+3, r24	; 0x03
	ucInitValues[1] = ((0b00000011 & VAL_MODE_FORCED) | (0b00011100 & (VAL_OSRS_1 << 2)) | (0b11100000 & (VAL_OSRS_1 << 5)));
     f2e:	85 e2       	ldi	r24, 0x25	; 37
     f30:	8c 83       	std	Y+4, r24	; 0x04
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
     f32:	ce 01       	movw	r24, r28
     f34:	03 96       	adiw	r24, 0x03	; 3
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	42 e0       	ldi	r20, 0x02	; 2
     f3a:	bc 01       	movw	r22, r24
     f3c:	86 e7       	ldi	r24, 0x76	; 118
     f3e:	dd da       	rcall	.-2630   	; 0x4fa <twi_master_transmit>
	for(int i = 0; i < 50; i++)
     f40:	1a 82       	std	Y+2, r1	; 0x02
     f42:	19 82       	std	Y+1, r1	; 0x01
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <START_CONVERSION+0x34>
	{
		asm("nop");
     f46:	00 00       	nop
	unsigned char ucInitValues[2];
	
	ucInitValues[0] = REG_CTRL_MEAS;
	ucInitValues[1] = ((0b00000011 & VAL_MODE_FORCED) | (0b00011100 & (VAL_OSRS_1 << 2)) | (0b11100000 & (VAL_OSRS_1 << 5)));
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
	for(int i = 0; i < 50; i++)
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	9a 83       	std	Y+2, r25	; 0x02
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	9a 81       	ldd	r25, Y+2	; 0x02
     f56:	c2 97       	sbiw	r24, 0x32	; 50
     f58:	b4 f3       	brlt	.-20     	; 0xf46 <START_CONVERSION+0x28>
	{
		asm("nop");
	}
}
     f5a:	00 00       	nop
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	08 95       	ret

00000f6a <READ_TEMP_F>:

float READ_TEMP_F ( void )
{
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <READ_TEMP_F+0x6>
     f70:	1f 92       	push	r1
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
	int32_t t_fine = READ_TEMP_I();
     f76:	21 d0       	rcall	.+66     	; 0xfba <READ_TEMP_I>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	9a 83       	std	Y+2, r25	; 0x02
     f80:	ab 83       	std	Y+3, r26	; 0x03
     f82:	bc 83       	std	Y+4, r27	; 0x04
	return t_fine / 5120.0;	
     f84:	69 81       	ldd	r22, Y+1	; 0x01
     f86:	7a 81       	ldd	r23, Y+2	; 0x02
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	9c 81       	ldd	r25, Y+4	; 0x04
     f8c:	0e 94 bb 10 	call	0x2176	; 0x2176 <__floatsisf>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	20 e0       	ldi	r18, 0x00	; 0
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	40 ea       	ldi	r20, 0xA0	; 160
     f9a:	55 e4       	ldi	r21, 0x45	; 69
     f9c:	bc 01       	movw	r22, r24
     f9e:	cd 01       	movw	r24, r26
     fa0:	0e 94 20 10 	call	0x2040	; 0x2040 <__divsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
}
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <READ_TEMP_I>:

int32_t READ_TEMP_I ( void )
{
     fba:	8f 92       	push	r8
     fbc:	9f 92       	push	r9
     fbe:	af 92       	push	r10
     fc0:	bf 92       	push	r11
     fc2:	cf 92       	push	r12
     fc4:	df 92       	push	r13
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	66 97       	sbiw	r28, 0x16	; 22
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
	unsigned char cAdrWork = 0;
     fde:	1e 8a       	std	Y+22, r1	; 0x16
	uint32_t temp_adc = 0;
     fe0:	19 82       	std	Y+1, r1	; 0x01
     fe2:	1a 82       	std	Y+2, r1	; 0x02
     fe4:	1b 82       	std	Y+3, r1	; 0x03
     fe6:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t par_t1 = 0;
     fe8:	1e 82       	std	Y+6, r1	; 0x06
     fea:	1d 82       	std	Y+5, r1	; 0x05
	int16_t par_t2 = 0;
     fec:	18 86       	std	Y+8, r1	; 0x08
     fee:	1f 82       	std	Y+7, r1	; 0x07
	int8_t par_t3 = 0;
     ff0:	19 86       	std	Y+9, r1	; 0x09
	double var1 = 0;
     ff2:	1a 86       	std	Y+10, r1	; 0x0a
     ff4:	1b 86       	std	Y+11, r1	; 0x0b
     ff6:	1c 86       	std	Y+12, r1	; 0x0c
     ff8:	1d 86       	std	Y+13, r1	; 0x0d
	double var2 = 0;
     ffa:	1e 86       	std	Y+14, r1	; 0x0e
     ffc:	1f 86       	std	Y+15, r1	; 0x0f
     ffe:	18 8a       	std	Y+16, r1	; 0x10
    1000:	19 8a       	std	Y+17, r1	; 0x11
	int32_t t_fine = 0;
    1002:	1a 8a       	std	Y+18, r1	; 0x12
    1004:	1b 8a       	std	Y+19, r1	; 0x13
    1006:	1c 8a       	std	Y+20, r1	; 0x14
    1008:	1d 8a       	std	Y+21, r1	; 0x15
	
	cAdrWork = REG_TEMP_MSB;
    100a:	82 e2       	ldi	r24, 0x22	; 34
    100c:	8e 8b       	std	Y+22, r24	; 0x16
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    100e:	ce 01       	movw	r24, r28
    1010:	46 96       	adiw	r24, 0x16	; 22
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	41 e0       	ldi	r20, 0x01	; 1
    1016:	bc 01       	movw	r22, r24
    1018:	86 e7       	ldi	r24, 0x76	; 118
    101a:	6f da       	rcall	.-2850   	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 3);
    101c:	43 e0       	ldi	r20, 0x03	; 3
    101e:	60 e2       	ldi	r22, 0x20	; 32
    1020:	72 e0       	ldi	r23, 0x02	; 2
    1022:	86 e7       	ldi	r24, 0x76	; 118
    1024:	bf da       	rcall	.-2690   	; 0x5a4 <twi_master_receive>
	temp_adc = (0xFF000 & (((uint32_t)cRecieve[0]) << 12)) | (0x00FF0 & (cRecieve[1] << 4)) | (0x0000F & (cRecieve[2] >> 4));
    1026:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a0 e0       	ldi	r26, 0x00	; 0
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	07 2e       	mov	r0, r23
    1034:	7c e0       	ldi	r23, 0x0C	; 12
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	aa 1f       	adc	r26, r26
    103c:	bb 1f       	adc	r27, r27
    103e:	7a 95       	dec	r23
    1040:	d1 f7       	brne	.-12     	; 0x1036 <__EEPROM_REGION_LENGTH__+0x36>
    1042:	70 2d       	mov	r23, r0
    1044:	9c 01       	movw	r18, r24
    1046:	ad 01       	movw	r20, r26
    1048:	22 27       	eor	r18, r18
    104a:	30 7f       	andi	r19, 0xF0	; 240
    104c:	4f 70       	andi	r20, 0x0F	; 15
    104e:	55 27       	eor	r21, r21
    1050:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	82 95       	swap	r24
    105a:	92 95       	swap	r25
    105c:	90 7f       	andi	r25, 0xF0	; 240
    105e:	98 27       	eor	r25, r24
    1060:	80 7f       	andi	r24, 0xF0	; 240
    1062:	98 27       	eor	r25, r24
    1064:	09 2e       	mov	r0, r25
    1066:	00 0c       	add	r0, r0
    1068:	aa 0b       	sbc	r26, r26
    106a:	bb 0b       	sbc	r27, r27
    106c:	80 7f       	andi	r24, 0xF0	; 240
    106e:	9f 70       	andi	r25, 0x0F	; 15
    1070:	aa 27       	eor	r26, r26
    1072:	bb 27       	eor	r27, r27
    1074:	28 2b       	or	r18, r24
    1076:	39 2b       	or	r19, r25
    1078:	4a 2b       	or	r20, r26
    107a:	5b 2b       	or	r21, r27
    107c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end+0x2>
    1080:	82 95       	swap	r24
    1082:	8f 70       	andi	r24, 0x0F	; 15
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	a0 e0       	ldi	r26, 0x00	; 0
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	82 2b       	or	r24, r18
    108e:	93 2b       	or	r25, r19
    1090:	a4 2b       	or	r26, r20
    1092:	b5 2b       	or	r27, r21
    1094:	89 83       	std	Y+1, r24	; 0x01
    1096:	9a 83       	std	Y+2, r25	; 0x02
    1098:	ab 83       	std	Y+3, r26	; 0x03
    109a:	bc 83       	std	Y+4, r27	; 0x04
	
	cAdrWork = 0xE9;
    109c:	89 ee       	ldi	r24, 0xE9	; 233
    109e:	8e 8b       	std	Y+22, r24	; 0x16
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    10a0:	ce 01       	movw	r24, r28
    10a2:	46 96       	adiw	r24, 0x16	; 22
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	41 e0       	ldi	r20, 0x01	; 1
    10a8:	bc 01       	movw	r22, r24
    10aa:	86 e7       	ldi	r24, 0x76	; 118
    10ac:	26 da       	rcall	.-2996   	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    10ae:	42 e0       	ldi	r20, 0x02	; 2
    10b0:	60 e2       	ldi	r22, 0x20	; 32
    10b2:	72 e0       	ldi	r23, 0x02	; 2
    10b4:	86 e7       	ldi	r24, 0x76	; 118
    10b6:	76 da       	rcall	.-2836   	; 0x5a4 <twi_master_receive>
	par_t1 = (0xFF00 & (cRecieve[1] << 8)) | (0x00FF & (cRecieve[0]));
    10b8:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    10bc:	88 2f       	mov	r24, r24
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	98 2f       	mov	r25, r24
    10c2:	88 27       	eor	r24, r24
    10c4:	9c 01       	movw	r18, r24
    10c6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	82 2b       	or	r24, r18
    10d0:	93 2b       	or	r25, r19
    10d2:	9e 83       	std	Y+6, r25	; 0x06
    10d4:	8d 83       	std	Y+5, r24	; 0x05
	
	cAdrWork = 0x8A;
    10d6:	8a e8       	ldi	r24, 0x8A	; 138
    10d8:	8e 8b       	std	Y+22, r24	; 0x16
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    10da:	ce 01       	movw	r24, r28
    10dc:	46 96       	adiw	r24, 0x16	; 22
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	41 e0       	ldi	r20, 0x01	; 1
    10e2:	bc 01       	movw	r22, r24
    10e4:	86 e7       	ldi	r24, 0x76	; 118
    10e6:	09 da       	rcall	.-3054   	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    10e8:	42 e0       	ldi	r20, 0x02	; 2
    10ea:	60 e2       	ldi	r22, 0x20	; 32
    10ec:	72 e0       	ldi	r23, 0x02	; 2
    10ee:	86 e7       	ldi	r24, 0x76	; 118
    10f0:	59 da       	rcall	.-2894   	; 0x5a4 <twi_master_receive>
    10f2:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
	par_t2 = (0xFF00 & (cRecieve[1] << 8)) | (0x00FF & (cRecieve[0]));
    10f6:	88 2f       	mov	r24, r24
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	98 2f       	mov	r25, r24
    10fc:	88 27       	eor	r24, r24
    10fe:	9c 01       	movw	r18, r24
    1100:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1104:	88 2f       	mov	r24, r24
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	82 2b       	or	r24, r18
    110a:	93 2b       	or	r25, r19
    110c:	98 87       	std	Y+8, r25	; 0x08
    110e:	8f 83       	std	Y+7, r24	; 0x07
    1110:	8c e8       	ldi	r24, 0x8C	; 140
	
	cAdrWork = 0x8C;
    1112:	8e 8b       	std	Y+22, r24	; 0x16
    1114:	ce 01       	movw	r24, r28
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1116:	46 96       	adiw	r24, 0x16	; 22
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	41 e0       	ldi	r20, 0x01	; 1
    111c:	bc 01       	movw	r22, r24
    111e:	86 e7       	ldi	r24, 0x76	; 118
    1120:	ec d9       	rcall	.-3112   	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    1122:	42 e0       	ldi	r20, 0x02	; 2
    1124:	60 e2       	ldi	r22, 0x20	; 32
    1126:	72 e0       	ldi	r23, 0x02	; 2
    1128:	86 e7       	ldi	r24, 0x76	; 118
    112a:	3c da       	rcall	.-2952   	; 0x5a4 <twi_master_receive>
    112c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
	par_t3 = (cRecieve[0]);
    1130:	89 87       	std	Y+9, r24	; 0x09
    1132:	69 81       	ldd	r22, Y+1	; 0x01
	
	var1 = (((double)temp_adc / 16384.0) - ((double)par_t1 / 1024.0)) * (double)par_t2;
    1134:	7a 81       	ldd	r23, Y+2	; 0x02
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	0e 94 b9 10 	call	0x2172	; 0x2172 <__floatunsisf>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e8       	ldi	r20, 0x80	; 128
    1148:	56 e4       	ldi	r21, 0x46	; 70
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	78 d7       	rcall	.+3824   	; 0x2040 <__divsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	6c 01       	movw	r12, r24
    1156:	7d 01       	movw	r14, r26
    1158:	8d 81       	ldd	r24, Y+5	; 0x05
    115a:	9e 81       	ldd	r25, Y+6	; 0x06
    115c:	cc 01       	movw	r24, r24
    115e:	a0 e0       	ldi	r26, 0x00	; 0
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	bc 01       	movw	r22, r24
    1164:	cd 01       	movw	r24, r26
    1166:	0e 94 b9 10 	call	0x2172	; 0x2172 <__floatunsisf>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	40 e8       	ldi	r20, 0x80	; 128
    1174:	54 e4       	ldi	r21, 0x44	; 68
    1176:	bc 01       	movw	r22, r24
    1178:	cd 01       	movw	r24, r26
    117a:	62 d7       	rcall	.+3780   	; 0x2040 <__divsf3>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9c 01       	movw	r18, r24
    1182:	ad 01       	movw	r20, r26
    1184:	c7 01       	movw	r24, r14
    1186:	b6 01       	movw	r22, r12
    1188:	f6 d6       	rcall	.+3564   	; 0x1f76 <__subsf3>
    118a:	dc 01       	movw	r26, r24
    118c:	cb 01       	movw	r24, r22
    118e:	6c 01       	movw	r12, r24
    1190:	7d 01       	movw	r14, r26
    1192:	8f 81       	ldd	r24, Y+7	; 0x07
    1194:	98 85       	ldd	r25, Y+8	; 0x08
    1196:	09 2e       	mov	r0, r25
    1198:	00 0c       	add	r0, r0
    119a:	aa 0b       	sbc	r26, r26
    119c:	bb 0b       	sbc	r27, r27
    119e:	bc 01       	movw	r22, r24
    11a0:	cd 01       	movw	r24, r26
    11a2:	e9 d7       	rcall	.+4050   	; 0x2176 <__floatsisf>
    11a4:	dc 01       	movw	r26, r24
    11a6:	cb 01       	movw	r24, r22
    11a8:	9c 01       	movw	r18, r24
    11aa:	ad 01       	movw	r20, r26
    11ac:	c7 01       	movw	r24, r14
    11ae:	b6 01       	movw	r22, r12
    11b0:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	8a 87       	std	Y+10, r24	; 0x0a
    11ba:	9b 87       	std	Y+11, r25	; 0x0b
    11bc:	ac 87       	std	Y+12, r26	; 0x0c
    11be:	bd 87       	std	Y+13, r27	; 0x0d
	var2 = ((((double)temp_adc / 131072.0) - ((double)par_t1 / 8192.0)) * (((double)temp_adc / 131072.0) - ((double)par_t1 / 8192.0))) * ((double)par_t3 * 16.0);
    11c0:	69 81       	ldd	r22, Y+1	; 0x01
    11c2:	7a 81       	ldd	r23, Y+2	; 0x02
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	d4 d7       	rcall	.+4008   	; 0x2172 <__floatunsisf>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e0       	ldi	r20, 0x00	; 0
    11d4:	58 e4       	ldi	r21, 0x48	; 72
    11d6:	bc 01       	movw	r22, r24
    11d8:	cd 01       	movw	r24, r26
    11da:	32 d7       	rcall	.+3684   	; 0x2040 <__divsf3>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	6c 01       	movw	r12, r24
    11e2:	7d 01       	movw	r14, r26
    11e4:	8d 81       	ldd	r24, Y+5	; 0x05
    11e6:	9e 81       	ldd	r25, Y+6	; 0x06
    11e8:	cc 01       	movw	r24, r24
    11ea:	a0 e0       	ldi	r26, 0x00	; 0
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	bc 01       	movw	r22, r24
    11f0:	cd 01       	movw	r24, r26
    11f2:	bf d7       	rcall	.+3966   	; 0x2172 <__floatunsisf>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	56 e4       	ldi	r21, 0x46	; 70
    1200:	bc 01       	movw	r22, r24
    1202:	cd 01       	movw	r24, r26
    1204:	1d d7       	rcall	.+3642   	; 0x2040 <__divsf3>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9c 01       	movw	r18, r24
    120c:	ad 01       	movw	r20, r26
    120e:	c7 01       	movw	r24, r14
    1210:	b6 01       	movw	r22, r12
    1212:	b1 d6       	rcall	.+3426   	; 0x1f76 <__subsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	6c 01       	movw	r12, r24
    121a:	7d 01       	movw	r14, r26
    121c:	69 81       	ldd	r22, Y+1	; 0x01
    121e:	7a 81       	ldd	r23, Y+2	; 0x02
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	a6 d7       	rcall	.+3916   	; 0x2172 <__floatunsisf>
    1226:	dc 01       	movw	r26, r24
    1228:	cb 01       	movw	r24, r22
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	40 e0       	ldi	r20, 0x00	; 0
    1230:	58 e4       	ldi	r21, 0x48	; 72
    1232:	bc 01       	movw	r22, r24
    1234:	cd 01       	movw	r24, r26
    1236:	04 d7       	rcall	.+3592   	; 0x2040 <__divsf3>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	4c 01       	movw	r8, r24
    123e:	5d 01       	movw	r10, r26
    1240:	8d 81       	ldd	r24, Y+5	; 0x05
    1242:	9e 81       	ldd	r25, Y+6	; 0x06
    1244:	cc 01       	movw	r24, r24
    1246:	a0 e0       	ldi	r26, 0x00	; 0
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	bc 01       	movw	r22, r24
    124c:	cd 01       	movw	r24, r26
    124e:	91 d7       	rcall	.+3874   	; 0x2172 <__floatunsisf>
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	56 e4       	ldi	r21, 0x46	; 70
    125c:	bc 01       	movw	r22, r24
    125e:	cd 01       	movw	r24, r26
    1260:	ef d6       	rcall	.+3550   	; 0x2040 <__divsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	9c 01       	movw	r18, r24
    1268:	ad 01       	movw	r20, r26
    126a:	c5 01       	movw	r24, r10
    126c:	b4 01       	movw	r22, r8
    126e:	83 d6       	rcall	.+3334   	; 0x1f76 <__subsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	9c 01       	movw	r18, r24
    1276:	ad 01       	movw	r20, r26
    1278:	c7 01       	movw	r24, r14
    127a:	b6 01       	movw	r22, r12
    127c:	0e 94 47 11 	call	0x228e	; 0x228e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	6c 01       	movw	r12, r24
    1286:	7d 01       	movw	r14, r26
    1288:	89 85       	ldd	r24, Y+9	; 0x09
    128a:	08 2e       	mov	r0, r24
    128c:	00 0c       	add	r0, r0
    128e:	99 0b       	sbc	r25, r25
    1290:	aa 0b       	sbc	r26, r26
    1292:	bb 0b       	sbc	r27, r27
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	6e d7       	rcall	.+3804   	; 0x2176 <__floatsisf>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e8       	ldi	r20, 0x80	; 128
    12a4:	51 e4       	ldi	r21, 0x41	; 65
    12a6:	bc 01       	movw	r22, r24
    12a8:	cd 01       	movw	r24, r26
    12aa:	f1 d7       	rcall	.+4066   	; 0x228e <__mulsf3>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	9c 01       	movw	r18, r24
    12b2:	ad 01       	movw	r20, r26
    12b4:	c7 01       	movw	r24, r14
    12b6:	b6 01       	movw	r22, r12
    12b8:	ea d7       	rcall	.+4052   	; 0x228e <__mulsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	8e 87       	std	Y+14, r24	; 0x0e
    12c0:	9f 87       	std	Y+15, r25	; 0x0f
    12c2:	a8 8b       	std	Y+16, r26	; 0x10
    12c4:	b9 8b       	std	Y+17, r27	; 0x11
	t_fine = var1 + var2;
    12c6:	2e 85       	ldd	r18, Y+14	; 0x0e
    12c8:	3f 85       	ldd	r19, Y+15	; 0x0f
    12ca:	48 89       	ldd	r20, Y+16	; 0x10
    12cc:	59 89       	ldd	r21, Y+17	; 0x11
    12ce:	6a 85       	ldd	r22, Y+10	; 0x0a
    12d0:	7b 85       	ldd	r23, Y+11	; 0x0b
    12d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    12d4:	9d 85       	ldd	r25, Y+13	; 0x0d
    12d6:	50 d6       	rcall	.+3232   	; 0x1f78 <__addsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	bc 01       	movw	r22, r24
    12de:	cd 01       	movw	r24, r26
    12e0:	17 d7       	rcall	.+3630   	; 0x2110 <__fixsfsi>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	8a 8b       	std	Y+18, r24	; 0x12
    12e8:	9b 8b       	std	Y+19, r25	; 0x13
    12ea:	ac 8b       	std	Y+20, r26	; 0x14
    12ec:	bd 8b       	std	Y+21, r27	; 0x15
    12ee:	8a 89       	ldd	r24, Y+18	; 0x12
    12f0:	9b 89       	ldd	r25, Y+19	; 0x13

	
	return t_fine;
    12f2:	ac 89       	ldd	r26, Y+20	; 0x14
    12f4:	bd 89       	ldd	r27, Y+21	; 0x15
    12f6:	bc 01       	movw	r22, r24
    12f8:	cd 01       	movw	r24, r26
}
    12fa:	66 96       	adiw	r28, 0x16	; 22
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	ff 90       	pop	r15
    130c:	ef 90       	pop	r14
    130e:	df 90       	pop	r13
    1310:	cf 90       	pop	r12
    1312:	bf 90       	pop	r11
    1314:	af 90       	pop	r10
    1316:	9f 90       	pop	r9
    1318:	8f 90       	pop	r8
    131a:	08 95       	ret

0000131c <READ_PRESS>:
    131c:	cf 92       	push	r12
    131e:	df 92       	push	r13

float READ_PRESS ( void )
{
    1320:	ef 92       	push	r14
    1322:	ff 92       	push	r15
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	a9 97       	sbiw	r28, 0x29	; 41
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	de bf       	out	0x3e, r29	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	cd bf       	out	0x3d, r28	; 61
	int32_t t_fine = READ_TEMP_I();
    1338:	40 de       	rcall	.-896    	; 0xfba <READ_TEMP_I>
    133a:	dc 01       	movw	r26, r24
    133c:	cb 01       	movw	r24, r22
    133e:	89 83       	std	Y+1, r24	; 0x01
    1340:	9a 83       	std	Y+2, r25	; 0x02
    1342:	ab 83       	std	Y+3, r26	; 0x03
    1344:	bc 83       	std	Y+4, r27	; 0x04
	unsigned char cAdrWork = 0;
    1346:	19 a6       	std	Y+41, r1	; 0x29
	double var1 = 0;
    1348:	1d 82       	std	Y+5, r1	; 0x05
    134a:	1e 82       	std	Y+6, r1	; 0x06
    134c:	1f 82       	std	Y+7, r1	; 0x07
    134e:	18 86       	std	Y+8, r1	; 0x08
	double var2 = 0;
    1350:	19 86       	std	Y+9, r1	; 0x09
    1352:	1a 86       	std	Y+10, r1	; 0x0a
    1354:	1b 86       	std	Y+11, r1	; 0x0b
    1356:	1c 86       	std	Y+12, r1	; 0x0c
	double var3 = 0;
    1358:	1d 86       	std	Y+13, r1	; 0x0d
    135a:	1e 86       	std	Y+14, r1	; 0x0e
    135c:	1f 86       	std	Y+15, r1	; 0x0f
    135e:	18 8a       	std	Y+16, r1	; 0x10
	double press_comp = 0;
    1360:	19 8a       	std	Y+17, r1	; 0x11
    1362:	1a 8a       	std	Y+18, r1	; 0x12
    1364:	1b 8a       	std	Y+19, r1	; 0x13
    1366:	1c 8a       	std	Y+20, r1	; 0x14
	uint32_t press_adc = 0;
    1368:	1d 8a       	std	Y+21, r1	; 0x15
    136a:	1e 8a       	std	Y+22, r1	; 0x16
    136c:	1f 8a       	std	Y+23, r1	; 0x17
    136e:	18 8e       	std	Y+24, r1	; 0x18
	uint16_t par_p1  = 0;
    1370:	1a 8e       	std	Y+26, r1	; 0x1a
    1372:	19 8e       	std	Y+25, r1	; 0x19
	int16_t par_p2  = 0;
    1374:	1c 8e       	std	Y+28, r1	; 0x1c
    1376:	1b 8e       	std	Y+27, r1	; 0x1b
	int8_t par_p3  = 0;
    1378:	1d 8e       	std	Y+29, r1	; 0x1d
	int16_t par_p4  = 0;
    137a:	1f 8e       	std	Y+31, r1	; 0x1f
    137c:	1e 8e       	std	Y+30, r1	; 0x1e
	int16_t par_p5  = 0;
    137e:	19 a2       	std	Y+33, r1	; 0x21
    1380:	18 a2       	std	Y+32, r1	; 0x20
	int8_t par_p6  = 0;
    1382:	1a a2       	std	Y+34, r1	; 0x22
	int8_t par_p7  = 0;
    1384:	1b a2       	std	Y+35, r1	; 0x23
	int16_t par_p8  = 0;
    1386:	1d a2       	std	Y+37, r1	; 0x25
    1388:	1c a2       	std	Y+36, r1	; 0x24
	int16_t par_p9  = 0;
    138a:	1f a2       	std	Y+39, r1	; 0x27
    138c:	1e a2       	std	Y+38, r1	; 0x26
	int8_t par_p10  = 0;
    138e:	18 a6       	std	Y+40, r1	; 0x28
	
	cAdrWork = REG_PRESS_MSB;
    1390:	8f e1       	ldi	r24, 0x1F	; 31
    1392:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1394:	ce 01       	movw	r24, r28
    1396:	89 96       	adiw	r24, 0x29	; 41
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	41 e0       	ldi	r20, 0x01	; 1
    139c:	bc 01       	movw	r22, r24
    139e:	86 e7       	ldi	r24, 0x76	; 118
    13a0:	ac d8       	rcall	.-3752   	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    13a2:	41 e0       	ldi	r20, 0x01	; 1
    13a4:	60 e2       	ldi	r22, 0x20	; 32
    13a6:	72 e0       	ldi	r23, 0x02	; 2
    13a8:	86 e7       	ldi	r24, 0x76	; 118
    13aa:	fc d8       	rcall	.-3592   	; 0x5a4 <twi_master_receive>
	press_adc = (0xFF000 & (((uint32_t)cRecieve[0]) << 12));
    13ac:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    13b0:	88 2f       	mov	r24, r24
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a0 e0       	ldi	r26, 0x00	; 0
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	07 2e       	mov	r0, r23
    13ba:	7c e0       	ldi	r23, 0x0C	; 12
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	aa 1f       	adc	r26, r26
    13c2:	bb 1f       	adc	r27, r27
    13c4:	7a 95       	dec	r23
    13c6:	d1 f7       	brne	.-12     	; 0x13bc <READ_PRESS+0xa0>
    13c8:	70 2d       	mov	r23, r0
    13ca:	88 27       	eor	r24, r24
    13cc:	90 7f       	andi	r25, 0xF0	; 240
    13ce:	af 70       	andi	r26, 0x0F	; 15
    13d0:	bb 27       	eor	r27, r27
    13d2:	8d 8b       	std	Y+21, r24	; 0x15
    13d4:	9e 8b       	std	Y+22, r25	; 0x16
    13d6:	af 8b       	std	Y+23, r26	; 0x17
    13d8:	b8 8f       	std	Y+24, r27	; 0x18
	
	cAdrWork = REG_PRESS_LSB;
    13da:	80 e2       	ldi	r24, 0x20	; 32
    13dc:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    13de:	ce 01       	movw	r24, r28
    13e0:	89 96       	adiw	r24, 0x29	; 41
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	41 e0       	ldi	r20, 0x01	; 1
    13e6:	bc 01       	movw	r22, r24
    13e8:	86 e7       	ldi	r24, 0x76	; 118
    13ea:	87 d8       	rcall	.-3826   	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    13ec:	42 e0       	ldi	r20, 0x02	; 2
    13ee:	60 e2       	ldi	r22, 0x20	; 32
    13f0:	72 e0       	ldi	r23, 0x02	; 2
    13f2:	86 e7       	ldi	r24, 0x76	; 118
    13f4:	d7 d8       	rcall	.-3666   	; 0x5a4 <twi_master_receive>
	press_adc = press_adc | (0x00FF0 & (cRecieve[0] << 4)) | (0x0000F & (cRecieve[1] >> 4));
    13f6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	82 95       	swap	r24
    1400:	92 95       	swap	r25
    1402:	90 7f       	andi	r25, 0xF0	; 240
    1404:	98 27       	eor	r25, r24
    1406:	80 7f       	andi	r24, 0xF0	; 240
    1408:	98 27       	eor	r25, r24
    140a:	09 2e       	mov	r0, r25
    140c:	00 0c       	add	r0, r0
    140e:	aa 0b       	sbc	r26, r26
    1410:	bb 0b       	sbc	r27, r27
    1412:	9c 01       	movw	r18, r24
    1414:	ad 01       	movw	r20, r26
    1416:	20 7f       	andi	r18, 0xF0	; 240
    1418:	3f 70       	andi	r19, 0x0F	; 15
    141a:	44 27       	eor	r20, r20
    141c:	55 27       	eor	r21, r21
    141e:	8d 89       	ldd	r24, Y+21	; 0x15
    1420:	9e 89       	ldd	r25, Y+22	; 0x16
    1422:	af 89       	ldd	r26, Y+23	; 0x17
    1424:	b8 8d       	ldd	r27, Y+24	; 0x18
    1426:	28 2b       	or	r18, r24
    1428:	39 2b       	or	r19, r25
    142a:	4a 2b       	or	r20, r26
    142c:	5b 2b       	or	r21, r27
    142e:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1432:	82 95       	swap	r24
    1434:	8f 70       	andi	r24, 0x0F	; 15
    1436:	88 2f       	mov	r24, r24
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a0 e0       	ldi	r26, 0x00	; 0
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	82 2b       	or	r24, r18
    1440:	93 2b       	or	r25, r19
    1442:	a4 2b       	or	r26, r20
    1444:	b5 2b       	or	r27, r21
    1446:	8d 8b       	std	Y+21, r24	; 0x15
    1448:	9e 8b       	std	Y+22, r25	; 0x16
    144a:	af 8b       	std	Y+23, r26	; 0x17
    144c:	b8 8f       	std	Y+24, r27	; 0x18
	
	cAdrWork = 0x8E;
    144e:	8e e8       	ldi	r24, 0x8E	; 142
    1450:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1452:	ce 01       	movw	r24, r28
    1454:	89 96       	adiw	r24, 0x29	; 41
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	41 e0       	ldi	r20, 0x01	; 1
    145a:	bc 01       	movw	r22, r24
    145c:	86 e7       	ldi	r24, 0x76	; 118
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    145e:	4d d8       	rcall	.-3942   	; 0x4fa <twi_master_transmit>
    1460:	42 e0       	ldi	r20, 0x02	; 2
    1462:	60 e2       	ldi	r22, 0x20	; 32
    1464:	72 e0       	ldi	r23, 0x02	; 2
    1466:	86 e7       	ldi	r24, 0x76	; 118
    1468:	9d d8       	rcall	.-3782   	; 0x5a4 <twi_master_receive>
	par_p1 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
    146a:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    146e:	88 2f       	mov	r24, r24
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	38 2f       	mov	r19, r24
    1474:	22 27       	eor	r18, r18
    1476:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	82 2b       	or	r24, r18
    1480:	93 2b       	or	r25, r19
    1482:	9a 8f       	std	Y+26, r25	; 0x1a
    1484:	89 8f       	std	Y+25, r24	; 0x19
	
	cAdrWork = 0x90;
    1486:	80 e9       	ldi	r24, 0x90	; 144
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1488:	89 a7       	std	Y+41, r24	; 0x29
    148a:	ce 01       	movw	r24, r28
    148c:	89 96       	adiw	r24, 0x29	; 41
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	41 e0       	ldi	r20, 0x01	; 1
    1492:	bc 01       	movw	r22, r24
    1494:	86 e7       	ldi	r24, 0x76	; 118
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    1496:	31 d8       	rcall	.-3998   	; 0x4fa <twi_master_transmit>
    1498:	42 e0       	ldi	r20, 0x02	; 2
    149a:	60 e2       	ldi	r22, 0x20	; 32
    149c:	72 e0       	ldi	r23, 0x02	; 2
    149e:	86 e7       	ldi	r24, 0x76	; 118
    14a0:	81 d8       	rcall	.-3838   	; 0x5a4 <twi_master_receive>
	par_p2 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
    14a2:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    14a6:	88 2f       	mov	r24, r24
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	38 2f       	mov	r19, r24
    14ac:	22 27       	eor	r18, r18
    14ae:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    14b2:	88 2f       	mov	r24, r24
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	82 2b       	or	r24, r18
    14b8:	93 2b       	or	r25, r19
    14ba:	9c 8f       	std	Y+28, r25	; 0x1c
	
	cAdrWork = 0x92;
    14bc:	8b 8f       	std	Y+27, r24	; 0x1b
    14be:	82 e9       	ldi	r24, 0x92	; 146
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    14c0:	89 a7       	std	Y+41, r24	; 0x29
    14c2:	ce 01       	movw	r24, r28
    14c4:	89 96       	adiw	r24, 0x29	; 41
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	41 e0       	ldi	r20, 0x01	; 1
    14ca:	bc 01       	movw	r22, r24
    14cc:	86 e7       	ldi	r24, 0x76	; 118
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    14ce:	15 d8       	rcall	.-4054   	; 0x4fa <twi_master_transmit>
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	60 e2       	ldi	r22, 0x20	; 32
    14d4:	72 e0       	ldi	r23, 0x02	; 2
    14d6:	86 e7       	ldi	r24, 0x76	; 118
    14d8:	65 d8       	rcall	.-3894   	; 0x5a4 <twi_master_receive>
	par_p3 = cRecieve[0];
    14da:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
	
	cAdrWork = 0x94;
    14de:	8d 8f       	std	Y+29, r24	; 0x1d
    14e0:	84 e9       	ldi	r24, 0x94	; 148
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    14e2:	89 a7       	std	Y+41, r24	; 0x29
    14e4:	ce 01       	movw	r24, r28
    14e6:	89 96       	adiw	r24, 0x29	; 41
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	bc 01       	movw	r22, r24
    14ee:	86 e7       	ldi	r24, 0x76	; 118
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    14f0:	04 d8       	rcall	.-4088   	; 0x4fa <twi_master_transmit>
    14f2:	42 e0       	ldi	r20, 0x02	; 2
    14f4:	60 e2       	ldi	r22, 0x20	; 32
    14f6:	72 e0       	ldi	r23, 0x02	; 2
    14f8:	86 e7       	ldi	r24, 0x76	; 118
    14fa:	54 d8       	rcall	.-3928   	; 0x5a4 <twi_master_receive>
	par_p4 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
    14fc:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1500:	88 2f       	mov	r24, r24
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	38 2f       	mov	r19, r24
    1506:	22 27       	eor	r18, r18
    1508:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    150c:	88 2f       	mov	r24, r24
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	82 2b       	or	r24, r18
    1512:	93 2b       	or	r25, r19
    1514:	9f 8f       	std	Y+31, r25	; 0x1f
    1516:	8e 8f       	std	Y+30, r24	; 0x1e
	
	cAdrWork = 0x96;
    1518:	86 e9       	ldi	r24, 0x96	; 150
    151a:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    151c:	ce 01       	movw	r24, r28
    151e:	89 96       	adiw	r24, 0x29	; 41
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	41 e0       	ldi	r20, 0x01	; 1
    1524:	bc 01       	movw	r22, r24
    1526:	86 e7       	ldi	r24, 0x76	; 118
    1528:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    152c:	42 e0       	ldi	r20, 0x02	; 2
    152e:	60 e2       	ldi	r22, 0x20	; 32
    1530:	72 e0       	ldi	r23, 0x02	; 2
    1532:	86 e7       	ldi	r24, 0x76	; 118
    1534:	37 d8       	rcall	.-3986   	; 0x5a4 <twi_master_receive>
	par_p5 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
    1536:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	38 2f       	mov	r19, r24
    1540:	22 27       	eor	r18, r18
    1542:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	82 2b       	or	r24, r18
    154c:	93 2b       	or	r25, r19
    154e:	99 a3       	std	Y+33, r25	; 0x21
    1550:	88 a3       	std	Y+32, r24	; 0x20
	
	cAdrWork = 0x99;
    1552:	89 e9       	ldi	r24, 0x99	; 153
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1554:	89 a7       	std	Y+41, r24	; 0x29
    1556:	ce 01       	movw	r24, r28
    1558:	89 96       	adiw	r24, 0x29	; 41
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	41 e0       	ldi	r20, 0x01	; 1
    155e:	bc 01       	movw	r22, r24
    1560:	86 e7       	ldi	r24, 0x76	; 118
    1562:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    1566:	41 e0       	ldi	r20, 0x01	; 1
    1568:	60 e2       	ldi	r22, 0x20	; 32
    156a:	72 e0       	ldi	r23, 0x02	; 2
    156c:	86 e7       	ldi	r24, 0x76	; 118
    156e:	1a d8       	rcall	.-4044   	; 0x5a4 <twi_master_receive>
	par_p6 = cRecieve[0];
    1570:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1574:	8a a3       	std	Y+34, r24	; 0x22
	
	cAdrWork = 0x98;
    1576:	88 e9       	ldi	r24, 0x98	; 152
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1578:	89 a7       	std	Y+41, r24	; 0x29
    157a:	ce 01       	movw	r24, r28
    157c:	89 96       	adiw	r24, 0x29	; 41
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	41 e0       	ldi	r20, 0x01	; 1
    1582:	bc 01       	movw	r22, r24
    1584:	86 e7       	ldi	r24, 0x76	; 118
    1586:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    158a:	42 e0       	ldi	r20, 0x02	; 2
    158c:	60 e2       	ldi	r22, 0x20	; 32
    158e:	72 e0       	ldi	r23, 0x02	; 2
    1590:	86 e7       	ldi	r24, 0x76	; 118
    1592:	08 d8       	rcall	.-4080   	; 0x5a4 <twi_master_receive>
	par_p7 = cRecieve[0];
    1594:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1598:	8b a3       	std	Y+35, r24	; 0x23
	
	cAdrWork = 0x9C;
    159a:	8c e9       	ldi	r24, 0x9C	; 156
    159c:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    159e:	ce 01       	movw	r24, r28
    15a0:	89 96       	adiw	r24, 0x29	; 41
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	bc 01       	movw	r22, r24
    15a8:	86 e7       	ldi	r24, 0x76	; 118
    15aa:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    15ae:	42 e0       	ldi	r20, 0x02	; 2
    15b0:	60 e2       	ldi	r22, 0x20	; 32
    15b2:	72 e0       	ldi	r23, 0x02	; 2
    15b4:	86 e7       	ldi	r24, 0x76	; 118
    15b6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_p8 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
    15ba:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    15be:	88 2f       	mov	r24, r24
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	38 2f       	mov	r19, r24
    15c4:	22 27       	eor	r18, r18
    15c6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    15ca:	88 2f       	mov	r24, r24
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	82 2b       	or	r24, r18
    15d0:	93 2b       	or	r25, r19
    15d2:	9d a3       	std	Y+37, r25	; 0x25
    15d4:	8c a3       	std	Y+36, r24	; 0x24
	
	cAdrWork = 0x9E;
    15d6:	8e e9       	ldi	r24, 0x9E	; 158
    15d8:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    15da:	ce 01       	movw	r24, r28
    15dc:	89 96       	adiw	r24, 0x29	; 41
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	41 e0       	ldi	r20, 0x01	; 1
    15e2:	bc 01       	movw	r22, r24
    15e4:	86 e7       	ldi	r24, 0x76	; 118
    15e6:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    15ea:	42 e0       	ldi	r20, 0x02	; 2
    15ec:	60 e2       	ldi	r22, 0x20	; 32
    15ee:	72 e0       	ldi	r23, 0x02	; 2
    15f0:	86 e7       	ldi	r24, 0x76	; 118
    15f2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_p9 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
    15f6:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	38 2f       	mov	r19, r24
    1600:	22 27       	eor	r18, r18
    1602:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1606:	88 2f       	mov	r24, r24
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	82 2b       	or	r24, r18
    160c:	93 2b       	or	r25, r19
    160e:	9f a3       	std	Y+39, r25	; 0x27
    1610:	8e a3       	std	Y+38, r24	; 0x26
	
	cAdrWork = 0xA0;
    1612:	80 ea       	ldi	r24, 0xA0	; 160
    1614:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1616:	ce 01       	movw	r24, r28
    1618:	89 96       	adiw	r24, 0x29	; 41
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	41 e0       	ldi	r20, 0x01	; 1
    161e:	bc 01       	movw	r22, r24
    1620:	86 e7       	ldi	r24, 0x76	; 118
    1622:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    1626:	42 e0       	ldi	r20, 0x02	; 2
    1628:	60 e2       	ldi	r22, 0x20	; 32
    162a:	72 e0       	ldi	r23, 0x02	; 2
    162c:	86 e7       	ldi	r24, 0x76	; 118
    162e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_p10 = cRecieve[0];
    1632:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
	
	
	var1 = ((double)t_fine / 2) - 64000.0;
    1636:	88 a7       	std	Y+40, r24	; 0x28
    1638:	69 81       	ldd	r22, Y+1	; 0x01
    163a:	7a 81       	ldd	r23, Y+2	; 0x02
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	9a d5       	rcall	.+2868   	; 0x2176 <__floatsisf>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	50 e4       	ldi	r21, 0x40	; 64
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	f6 d4       	rcall	.+2540   	; 0x2040 <__divsf3>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	4a e7       	ldi	r20, 0x7A	; 122
    165e:	57 e4       	ldi	r21, 0x47	; 71
    1660:	bc 01       	movw	r22, r24
    1662:	cd 01       	movw	r24, r26
    1664:	88 d4       	rcall	.+2320   	; 0x1f76 <__subsf3>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	8d 83       	std	Y+5, r24	; 0x05
    166c:	9e 83       	std	Y+6, r25	; 0x06
    166e:	af 83       	std	Y+7, r26	; 0x07
	var2 = var1 * var1 * ((double)par_p6 / 131072);
    1670:	b8 87       	std	Y+8, r27	; 0x08
    1672:	2d 81       	ldd	r18, Y+5	; 0x05
    1674:	3e 81       	ldd	r19, Y+6	; 0x06
    1676:	4f 81       	ldd	r20, Y+7	; 0x07
    1678:	58 85       	ldd	r21, Y+8	; 0x08
    167a:	6d 81       	ldd	r22, Y+5	; 0x05
    167c:	7e 81       	ldd	r23, Y+6	; 0x06
    167e:	8f 81       	ldd	r24, Y+7	; 0x07
    1680:	98 85       	ldd	r25, Y+8	; 0x08
    1682:	05 d6       	rcall	.+3082   	; 0x228e <__mulsf3>
    1684:	dc 01       	movw	r26, r24
    1686:	cb 01       	movw	r24, r22
    1688:	6c 01       	movw	r12, r24
    168a:	7d 01       	movw	r14, r26
    168c:	8a a1       	ldd	r24, Y+34	; 0x22
    168e:	08 2e       	mov	r0, r24
    1690:	00 0c       	add	r0, r0
    1692:	99 0b       	sbc	r25, r25
    1694:	aa 0b       	sbc	r26, r26
    1696:	bb 0b       	sbc	r27, r27
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	6c d5       	rcall	.+2776   	; 0x2176 <__floatsisf>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	58 e4       	ldi	r21, 0x48	; 72
    16aa:	bc 01       	movw	r22, r24
    16ac:	cd 01       	movw	r24, r26
    16ae:	c8 d4       	rcall	.+2448   	; 0x2040 <__divsf3>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	9c 01       	movw	r18, r24
    16b6:	ad 01       	movw	r20, r26
    16b8:	c7 01       	movw	r24, r14
    16ba:	b6 01       	movw	r22, r12
    16bc:	e8 d5       	rcall	.+3024   	; 0x228e <__mulsf3>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	89 87       	std	Y+9, r24	; 0x09
    16c4:	9a 87       	std	Y+10, r25	; 0x0a
    16c6:	ab 87       	std	Y+11, r26	; 0x0b
	var2 = var2 + (var1 * (double)par_p5 * 2.0);
    16c8:	bc 87       	std	Y+12, r27	; 0x0c
    16ca:	88 a1       	ldd	r24, Y+32	; 0x20
    16cc:	99 a1       	ldd	r25, Y+33	; 0x21
    16ce:	09 2e       	mov	r0, r25
    16d0:	00 0c       	add	r0, r0
    16d2:	aa 0b       	sbc	r26, r26
    16d4:	bb 0b       	sbc	r27, r27
    16d6:	bc 01       	movw	r22, r24
    16d8:	cd 01       	movw	r24, r26
    16da:	4d d5       	rcall	.+2714   	; 0x2176 <__floatsisf>
    16dc:	dc 01       	movw	r26, r24
    16de:	cb 01       	movw	r24, r22
    16e0:	2d 81       	ldd	r18, Y+5	; 0x05
    16e2:	3e 81       	ldd	r19, Y+6	; 0x06
    16e4:	4f 81       	ldd	r20, Y+7	; 0x07
    16e6:	58 85       	ldd	r21, Y+8	; 0x08
    16e8:	bc 01       	movw	r22, r24
    16ea:	cd 01       	movw	r24, r26
    16ec:	d0 d5       	rcall	.+2976   	; 0x228e <__mulsf3>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	9c 01       	movw	r18, r24
    16f4:	ad 01       	movw	r20, r26
    16f6:	bc 01       	movw	r22, r24
    16f8:	cd 01       	movw	r24, r26
    16fa:	3e d4       	rcall	.+2172   	; 0x1f78 <__addsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	9c 01       	movw	r18, r24
    1702:	ad 01       	movw	r20, r26
    1704:	69 85       	ldd	r22, Y+9	; 0x09
    1706:	7a 85       	ldd	r23, Y+10	; 0x0a
    1708:	8b 85       	ldd	r24, Y+11	; 0x0b
    170a:	9c 85       	ldd	r25, Y+12	; 0x0c
    170c:	35 d4       	rcall	.+2154   	; 0x1f78 <__addsf3>
    170e:	dc 01       	movw	r26, r24
    1710:	cb 01       	movw	r24, r22
    1712:	89 87       	std	Y+9, r24	; 0x09
    1714:	9a 87       	std	Y+10, r25	; 0x0a
    1716:	ab 87       	std	Y+11, r26	; 0x0b
	var2 = (var2 / 4.0) + ((double)par_p4 * 65536.0);
    1718:	bc 87       	std	Y+12, r27	; 0x0c
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e8       	ldi	r20, 0x80	; 128
    1720:	50 e4       	ldi	r21, 0x40	; 64
    1722:	69 85       	ldd	r22, Y+9	; 0x09
    1724:	7a 85       	ldd	r23, Y+10	; 0x0a
    1726:	8b 85       	ldd	r24, Y+11	; 0x0b
    1728:	9c 85       	ldd	r25, Y+12	; 0x0c
    172a:	8a d4       	rcall	.+2324   	; 0x2040 <__divsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	6c 01       	movw	r12, r24
    1732:	7d 01       	movw	r14, r26
    1734:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1736:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1738:	09 2e       	mov	r0, r25
    173a:	00 0c       	add	r0, r0
    173c:	aa 0b       	sbc	r26, r26
    173e:	bb 0b       	sbc	r27, r27
    1740:	bc 01       	movw	r22, r24
    1742:	cd 01       	movw	r24, r26
    1744:	18 d5       	rcall	.+2608   	; 0x2176 <__floatsisf>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	40 e8       	ldi	r20, 0x80	; 128
    1750:	57 e4       	ldi	r21, 0x47	; 71
    1752:	bc 01       	movw	r22, r24
    1754:	cd 01       	movw	r24, r26
    1756:	9b d5       	rcall	.+2870   	; 0x228e <__mulsf3>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	9c 01       	movw	r18, r24
    175e:	ad 01       	movw	r20, r26
    1760:	c7 01       	movw	r24, r14
    1762:	b6 01       	movw	r22, r12
    1764:	09 d4       	rcall	.+2066   	; 0x1f78 <__addsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	89 87       	std	Y+9, r24	; 0x09
    176c:	9a 87       	std	Y+10, r25	; 0x0a
	var1 = ((((double)par_p3 * var1 * var1) / 16384.0) + ((double)par_p2 * var1)) / 524288.0;
    176e:	ab 87       	std	Y+11, r26	; 0x0b
    1770:	bc 87       	std	Y+12, r27	; 0x0c
    1772:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1774:	08 2e       	mov	r0, r24
    1776:	00 0c       	add	r0, r0
    1778:	99 0b       	sbc	r25, r25
    177a:	aa 0b       	sbc	r26, r26
    177c:	bb 0b       	sbc	r27, r27
    177e:	bc 01       	movw	r22, r24
    1780:	cd 01       	movw	r24, r26
    1782:	f9 d4       	rcall	.+2546   	; 0x2176 <__floatsisf>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	2d 81       	ldd	r18, Y+5	; 0x05
    178a:	3e 81       	ldd	r19, Y+6	; 0x06
    178c:	4f 81       	ldd	r20, Y+7	; 0x07
    178e:	58 85       	ldd	r21, Y+8	; 0x08
    1790:	bc 01       	movw	r22, r24
    1792:	cd 01       	movw	r24, r26
    1794:	7c d5       	rcall	.+2808   	; 0x228e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	2d 81       	ldd	r18, Y+5	; 0x05
    179c:	3e 81       	ldd	r19, Y+6	; 0x06
    179e:	4f 81       	ldd	r20, Y+7	; 0x07
    17a0:	58 85       	ldd	r21, Y+8	; 0x08
    17a2:	bc 01       	movw	r22, r24
    17a4:	cd 01       	movw	r24, r26
    17a6:	73 d5       	rcall	.+2790   	; 0x228e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e8       	ldi	r20, 0x80	; 128
    17b2:	56 e4       	ldi	r21, 0x46	; 70
    17b4:	bc 01       	movw	r22, r24
    17b6:	cd 01       	movw	r24, r26
    17b8:	43 d4       	rcall	.+2182   	; 0x2040 <__divsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	6c 01       	movw	r12, r24
    17c0:	7d 01       	movw	r14, r26
    17c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17c6:	09 2e       	mov	r0, r25
    17c8:	00 0c       	add	r0, r0
    17ca:	aa 0b       	sbc	r26, r26
    17cc:	bb 0b       	sbc	r27, r27
    17ce:	bc 01       	movw	r22, r24
    17d0:	cd 01       	movw	r24, r26
    17d2:	d1 d4       	rcall	.+2466   	; 0x2176 <__floatsisf>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	2d 81       	ldd	r18, Y+5	; 0x05
    17da:	3e 81       	ldd	r19, Y+6	; 0x06
    17dc:	4f 81       	ldd	r20, Y+7	; 0x07
    17de:	58 85       	ldd	r21, Y+8	; 0x08
    17e0:	bc 01       	movw	r22, r24
    17e2:	cd 01       	movw	r24, r26
    17e4:	54 d5       	rcall	.+2728   	; 0x228e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	9c 01       	movw	r18, r24
    17ec:	ad 01       	movw	r20, r26
    17ee:	c7 01       	movw	r24, r14
    17f0:	b6 01       	movw	r22, r12
    17f2:	c2 d3       	rcall	.+1924   	; 0x1f78 <__addsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	40 e0       	ldi	r20, 0x00	; 0
    17fe:	59 e4       	ldi	r21, 0x49	; 73
    1800:	bc 01       	movw	r22, r24
    1802:	cd 01       	movw	r24, r26
    1804:	1d d4       	rcall	.+2106   	; 0x2040 <__divsf3>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	8d 83       	std	Y+5, r24	; 0x05
    180c:	9e 83       	std	Y+6, r25	; 0x06
	var1 = (1.0 + (var1 / 32768.0)) * (double)par_p1;
    180e:	af 83       	std	Y+7, r26	; 0x07
    1810:	b8 87       	std	Y+8, r27	; 0x08
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	40 e0       	ldi	r20, 0x00	; 0
    1818:	57 e4       	ldi	r21, 0x47	; 71
    181a:	6d 81       	ldd	r22, Y+5	; 0x05
    181c:	7e 81       	ldd	r23, Y+6	; 0x06
    181e:	8f 81       	ldd	r24, Y+7	; 0x07
    1820:	98 85       	ldd	r25, Y+8	; 0x08
    1822:	0e d4       	rcall	.+2076   	; 0x2040 <__divsf3>
    1824:	dc 01       	movw	r26, r24
    1826:	cb 01       	movw	r24, r22
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	40 e8       	ldi	r20, 0x80	; 128
    182e:	5f e3       	ldi	r21, 0x3F	; 63
    1830:	bc 01       	movw	r22, r24
    1832:	cd 01       	movw	r24, r26
    1834:	a1 d3       	rcall	.+1858   	; 0x1f78 <__addsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	6c 01       	movw	r12, r24
    183c:	7d 01       	movw	r14, r26
    183e:	89 8d       	ldd	r24, Y+25	; 0x19
    1840:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1842:	cc 01       	movw	r24, r24
    1844:	a0 e0       	ldi	r26, 0x00	; 0
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	bc 01       	movw	r22, r24
    184a:	cd 01       	movw	r24, r26
    184c:	92 d4       	rcall	.+2340   	; 0x2172 <__floatunsisf>
    184e:	dc 01       	movw	r26, r24
    1850:	cb 01       	movw	r24, r22
    1852:	9c 01       	movw	r18, r24
    1854:	ad 01       	movw	r20, r26
    1856:	c7 01       	movw	r24, r14
    1858:	b6 01       	movw	r22, r12
    185a:	19 d5       	rcall	.+2610   	; 0x228e <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	8d 83       	std	Y+5, r24	; 0x05
    1862:	9e 83       	std	Y+6, r25	; 0x06
	press_comp = 1048576.0 - (double)press_adc;
    1864:	af 83       	std	Y+7, r26	; 0x07
    1866:	b8 87       	std	Y+8, r27	; 0x08
    1868:	6d 89       	ldd	r22, Y+21	; 0x15
    186a:	7e 89       	ldd	r23, Y+22	; 0x16
    186c:	8f 89       	ldd	r24, Y+23	; 0x17
    186e:	98 8d       	ldd	r25, Y+24	; 0x18
    1870:	80 d4       	rcall	.+2304   	; 0x2172 <__floatunsisf>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	9c 01       	movw	r18, r24
    1878:	ad 01       	movw	r20, r26
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	70 e0       	ldi	r23, 0x00	; 0
    187e:	80 e8       	ldi	r24, 0x80	; 128
    1880:	99 e4       	ldi	r25, 0x49	; 73
    1882:	79 d3       	rcall	.+1778   	; 0x1f76 <__subsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	89 8b       	std	Y+17, r24	; 0x11
    188a:	9a 8b       	std	Y+18, r25	; 0x12
	press_comp = ((press_comp - (var2 / 4096.0)) * 6250.0) / var1;
    188c:	ab 8b       	std	Y+19, r26	; 0x13
    188e:	bc 8b       	std	Y+20, r27	; 0x14
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e8       	ldi	r20, 0x80	; 128
    1896:	55 e4       	ldi	r21, 0x45	; 69
    1898:	69 85       	ldd	r22, Y+9	; 0x09
    189a:	7a 85       	ldd	r23, Y+10	; 0x0a
    189c:	8b 85       	ldd	r24, Y+11	; 0x0b
    189e:	9c 85       	ldd	r25, Y+12	; 0x0c
    18a0:	cf d3       	rcall	.+1950   	; 0x2040 <__divsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	9c 01       	movw	r18, r24
    18a8:	ad 01       	movw	r20, r26
    18aa:	69 89       	ldd	r22, Y+17	; 0x11
    18ac:	7a 89       	ldd	r23, Y+18	; 0x12
    18ae:	8b 89       	ldd	r24, Y+19	; 0x13
    18b0:	9c 89       	ldd	r25, Y+20	; 0x14
    18b2:	61 d3       	rcall	.+1730   	; 0x1f76 <__subsf3>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e5       	ldi	r19, 0x50	; 80
    18bc:	43 ec       	ldi	r20, 0xC3	; 195
    18be:	55 e4       	ldi	r21, 0x45	; 69
    18c0:	bc 01       	movw	r22, r24
    18c2:	cd 01       	movw	r24, r26
    18c4:	e4 d4       	rcall	.+2504   	; 0x228e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	2d 81       	ldd	r18, Y+5	; 0x05
    18cc:	3e 81       	ldd	r19, Y+6	; 0x06
    18ce:	4f 81       	ldd	r20, Y+7	; 0x07
    18d0:	58 85       	ldd	r21, Y+8	; 0x08
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	b4 d3       	rcall	.+1896   	; 0x2040 <__divsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	89 8b       	std	Y+17, r24	; 0x11
    18de:	9a 8b       	std	Y+18, r25	; 0x12
    18e0:	ab 8b       	std	Y+19, r26	; 0x13
	var1 = ((double)par_p9 * press_comp) / 2147483648.0;
    18e2:	bc 8b       	std	Y+20, r27	; 0x14
    18e4:	8e a1       	ldd	r24, Y+38	; 0x26
    18e6:	9f a1       	ldd	r25, Y+39	; 0x27
    18e8:	09 2e       	mov	r0, r25
    18ea:	00 0c       	add	r0, r0
    18ec:	aa 0b       	sbc	r26, r26
    18ee:	bb 0b       	sbc	r27, r27
    18f0:	bc 01       	movw	r22, r24
    18f2:	cd 01       	movw	r24, r26
    18f4:	40 d4       	rcall	.+2176   	; 0x2176 <__floatsisf>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	29 89       	ldd	r18, Y+17	; 0x11
    18fc:	3a 89       	ldd	r19, Y+18	; 0x12
    18fe:	4b 89       	ldd	r20, Y+19	; 0x13
    1900:	5c 89       	ldd	r21, Y+20	; 0x14
    1902:	bc 01       	movw	r22, r24
    1904:	cd 01       	movw	r24, r26
    1906:	c3 d4       	rcall	.+2438   	; 0x228e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e0       	ldi	r20, 0x00	; 0
    1912:	5f e4       	ldi	r21, 0x4F	; 79
    1914:	bc 01       	movw	r22, r24
    1916:	cd 01       	movw	r24, r26
    1918:	93 d3       	rcall	.+1830   	; 0x2040 <__divsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	8d 83       	std	Y+5, r24	; 0x05
    1920:	9e 83       	std	Y+6, r25	; 0x06
    1922:	af 83       	std	Y+7, r26	; 0x07
	var2 = press_comp * ((double)par_p8 / 32768);
    1924:	b8 87       	std	Y+8, r27	; 0x08
    1926:	8c a1       	ldd	r24, Y+36	; 0x24
    1928:	9d a1       	ldd	r25, Y+37	; 0x25
    192a:	09 2e       	mov	r0, r25
    192c:	00 0c       	add	r0, r0
    192e:	aa 0b       	sbc	r26, r26
    1930:	bb 0b       	sbc	r27, r27
    1932:	bc 01       	movw	r22, r24
    1934:	cd 01       	movw	r24, r26
    1936:	1f d4       	rcall	.+2110   	; 0x2176 <__floatsisf>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	40 e0       	ldi	r20, 0x00	; 0
    1942:	57 e4       	ldi	r21, 0x47	; 71
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	7b d3       	rcall	.+1782   	; 0x2040 <__divsf3>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	29 89       	ldd	r18, Y+17	; 0x11
    1950:	3a 89       	ldd	r19, Y+18	; 0x12
    1952:	4b 89       	ldd	r20, Y+19	; 0x13
    1954:	5c 89       	ldd	r21, Y+20	; 0x14
    1956:	bc 01       	movw	r22, r24
    1958:	cd 01       	movw	r24, r26
    195a:	99 d4       	rcall	.+2354   	; 0x228e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	89 87       	std	Y+9, r24	; 0x09
    1962:	9a 87       	std	Y+10, r25	; 0x0a
    1964:	ab 87       	std	Y+11, r26	; 0x0b
	var3 = (press_comp / 256.0) * (press_comp / 256.0) * (press_comp / 256.0) * (par_p10 / 131072.0);
    1966:	bc 87       	std	Y+12, r27	; 0x0c
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e8       	ldi	r20, 0x80	; 128
    196e:	53 e4       	ldi	r21, 0x43	; 67
    1970:	69 89       	ldd	r22, Y+17	; 0x11
    1972:	7a 89       	ldd	r23, Y+18	; 0x12
    1974:	8b 89       	ldd	r24, Y+19	; 0x13
    1976:	9c 89       	ldd	r25, Y+20	; 0x14
    1978:	63 d3       	rcall	.+1734   	; 0x2040 <__divsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	6c 01       	movw	r12, r24
    1980:	7d 01       	movw	r14, r26
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e8       	ldi	r20, 0x80	; 128
    1988:	53 e4       	ldi	r21, 0x43	; 67
    198a:	69 89       	ldd	r22, Y+17	; 0x11
    198c:	7a 89       	ldd	r23, Y+18	; 0x12
    198e:	8b 89       	ldd	r24, Y+19	; 0x13
    1990:	9c 89       	ldd	r25, Y+20	; 0x14
    1992:	56 d3       	rcall	.+1708   	; 0x2040 <__divsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	9c 01       	movw	r18, r24
    199a:	ad 01       	movw	r20, r26
    199c:	c7 01       	movw	r24, r14
    199e:	b6 01       	movw	r22, r12
    19a0:	76 d4       	rcall	.+2284   	; 0x228e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	6c 01       	movw	r12, r24
    19a8:	7d 01       	movw	r14, r26
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e8       	ldi	r20, 0x80	; 128
    19b0:	53 e4       	ldi	r21, 0x43	; 67
    19b2:	69 89       	ldd	r22, Y+17	; 0x11
    19b4:	7a 89       	ldd	r23, Y+18	; 0x12
    19b6:	8b 89       	ldd	r24, Y+19	; 0x13
    19b8:	9c 89       	ldd	r25, Y+20	; 0x14
    19ba:	42 d3       	rcall	.+1668   	; 0x2040 <__divsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9c 01       	movw	r18, r24
    19c2:	ad 01       	movw	r20, r26
    19c4:	c7 01       	movw	r24, r14
    19c6:	b6 01       	movw	r22, r12
    19c8:	62 d4       	rcall	.+2244   	; 0x228e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	6c 01       	movw	r12, r24
    19d0:	7d 01       	movw	r14, r26
    19d2:	88 a5       	ldd	r24, Y+40	; 0x28
    19d4:	08 2e       	mov	r0, r24
    19d6:	00 0c       	add	r0, r0
    19d8:	99 0b       	sbc	r25, r25
    19da:	aa 0b       	sbc	r26, r26
    19dc:	bb 0b       	sbc	r27, r27
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	c9 d3       	rcall	.+1938   	; 0x2176 <__floatsisf>
    19e4:	dc 01       	movw	r26, r24
    19e6:	cb 01       	movw	r24, r22
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	58 e4       	ldi	r21, 0x48	; 72
    19f0:	bc 01       	movw	r22, r24
    19f2:	cd 01       	movw	r24, r26
    19f4:	25 d3       	rcall	.+1610   	; 0x2040 <__divsf3>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	9c 01       	movw	r18, r24
    19fc:	ad 01       	movw	r20, r26
    19fe:	c7 01       	movw	r24, r14
    1a00:	b6 01       	movw	r22, r12
    1a02:	45 d4       	rcall	.+2186   	; 0x228e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	8d 87       	std	Y+13, r24	; 0x0d
    1a0a:	9e 87       	std	Y+14, r25	; 0x0e
	press_comp = press_comp + (var1 + var2 + var3 + ((double)par_p7 * 128.0)) / 16.0;
    1a0c:	af 87       	std	Y+15, r26	; 0x0f
    1a0e:	b8 8b       	std	Y+16, r27	; 0x10
    1a10:	29 85       	ldd	r18, Y+9	; 0x09
    1a12:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a14:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a16:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a18:	6d 81       	ldd	r22, Y+5	; 0x05
    1a1a:	7e 81       	ldd	r23, Y+6	; 0x06
    1a1c:	8f 81       	ldd	r24, Y+7	; 0x07
    1a1e:	98 85       	ldd	r25, Y+8	; 0x08
    1a20:	ab d2       	rcall	.+1366   	; 0x1f78 <__addsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a28:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a2a:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a2c:	58 89       	ldd	r21, Y+16	; 0x10
    1a2e:	bc 01       	movw	r22, r24
    1a30:	cd 01       	movw	r24, r26
    1a32:	a2 d2       	rcall	.+1348   	; 0x1f78 <__addsf3>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	6c 01       	movw	r12, r24
    1a3a:	7d 01       	movw	r14, r26
    1a3c:	8b a1       	ldd	r24, Y+35	; 0x23
    1a3e:	08 2e       	mov	r0, r24
    1a40:	00 0c       	add	r0, r0
    1a42:	99 0b       	sbc	r25, r25
    1a44:	aa 0b       	sbc	r26, r26
    1a46:	bb 0b       	sbc	r27, r27
    1a48:	bc 01       	movw	r22, r24
    1a4a:	cd 01       	movw	r24, r26
    1a4c:	94 d3       	rcall	.+1832   	; 0x2176 <__floatsisf>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	40 e0       	ldi	r20, 0x00	; 0
    1a58:	53 e4       	ldi	r21, 0x43	; 67
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	17 d4       	rcall	.+2094   	; 0x228e <__mulsf3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	9c 01       	movw	r18, r24
    1a66:	ad 01       	movw	r20, r26
    1a68:	c7 01       	movw	r24, r14
    1a6a:	b6 01       	movw	r22, r12
    1a6c:	85 d2       	rcall	.+1290   	; 0x1f78 <__addsf3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	51 e4       	ldi	r21, 0x41	; 65
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	e0 d2       	rcall	.+1472   	; 0x2040 <__divsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	9c 01       	movw	r18, r24
    1a86:	ad 01       	movw	r20, r26
    1a88:	69 89       	ldd	r22, Y+17	; 0x11
    1a8a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a90:	73 d2       	rcall	.+1254   	; 0x1f78 <__addsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	89 8b       	std	Y+17, r24	; 0x11
    1a98:	9a 8b       	std	Y+18, r25	; 0x12
    1a9a:	ab 8b       	std	Y+19, r26	; 0x13
    1a9c:	bc 8b       	std	Y+20, r27	; 0x14
    1a9e:	89 89       	ldd	r24, Y+17	; 0x11
    1aa0:	9a 89       	ldd	r25, Y+18	; 0x12
    1aa2:	ab 89       	ldd	r26, Y+19	; 0x13
	
	return press_comp;
    1aa4:	bc 89       	ldd	r27, Y+20	; 0x14
    1aa6:	bc 01       	movw	r22, r24
    1aa8:	cd 01       	movw	r24, r26
    1aaa:	a9 96       	adiw	r28, 0x29	; 41
}
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	ff 90       	pop	r15
    1abc:	ef 90       	pop	r14
    1abe:	df 90       	pop	r13
    1ac0:	cf 90       	pop	r12
    1ac2:	08 95       	ret

00001ac4 <READ_HUM>:
    1ac4:	8f 92       	push	r8
    1ac6:	9f 92       	push	r9
    1ac8:	af 92       	push	r10

float READ_HUM ( void )
{
    1aca:	bf 92       	push	r11
    1acc:	cf 92       	push	r12
    1ace:	df 92       	push	r13
    1ad0:	ef 92       	push	r14
    1ad2:	ff 92       	push	r15
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	ae 97       	sbiw	r28, 0x2e	; 46
    1ade:	0f b6       	in	r0, 0x3f	; 63
    1ae0:	f8 94       	cli
    1ae2:	de bf       	out	0x3e, r29	; 62
    1ae4:	0f be       	out	0x3f, r0	; 63
    1ae6:	cd bf       	out	0x3d, r28	; 61
	double t_comp = READ_TEMP_F();
    1ae8:	40 da       	rcall	.-2944   	; 0xf6a <READ_TEMP_F>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	89 83       	std	Y+1, r24	; 0x01
    1af0:	9a 83       	std	Y+2, r25	; 0x02
    1af2:	ab 83       	std	Y+3, r26	; 0x03
    1af4:	bc 83       	std	Y+4, r27	; 0x04
	unsigned char cAdrWork = 0;
    1af6:	1e a6       	std	Y+46, r1	; 0x2e
	double var1 = 0;
    1af8:	1d 82       	std	Y+5, r1	; 0x05
    1afa:	1e 82       	std	Y+6, r1	; 0x06
    1afc:	1f 82       	std	Y+7, r1	; 0x07
    1afe:	18 86       	std	Y+8, r1	; 0x08
	double var2 = 0;
    1b00:	19 86       	std	Y+9, r1	; 0x09
    1b02:	1a 86       	std	Y+10, r1	; 0x0a
    1b04:	1b 86       	std	Y+11, r1	; 0x0b
    1b06:	1c 86       	std	Y+12, r1	; 0x0c
	double var3 = 0;
    1b08:	1d 86       	std	Y+13, r1	; 0x0d
    1b0a:	1e 86       	std	Y+14, r1	; 0x0e
    1b0c:	1f 86       	std	Y+15, r1	; 0x0f
    1b0e:	18 8a       	std	Y+16, r1	; 0x10
	double var4 = 0;
    1b10:	19 8a       	std	Y+17, r1	; 0x11
    1b12:	1a 8a       	std	Y+18, r1	; 0x12
    1b14:	1b 8a       	std	Y+19, r1	; 0x13
    1b16:	1c 8a       	std	Y+20, r1	; 0x14
	double var5 = 0;
    1b18:	1d 8a       	std	Y+21, r1	; 0x15
    1b1a:	1e 8a       	std	Y+22, r1	; 0x16
    1b1c:	1f 8a       	std	Y+23, r1	; 0x17
    1b1e:	18 8e       	std	Y+24, r1	; 0x18
	double var6 = 0;
    1b20:	19 8e       	std	Y+25, r1	; 0x19
    1b22:	1a 8e       	std	Y+26, r1	; 0x1a
    1b24:	1b 8e       	std	Y+27, r1	; 0x1b
    1b26:	1c 8e       	std	Y+28, r1	; 0x1c
	double hum_comp = 0;
    1b28:	1d 8e       	std	Y+29, r1	; 0x1d
    1b2a:	1e 8e       	std	Y+30, r1	; 0x1e
    1b2c:	1f 8e       	std	Y+31, r1	; 0x1f
    1b2e:	18 a2       	std	Y+32, r1	; 0x20
	uint32_t hum_adc = 0;
    1b30:	19 a2       	std	Y+33, r1	; 0x21
    1b32:	1a a2       	std	Y+34, r1	; 0x22
    1b34:	1b a2       	std	Y+35, r1	; 0x23
    1b36:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t par_h1  = 0;
    1b38:	1e a2       	std	Y+38, r1	; 0x26
    1b3a:	1d a2       	std	Y+37, r1	; 0x25
	uint16_t par_h2  = 0;
    1b3c:	18 a6       	std	Y+40, r1	; 0x28
    1b3e:	1f a2       	std	Y+39, r1	; 0x27
	int8_t par_h3  = 0;
    1b40:	19 a6       	std	Y+41, r1	; 0x29
	int8_t par_h4  = 0;
    1b42:	1a a6       	std	Y+42, r1	; 0x2a
	int8_t par_h5  = 0;
    1b44:	1b a6       	std	Y+43, r1	; 0x2b
	int8_t par_h6  = 0;
    1b46:	1c a6       	std	Y+44, r1	; 0x2c
	int8_t par_h7  = 0;
    1b48:	1d a6       	std	Y+45, r1	; 0x2d
		
	cAdrWork = REG_HUM_MSB;
    1b4a:	85 e2       	ldi	r24, 0x25	; 37
    1b4c:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1b4e:	ce 01       	movw	r24, r28
    1b50:	8e 96       	adiw	r24, 0x2e	; 46
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	41 e0       	ldi	r20, 0x01	; 1
    1b56:	bc 01       	movw	r22, r24
    1b58:	86 e7       	ldi	r24, 0x76	; 118
    1b5a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    1b5e:	42 e0       	ldi	r20, 0x02	; 2
    1b60:	60 e2       	ldi	r22, 0x20	; 32
    1b62:	72 e0       	ldi	r23, 0x02	; 2
    1b64:	86 e7       	ldi	r24, 0x76	; 118
    1b66:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	hum_adc = (0xFF00 & (cRecieve[0] << 8)) | (0x00FF & (cRecieve[1]));
    1b6a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1b6e:	88 2f       	mov	r24, r24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	98 2f       	mov	r25, r24
    1b74:	88 27       	eor	r24, r24
    1b76:	9c 01       	movw	r18, r24
    1b78:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1b7c:	88 2f       	mov	r24, r24
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	82 2b       	or	r24, r18
    1b82:	93 2b       	or	r25, r19
    1b84:	cc 01       	movw	r24, r24
    1b86:	a0 e0       	ldi	r26, 0x00	; 0
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	89 a3       	std	Y+33, r24	; 0x21
    1b8c:	9a a3       	std	Y+34, r25	; 0x22
    1b8e:	ab a3       	std	Y+35, r26	; 0x23
    1b90:	bc a3       	std	Y+36, r27	; 0x24
	
	
	cAdrWork = 0xE2;
    1b92:	82 ee       	ldi	r24, 0xE2	; 226
    1b94:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1b96:	ce 01       	movw	r24, r28
    1b98:	8e 96       	adiw	r24, 0x2e	; 46
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	41 e0       	ldi	r20, 0x01	; 1
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	86 e7       	ldi	r24, 0x76	; 118
    1ba2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    1ba6:	42 e0       	ldi	r20, 0x02	; 2
    1ba8:	60 e2       	ldi	r22, 0x20	; 32
    1baa:	72 e0       	ldi	r23, 0x02	; 2
    1bac:	86 e7       	ldi	r24, 0x76	; 118
    1bae:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_h1 = (0x0FF0 & (cRecieve[1] << 4)) | (0x000F & (cRecieve[0]));
    1bb2:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1bb6:	88 2f       	mov	r24, r24
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	82 95       	swap	r24
    1bbc:	92 95       	swap	r25
    1bbe:	90 7f       	andi	r25, 0xF0	; 240
    1bc0:	98 27       	eor	r25, r24
    1bc2:	80 7f       	andi	r24, 0xF0	; 240
    1bc4:	98 27       	eor	r25, r24
    1bc6:	9c 01       	movw	r18, r24
    1bc8:	20 7f       	andi	r18, 0xF0	; 240
    1bca:	3f 70       	andi	r19, 0x0F	; 15
    1bcc:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1bd0:	88 2f       	mov	r24, r24
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	8f 70       	andi	r24, 0x0F	; 15
    1bd6:	99 27       	eor	r25, r25
    1bd8:	82 2b       	or	r24, r18
    1bda:	93 2b       	or	r25, r19
    1bdc:	9e a3       	std	Y+38, r25	; 0x26
    1bde:	8d a3       	std	Y+37, r24	; 0x25
	
	cAdrWork = 0xE1;
    1be0:	81 ee       	ldi	r24, 0xE1	; 225
    1be2:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1be4:	ce 01       	movw	r24, r28
    1be6:	8e 96       	adiw	r24, 0x2e	; 46
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	41 e0       	ldi	r20, 0x01	; 1
    1bec:	bc 01       	movw	r22, r24
    1bee:	86 e7       	ldi	r24, 0x76	; 118
    1bf0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    1bf4:	42 e0       	ldi	r20, 0x02	; 2
    1bf6:	60 e2       	ldi	r22, 0x20	; 32
    1bf8:	72 e0       	ldi	r23, 0x02	; 2
    1bfa:	86 e7       	ldi	r24, 0x76	; 118
    1bfc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_h2 = (0x0FF0 & (cRecieve[0] << 4)) | (0x000F & ((cRecieve[1] & 0xF0) >> 4));
    1c00:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1c04:	88 2f       	mov	r24, r24
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	82 95       	swap	r24
    1c0a:	92 95       	swap	r25
    1c0c:	90 7f       	andi	r25, 0xF0	; 240
    1c0e:	98 27       	eor	r25, r24
    1c10:	80 7f       	andi	r24, 0xF0	; 240
    1c12:	98 27       	eor	r25, r24
    1c14:	9c 01       	movw	r18, r24
    1c16:	20 7f       	andi	r18, 0xF0	; 240
    1c18:	3f 70       	andi	r19, 0x0F	; 15
    1c1a:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1c1e:	82 95       	swap	r24
    1c20:	8f 70       	andi	r24, 0x0F	; 15
    1c22:	88 2f       	mov	r24, r24
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	8f 70       	andi	r24, 0x0F	; 15
    1c28:	99 27       	eor	r25, r25
    1c2a:	82 2b       	or	r24, r18
    1c2c:	93 2b       	or	r25, r19
    1c2e:	98 a7       	std	Y+40, r25	; 0x28
    1c30:	8f a3       	std	Y+39, r24	; 0x27
	
	cAdrWork = 0xE4;
    1c32:	84 ee       	ldi	r24, 0xE4	; 228
    1c34:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1c36:	ce 01       	movw	r24, r28
    1c38:	8e 96       	adiw	r24, 0x2e	; 46
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	41 e0       	ldi	r20, 0x01	; 1
    1c3e:	bc 01       	movw	r22, r24
    1c40:	86 e7       	ldi	r24, 0x76	; 118
    1c42:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    1c46:	41 e0       	ldi	r20, 0x01	; 1
    1c48:	60 e2       	ldi	r22, 0x20	; 32
    1c4a:	72 e0       	ldi	r23, 0x02	; 2
    1c4c:	86 e7       	ldi	r24, 0x76	; 118
    1c4e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_h3 = cRecieve[0];
    1c52:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1c56:	89 a7       	std	Y+41, r24	; 0x29
	
	cAdrWork = 0xE5;
    1c58:	85 ee       	ldi	r24, 0xE5	; 229
    1c5a:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1c5c:	ce 01       	movw	r24, r28
    1c5e:	8e 96       	adiw	r24, 0x2e	; 46
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	41 e0       	ldi	r20, 0x01	; 1
    1c64:	bc 01       	movw	r22, r24
    1c66:	86 e7       	ldi	r24, 0x76	; 118
    1c68:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	60 e2       	ldi	r22, 0x20	; 32
    1c70:	72 e0       	ldi	r23, 0x02	; 2
    1c72:	86 e7       	ldi	r24, 0x76	; 118
    1c74:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_h4 = cRecieve[0];
    1c78:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1c7c:	8a a7       	std	Y+42, r24	; 0x2a
	
	cAdrWork = 0xE6;
    1c7e:	86 ee       	ldi	r24, 0xE6	; 230
    1c80:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1c82:	ce 01       	movw	r24, r28
    1c84:	8e 96       	adiw	r24, 0x2e	; 46
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	41 e0       	ldi	r20, 0x01	; 1
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	86 e7       	ldi	r24, 0x76	; 118
    1c8e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    1c92:	41 e0       	ldi	r20, 0x01	; 1
    1c94:	60 e2       	ldi	r22, 0x20	; 32
    1c96:	72 e0       	ldi	r23, 0x02	; 2
    1c98:	86 e7       	ldi	r24, 0x76	; 118
    1c9a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_h5 = cRecieve[0];
    1c9e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1ca2:	8b a7       	std	Y+43, r24	; 0x2b
	
	cAdrWork = 0xE7;
    1ca4:	87 ee       	ldi	r24, 0xE7	; 231
    1ca6:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1ca8:	ce 01       	movw	r24, r28
    1caa:	8e 96       	adiw	r24, 0x2e	; 46
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	41 e0       	ldi	r20, 0x01	; 1
    1cb0:	bc 01       	movw	r22, r24
    1cb2:	86 e7       	ldi	r24, 0x76	; 118
    1cb4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    1cb8:	41 e0       	ldi	r20, 0x01	; 1
    1cba:	60 e2       	ldi	r22, 0x20	; 32
    1cbc:	72 e0       	ldi	r23, 0x02	; 2
    1cbe:	86 e7       	ldi	r24, 0x76	; 118
    1cc0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_h6 = cRecieve[0];
    1cc4:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1cc8:	8c a7       	std	Y+44, r24	; 0x2c
	
	cAdrWork = 0xE4;
    1cca:	84 ee       	ldi	r24, 0xE4	; 228
    1ccc:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1cce:	ce 01       	movw	r24, r28
    1cd0:	8e 96       	adiw	r24, 0x2e	; 46
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	bc 01       	movw	r22, r24
    1cd8:	86 e7       	ldi	r24, 0x76	; 118
    1cda:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	60 e2       	ldi	r22, 0x20	; 32
    1ce2:	72 e0       	ldi	r23, 0x02	; 2
    1ce4:	86 e7       	ldi	r24, 0x76	; 118
    1ce6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_h7 = cRecieve[0];
    1cea:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1cee:	8d a7       	std	Y+45, r24	; 0x2d
		
	var1 = hum_adc - (((double)par_h1 * 16.0) + (((double)par_h3 / 2.0) * t_comp));
    1cf0:	69 a1       	ldd	r22, Y+33	; 0x21
    1cf2:	7a a1       	ldd	r23, Y+34	; 0x22
    1cf4:	8b a1       	ldd	r24, Y+35	; 0x23
    1cf6:	9c a1       	ldd	r25, Y+36	; 0x24
    1cf8:	3c d2       	rcall	.+1144   	; 0x2172 <__floatunsisf>
    1cfa:	6b 01       	movw	r12, r22
    1cfc:	7c 01       	movw	r14, r24
    1cfe:	8d a1       	ldd	r24, Y+37	; 0x25
    1d00:	9e a1       	ldd	r25, Y+38	; 0x26
    1d02:	cc 01       	movw	r24, r24
    1d04:	a0 e0       	ldi	r26, 0x00	; 0
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	bc 01       	movw	r22, r24
    1d0a:	cd 01       	movw	r24, r26
    1d0c:	32 d2       	rcall	.+1124   	; 0x2172 <__floatunsisf>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e8       	ldi	r20, 0x80	; 128
    1d18:	51 e4       	ldi	r21, 0x41	; 65
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	b7 d2       	rcall	.+1390   	; 0x228e <__mulsf3>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	4c 01       	movw	r8, r24
    1d26:	5d 01       	movw	r10, r26
    1d28:	89 a5       	ldd	r24, Y+41	; 0x29
    1d2a:	08 2e       	mov	r0, r24
    1d2c:	00 0c       	add	r0, r0
    1d2e:	99 0b       	sbc	r25, r25
    1d30:	aa 0b       	sbc	r26, r26
    1d32:	bb 0b       	sbc	r27, r27
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	1e d2       	rcall	.+1084   	; 0x2176 <__floatsisf>
    1d3a:	dc 01       	movw	r26, r24
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e0       	ldi	r20, 0x00	; 0
    1d44:	50 e4       	ldi	r21, 0x40	; 64
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	7a d1       	rcall	.+756    	; 0x2040 <__divsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	29 81       	ldd	r18, Y+1	; 0x01
    1d52:	3a 81       	ldd	r19, Y+2	; 0x02
    1d54:	4b 81       	ldd	r20, Y+3	; 0x03
    1d56:	5c 81       	ldd	r21, Y+4	; 0x04
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	98 d2       	rcall	.+1328   	; 0x228e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9c 01       	movw	r18, r24
    1d64:	ad 01       	movw	r20, r26
    1d66:	c5 01       	movw	r24, r10
    1d68:	b4 01       	movw	r22, r8
    1d6a:	06 d1       	rcall	.+524    	; 0x1f78 <__addsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	9c 01       	movw	r18, r24
    1d72:	ad 01       	movw	r20, r26
    1d74:	c7 01       	movw	r24, r14
    1d76:	b6 01       	movw	r22, r12
    1d78:	fe d0       	rcall	.+508    	; 0x1f76 <__subsf3>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	af 83       	std	Y+7, r26	; 0x07
    1d84:	b8 87       	std	Y+8, r27	; 0x08
	var2 = var1 * (((double)par_h2 / 262144.0) * (1.0 + (((double)par_h4 / 16384.0) * t_comp) + (((double)par_h5 / 1048576.0) * t_comp * t_comp)));
    1d86:	8f a1       	ldd	r24, Y+39	; 0x27
    1d88:	98 a5       	ldd	r25, Y+40	; 0x28
    1d8a:	cc 01       	movw	r24, r24
    1d8c:	a0 e0       	ldi	r26, 0x00	; 0
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	ee d1       	rcall	.+988    	; 0x2172 <__floatunsisf>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	58 e4       	ldi	r21, 0x48	; 72
    1da2:	bc 01       	movw	r22, r24
    1da4:	cd 01       	movw	r24, r26
    1da6:	4c d1       	rcall	.+664    	; 0x2040 <__divsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	6c 01       	movw	r12, r24
    1dae:	7d 01       	movw	r14, r26
    1db0:	8a a5       	ldd	r24, Y+42	; 0x2a
    1db2:	08 2e       	mov	r0, r24
    1db4:	00 0c       	add	r0, r0
    1db6:	99 0b       	sbc	r25, r25
    1db8:	aa 0b       	sbc	r26, r26
    1dba:	bb 0b       	sbc	r27, r27
    1dbc:	bc 01       	movw	r22, r24
    1dbe:	cd 01       	movw	r24, r26
    1dc0:	da d1       	rcall	.+948    	; 0x2176 <__floatsisf>
    1dc2:	dc 01       	movw	r26, r24
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	40 e8       	ldi	r20, 0x80	; 128
    1dcc:	56 e4       	ldi	r21, 0x46	; 70
    1dce:	bc 01       	movw	r22, r24
    1dd0:	cd 01       	movw	r24, r26
    1dd2:	36 d1       	rcall	.+620    	; 0x2040 <__divsf3>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	29 81       	ldd	r18, Y+1	; 0x01
    1dda:	3a 81       	ldd	r19, Y+2	; 0x02
    1ddc:	4b 81       	ldd	r20, Y+3	; 0x03
    1dde:	5c 81       	ldd	r21, Y+4	; 0x04
    1de0:	bc 01       	movw	r22, r24
    1de2:	cd 01       	movw	r24, r26
    1de4:	54 d2       	rcall	.+1192   	; 0x228e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e8       	ldi	r20, 0x80	; 128
    1df0:	5f e3       	ldi	r21, 0x3F	; 63
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	c0 d0       	rcall	.+384    	; 0x1f78 <__addsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	4c 01       	movw	r8, r24
    1dfe:	5d 01       	movw	r10, r26
    1e00:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e02:	08 2e       	mov	r0, r24
    1e04:	00 0c       	add	r0, r0
    1e06:	99 0b       	sbc	r25, r25
    1e08:	aa 0b       	sbc	r26, r26
    1e0a:	bb 0b       	sbc	r27, r27
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	cd 01       	movw	r24, r26
    1e10:	b2 d1       	rcall	.+868    	; 0x2176 <__floatsisf>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	40 e8       	ldi	r20, 0x80	; 128
    1e1c:	59 e4       	ldi	r21, 0x49	; 73
    1e1e:	bc 01       	movw	r22, r24
    1e20:	cd 01       	movw	r24, r26
    1e22:	0e d1       	rcall	.+540    	; 0x2040 <__divsf3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	29 81       	ldd	r18, Y+1	; 0x01
    1e2a:	3a 81       	ldd	r19, Y+2	; 0x02
    1e2c:	4b 81       	ldd	r20, Y+3	; 0x03
    1e2e:	5c 81       	ldd	r21, Y+4	; 0x04
    1e30:	bc 01       	movw	r22, r24
    1e32:	cd 01       	movw	r24, r26
    1e34:	2c d2       	rcall	.+1112   	; 0x228e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	29 81       	ldd	r18, Y+1	; 0x01
    1e3c:	3a 81       	ldd	r19, Y+2	; 0x02
    1e3e:	4b 81       	ldd	r20, Y+3	; 0x03
    1e40:	5c 81       	ldd	r21, Y+4	; 0x04
    1e42:	bc 01       	movw	r22, r24
    1e44:	cd 01       	movw	r24, r26
    1e46:	23 d2       	rcall	.+1094   	; 0x228e <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9c 01       	movw	r18, r24
    1e4e:	ad 01       	movw	r20, r26
    1e50:	c5 01       	movw	r24, r10
    1e52:	b4 01       	movw	r22, r8
    1e54:	91 d0       	rcall	.+290    	; 0x1f78 <__addsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	9c 01       	movw	r18, r24
    1e5c:	ad 01       	movw	r20, r26
    1e5e:	c7 01       	movw	r24, r14
    1e60:	b6 01       	movw	r22, r12
    1e62:	15 d2       	rcall	.+1066   	; 0x228e <__mulsf3>
    1e64:	dc 01       	movw	r26, r24
    1e66:	cb 01       	movw	r24, r22
    1e68:	2d 81       	ldd	r18, Y+5	; 0x05
    1e6a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e6c:	4f 81       	ldd	r20, Y+7	; 0x07
    1e6e:	58 85       	ldd	r21, Y+8	; 0x08
    1e70:	bc 01       	movw	r22, r24
    1e72:	cd 01       	movw	r24, r26
    1e74:	0c d2       	rcall	.+1048   	; 0x228e <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	89 87       	std	Y+9, r24	; 0x09
    1e7c:	9a 87       	std	Y+10, r25	; 0x0a
    1e7e:	ab 87       	std	Y+11, r26	; 0x0b
    1e80:	bc 87       	std	Y+12, r27	; 0x0c
	var3 = (double)par_h6 / 16384.0;
    1e82:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e84:	08 2e       	mov	r0, r24
    1e86:	00 0c       	add	r0, r0
    1e88:	99 0b       	sbc	r25, r25
    1e8a:	aa 0b       	sbc	r26, r26
    1e8c:	bb 0b       	sbc	r27, r27
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	71 d1       	rcall	.+738    	; 0x2176 <__floatsisf>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	56 e4       	ldi	r21, 0x46	; 70
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	cd 01       	movw	r24, r26
    1ea4:	cd d0       	rcall	.+410    	; 0x2040 <__divsf3>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	8d 87       	std	Y+13, r24	; 0x0d
    1eac:	9e 87       	std	Y+14, r25	; 0x0e
    1eae:	af 87       	std	Y+15, r26	; 0x0f
    1eb0:	b8 8b       	std	Y+16, r27	; 0x10

	var4 = (double)par_h7 / 2097152.0;
    1eb2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1eb4:	08 2e       	mov	r0, r24
    1eb6:	00 0c       	add	r0, r0
    1eb8:	99 0b       	sbc	r25, r25
    1eba:	aa 0b       	sbc	r26, r26
    1ebc:	bb 0b       	sbc	r27, r27
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	59 d1       	rcall	.+690    	; 0x2176 <__floatsisf>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e0       	ldi	r20, 0x00	; 0
    1ece:	5a e4       	ldi	r21, 0x4A	; 74
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	b5 d0       	rcall	.+362    	; 0x2040 <__divsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	89 8b       	std	Y+17, r24	; 0x11
    1edc:	9a 8b       	std	Y+18, r25	; 0x12
    1ede:	ab 8b       	std	Y+19, r26	; 0x13
    1ee0:	bc 8b       	std	Y+20, r27	; 0x14
	hum_comp = var2 +((var3 + (var4 * t_comp)) * var2 * var2);
    1ee2:	29 81       	ldd	r18, Y+1	; 0x01
    1ee4:	3a 81       	ldd	r19, Y+2	; 0x02
    1ee6:	4b 81       	ldd	r20, Y+3	; 0x03
    1ee8:	5c 81       	ldd	r21, Y+4	; 0x04
    1eea:	69 89       	ldd	r22, Y+17	; 0x11
    1eec:	7a 89       	ldd	r23, Y+18	; 0x12
    1eee:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef2:	cd d1       	rcall	.+922    	; 0x228e <__mulsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	2d 85       	ldd	r18, Y+13	; 0x0d
    1efa:	3e 85       	ldd	r19, Y+14	; 0x0e
    1efc:	4f 85       	ldd	r20, Y+15	; 0x0f
    1efe:	58 89       	ldd	r21, Y+16	; 0x10
    1f00:	bc 01       	movw	r22, r24
    1f02:	cd 01       	movw	r24, r26
    1f04:	39 d0       	rcall	.+114    	; 0x1f78 <__addsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	29 85       	ldd	r18, Y+9	; 0x09
    1f0c:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f0e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f10:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f12:	bc 01       	movw	r22, r24
    1f14:	cd 01       	movw	r24, r26
    1f16:	bb d1       	rcall	.+886    	; 0x228e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	29 85       	ldd	r18, Y+9	; 0x09
    1f1e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f20:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f22:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	b2 d1       	rcall	.+868    	; 0x228e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	29 85       	ldd	r18, Y+9	; 0x09
    1f30:	3a 85       	ldd	r19, Y+10	; 0x0a
    1f32:	4b 85       	ldd	r20, Y+11	; 0x0b
    1f34:	5c 85       	ldd	r21, Y+12	; 0x0c
    1f36:	bc 01       	movw	r22, r24
    1f38:	cd 01       	movw	r24, r26
    1f3a:	1e d0       	rcall	.+60     	; 0x1f78 <__addsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	8d 8f       	std	Y+29, r24	; 0x1d
    1f42:	9e 8f       	std	Y+30, r25	; 0x1e
    1f44:	af 8f       	std	Y+31, r26	; 0x1f
    1f46:	b8 a3       	std	Y+32, r27	; 0x20
    1f48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
	
	
	return hum_comp;
    1f4c:	af 8d       	ldd	r26, Y+31	; 0x1f
    1f4e:	b8 a1       	ldd	r27, Y+32	; 0x20
    1f50:	bc 01       	movw	r22, r24
    1f52:	cd 01       	movw	r24, r26
}
    1f54:	ae 96       	adiw	r28, 0x2e	; 46
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	ff 90       	pop	r15
    1f66:	ef 90       	pop	r14
    1f68:	df 90       	pop	r13
    1f6a:	cf 90       	pop	r12
    1f6c:	bf 90       	pop	r11
    1f6e:	af 90       	pop	r10
    1f70:	9f 90       	pop	r9
    1f72:	8f 90       	pop	r8
    1f74:	08 95       	ret

00001f76 <__subsf3>:
    1f76:	50 58       	subi	r21, 0x80	; 128

00001f78 <__addsf3>:
    1f78:	bb 27       	eor	r27, r27
    1f7a:	aa 27       	eor	r26, r26
    1f7c:	0e d0       	rcall	.+28     	; 0x1f9a <__addsf3x>
    1f7e:	4d c1       	rjmp	.+666    	; 0x221a <__fp_round>
    1f80:	3e d1       	rcall	.+636    	; 0x21fe <__fp_pscA>
    1f82:	30 f0       	brcs	.+12     	; 0x1f90 <__addsf3+0x18>
    1f84:	43 d1       	rcall	.+646    	; 0x220c <__fp_pscB>
    1f86:	20 f0       	brcs	.+8      	; 0x1f90 <__addsf3+0x18>
    1f88:	31 f4       	brne	.+12     	; 0x1f96 <__addsf3+0x1e>
    1f8a:	9f 3f       	cpi	r25, 0xFF	; 255
    1f8c:	11 f4       	brne	.+4      	; 0x1f92 <__addsf3+0x1a>
    1f8e:	1e f4       	brtc	.+6      	; 0x1f96 <__addsf3+0x1e>
    1f90:	33 c1       	rjmp	.+614    	; 0x21f8 <__fp_nan>
    1f92:	0e f4       	brtc	.+2      	; 0x1f96 <__addsf3+0x1e>
    1f94:	e0 95       	com	r30
    1f96:	e7 fb       	bst	r30, 7
    1f98:	29 c1       	rjmp	.+594    	; 0x21ec <__fp_inf>

00001f9a <__addsf3x>:
    1f9a:	e9 2f       	mov	r30, r25
    1f9c:	4f d1       	rcall	.+670    	; 0x223c <__fp_split3>
    1f9e:	80 f3       	brcs	.-32     	; 0x1f80 <__addsf3+0x8>
    1fa0:	ba 17       	cp	r27, r26
    1fa2:	62 07       	cpc	r22, r18
    1fa4:	73 07       	cpc	r23, r19
    1fa6:	84 07       	cpc	r24, r20
    1fa8:	95 07       	cpc	r25, r21
    1faa:	18 f0       	brcs	.+6      	; 0x1fb2 <__addsf3x+0x18>
    1fac:	71 f4       	brne	.+28     	; 0x1fca <__addsf3x+0x30>
    1fae:	9e f5       	brtc	.+102    	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
    1fb0:	67 c1       	rjmp	.+718    	; 0x2280 <__fp_zero>
    1fb2:	0e f4       	brtc	.+2      	; 0x1fb6 <__addsf3x+0x1c>
    1fb4:	e0 95       	com	r30
    1fb6:	0b 2e       	mov	r0, r27
    1fb8:	ba 2f       	mov	r27, r26
    1fba:	a0 2d       	mov	r26, r0
    1fbc:	0b 01       	movw	r0, r22
    1fbe:	b9 01       	movw	r22, r18
    1fc0:	90 01       	movw	r18, r0
    1fc2:	0c 01       	movw	r0, r24
    1fc4:	ca 01       	movw	r24, r20
    1fc6:	a0 01       	movw	r20, r0
    1fc8:	11 24       	eor	r1, r1
    1fca:	ff 27       	eor	r31, r31
    1fcc:	59 1b       	sub	r21, r25
    1fce:	99 f0       	breq	.+38     	; 0x1ff6 <__addsf3x+0x5c>
    1fd0:	59 3f       	cpi	r21, 0xF9	; 249
    1fd2:	50 f4       	brcc	.+20     	; 0x1fe8 <__addsf3x+0x4e>
    1fd4:	50 3e       	cpi	r21, 0xE0	; 224
    1fd6:	68 f1       	brcs	.+90     	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    1fd8:	1a 16       	cp	r1, r26
    1fda:	f0 40       	sbci	r31, 0x00	; 0
    1fdc:	a2 2f       	mov	r26, r18
    1fde:	23 2f       	mov	r18, r19
    1fe0:	34 2f       	mov	r19, r20
    1fe2:	44 27       	eor	r20, r20
    1fe4:	58 5f       	subi	r21, 0xF8	; 248
    1fe6:	f3 cf       	rjmp	.-26     	; 0x1fce <__addsf3x+0x34>
    1fe8:	46 95       	lsr	r20
    1fea:	37 95       	ror	r19
    1fec:	27 95       	ror	r18
    1fee:	a7 95       	ror	r26
    1ff0:	f0 40       	sbci	r31, 0x00	; 0
    1ff2:	53 95       	inc	r21
    1ff4:	c9 f7       	brne	.-14     	; 0x1fe8 <__addsf3x+0x4e>
    1ff6:	7e f4       	brtc	.+30     	; 0x2016 <__DATA_REGION_LENGTH__+0x16>
    1ff8:	1f 16       	cp	r1, r31
    1ffa:	ba 0b       	sbc	r27, r26
    1ffc:	62 0b       	sbc	r22, r18
    1ffe:	73 0b       	sbc	r23, r19
    2000:	84 0b       	sbc	r24, r20
    2002:	ba f0       	brmi	.+46     	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    2004:	91 50       	subi	r25, 0x01	; 1
    2006:	a1 f0       	breq	.+40     	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
    2008:	ff 0f       	add	r31, r31
    200a:	bb 1f       	adc	r27, r27
    200c:	66 1f       	adc	r22, r22
    200e:	77 1f       	adc	r23, r23
    2010:	88 1f       	adc	r24, r24
    2012:	c2 f7       	brpl	.-16     	; 0x2004 <__DATA_REGION_LENGTH__+0x4>
    2014:	0e c0       	rjmp	.+28     	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    2016:	ba 0f       	add	r27, r26
    2018:	62 1f       	adc	r22, r18
    201a:	73 1f       	adc	r23, r19
    201c:	84 1f       	adc	r24, r20
    201e:	48 f4       	brcc	.+18     	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    2020:	87 95       	ror	r24
    2022:	77 95       	ror	r23
    2024:	67 95       	ror	r22
    2026:	b7 95       	ror	r27
    2028:	f7 95       	ror	r31
    202a:	9e 3f       	cpi	r25, 0xFE	; 254
    202c:	08 f0       	brcs	.+2      	; 0x2030 <__DATA_REGION_LENGTH__+0x30>
    202e:	b3 cf       	rjmp	.-154    	; 0x1f96 <__addsf3+0x1e>
    2030:	93 95       	inc	r25
    2032:	88 0f       	add	r24, r24
    2034:	08 f0       	brcs	.+2      	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    2036:	99 27       	eor	r25, r25
    2038:	ee 0f       	add	r30, r30
    203a:	97 95       	ror	r25
    203c:	87 95       	ror	r24
    203e:	08 95       	ret

00002040 <__divsf3>:
    2040:	0c d0       	rcall	.+24     	; 0x205a <__divsf3x>
    2042:	eb c0       	rjmp	.+470    	; 0x221a <__fp_round>
    2044:	e3 d0       	rcall	.+454    	; 0x220c <__fp_pscB>
    2046:	40 f0       	brcs	.+16     	; 0x2058 <__divsf3+0x18>
    2048:	da d0       	rcall	.+436    	; 0x21fe <__fp_pscA>
    204a:	30 f0       	brcs	.+12     	; 0x2058 <__divsf3+0x18>
    204c:	21 f4       	brne	.+8      	; 0x2056 <__divsf3+0x16>
    204e:	5f 3f       	cpi	r21, 0xFF	; 255
    2050:	19 f0       	breq	.+6      	; 0x2058 <__divsf3+0x18>
    2052:	cc c0       	rjmp	.+408    	; 0x21ec <__fp_inf>
    2054:	51 11       	cpse	r21, r1
    2056:	15 c1       	rjmp	.+554    	; 0x2282 <__fp_szero>
    2058:	cf c0       	rjmp	.+414    	; 0x21f8 <__fp_nan>

0000205a <__divsf3x>:
    205a:	f0 d0       	rcall	.+480    	; 0x223c <__fp_split3>
    205c:	98 f3       	brcs	.-26     	; 0x2044 <__divsf3+0x4>

0000205e <__divsf3_pse>:
    205e:	99 23       	and	r25, r25
    2060:	c9 f3       	breq	.-14     	; 0x2054 <__divsf3+0x14>
    2062:	55 23       	and	r21, r21
    2064:	b1 f3       	breq	.-20     	; 0x2052 <__divsf3+0x12>
    2066:	95 1b       	sub	r25, r21
    2068:	55 0b       	sbc	r21, r21
    206a:	bb 27       	eor	r27, r27
    206c:	aa 27       	eor	r26, r26
    206e:	62 17       	cp	r22, r18
    2070:	73 07       	cpc	r23, r19
    2072:	84 07       	cpc	r24, r20
    2074:	38 f0       	brcs	.+14     	; 0x2084 <__divsf3_pse+0x26>
    2076:	9f 5f       	subi	r25, 0xFF	; 255
    2078:	5f 4f       	sbci	r21, 0xFF	; 255
    207a:	22 0f       	add	r18, r18
    207c:	33 1f       	adc	r19, r19
    207e:	44 1f       	adc	r20, r20
    2080:	aa 1f       	adc	r26, r26
    2082:	a9 f3       	breq	.-22     	; 0x206e <__divsf3_pse+0x10>
    2084:	33 d0       	rcall	.+102    	; 0x20ec <__divsf3_pse+0x8e>
    2086:	0e 2e       	mov	r0, r30
    2088:	3a f0       	brmi	.+14     	; 0x2098 <__divsf3_pse+0x3a>
    208a:	e0 e8       	ldi	r30, 0x80	; 128
    208c:	30 d0       	rcall	.+96     	; 0x20ee <__divsf3_pse+0x90>
    208e:	91 50       	subi	r25, 0x01	; 1
    2090:	50 40       	sbci	r21, 0x00	; 0
    2092:	e6 95       	lsr	r30
    2094:	00 1c       	adc	r0, r0
    2096:	ca f7       	brpl	.-14     	; 0x208a <__divsf3_pse+0x2c>
    2098:	29 d0       	rcall	.+82     	; 0x20ec <__divsf3_pse+0x8e>
    209a:	fe 2f       	mov	r31, r30
    209c:	27 d0       	rcall	.+78     	; 0x20ec <__divsf3_pse+0x8e>
    209e:	66 0f       	add	r22, r22
    20a0:	77 1f       	adc	r23, r23
    20a2:	88 1f       	adc	r24, r24
    20a4:	bb 1f       	adc	r27, r27
    20a6:	26 17       	cp	r18, r22
    20a8:	37 07       	cpc	r19, r23
    20aa:	48 07       	cpc	r20, r24
    20ac:	ab 07       	cpc	r26, r27
    20ae:	b0 e8       	ldi	r27, 0x80	; 128
    20b0:	09 f0       	breq	.+2      	; 0x20b4 <__divsf3_pse+0x56>
    20b2:	bb 0b       	sbc	r27, r27
    20b4:	80 2d       	mov	r24, r0
    20b6:	bf 01       	movw	r22, r30
    20b8:	ff 27       	eor	r31, r31
    20ba:	93 58       	subi	r25, 0x83	; 131
    20bc:	5f 4f       	sbci	r21, 0xFF	; 255
    20be:	2a f0       	brmi	.+10     	; 0x20ca <__divsf3_pse+0x6c>
    20c0:	9e 3f       	cpi	r25, 0xFE	; 254
    20c2:	51 05       	cpc	r21, r1
    20c4:	68 f0       	brcs	.+26     	; 0x20e0 <__divsf3_pse+0x82>
    20c6:	92 c0       	rjmp	.+292    	; 0x21ec <__fp_inf>
    20c8:	dc c0       	rjmp	.+440    	; 0x2282 <__fp_szero>
    20ca:	5f 3f       	cpi	r21, 0xFF	; 255
    20cc:	ec f3       	brlt	.-6      	; 0x20c8 <__divsf3_pse+0x6a>
    20ce:	98 3e       	cpi	r25, 0xE8	; 232
    20d0:	dc f3       	brlt	.-10     	; 0x20c8 <__divsf3_pse+0x6a>
    20d2:	86 95       	lsr	r24
    20d4:	77 95       	ror	r23
    20d6:	67 95       	ror	r22
    20d8:	b7 95       	ror	r27
    20da:	f7 95       	ror	r31
    20dc:	9f 5f       	subi	r25, 0xFF	; 255
    20de:	c9 f7       	brne	.-14     	; 0x20d2 <__divsf3_pse+0x74>
    20e0:	88 0f       	add	r24, r24
    20e2:	91 1d       	adc	r25, r1
    20e4:	96 95       	lsr	r25
    20e6:	87 95       	ror	r24
    20e8:	97 f9       	bld	r25, 7
    20ea:	08 95       	ret
    20ec:	e1 e0       	ldi	r30, 0x01	; 1
    20ee:	66 0f       	add	r22, r22
    20f0:	77 1f       	adc	r23, r23
    20f2:	88 1f       	adc	r24, r24
    20f4:	bb 1f       	adc	r27, r27
    20f6:	62 17       	cp	r22, r18
    20f8:	73 07       	cpc	r23, r19
    20fa:	84 07       	cpc	r24, r20
    20fc:	ba 07       	cpc	r27, r26
    20fe:	20 f0       	brcs	.+8      	; 0x2108 <__divsf3_pse+0xaa>
    2100:	62 1b       	sub	r22, r18
    2102:	73 0b       	sbc	r23, r19
    2104:	84 0b       	sbc	r24, r20
    2106:	ba 0b       	sbc	r27, r26
    2108:	ee 1f       	adc	r30, r30
    210a:	88 f7       	brcc	.-30     	; 0x20ee <__divsf3_pse+0x90>
    210c:	e0 95       	com	r30
    210e:	08 95       	ret

00002110 <__fixsfsi>:
    2110:	04 d0       	rcall	.+8      	; 0x211a <__fixunssfsi>
    2112:	68 94       	set
    2114:	b1 11       	cpse	r27, r1
    2116:	b5 c0       	rjmp	.+362    	; 0x2282 <__fp_szero>
    2118:	08 95       	ret

0000211a <__fixunssfsi>:
    211a:	98 d0       	rcall	.+304    	; 0x224c <__fp_splitA>
    211c:	88 f0       	brcs	.+34     	; 0x2140 <__fixunssfsi+0x26>
    211e:	9f 57       	subi	r25, 0x7F	; 127
    2120:	90 f0       	brcs	.+36     	; 0x2146 <__fixunssfsi+0x2c>
    2122:	b9 2f       	mov	r27, r25
    2124:	99 27       	eor	r25, r25
    2126:	b7 51       	subi	r27, 0x17	; 23
    2128:	a0 f0       	brcs	.+40     	; 0x2152 <__fixunssfsi+0x38>
    212a:	d1 f0       	breq	.+52     	; 0x2160 <__fixunssfsi+0x46>
    212c:	66 0f       	add	r22, r22
    212e:	77 1f       	adc	r23, r23
    2130:	88 1f       	adc	r24, r24
    2132:	99 1f       	adc	r25, r25
    2134:	1a f0       	brmi	.+6      	; 0x213c <__fixunssfsi+0x22>
    2136:	ba 95       	dec	r27
    2138:	c9 f7       	brne	.-14     	; 0x212c <__fixunssfsi+0x12>
    213a:	12 c0       	rjmp	.+36     	; 0x2160 <__fixunssfsi+0x46>
    213c:	b1 30       	cpi	r27, 0x01	; 1
    213e:	81 f0       	breq	.+32     	; 0x2160 <__fixunssfsi+0x46>
    2140:	9f d0       	rcall	.+318    	; 0x2280 <__fp_zero>
    2142:	b1 e0       	ldi	r27, 0x01	; 1
    2144:	08 95       	ret
    2146:	9c c0       	rjmp	.+312    	; 0x2280 <__fp_zero>
    2148:	67 2f       	mov	r22, r23
    214a:	78 2f       	mov	r23, r24
    214c:	88 27       	eor	r24, r24
    214e:	b8 5f       	subi	r27, 0xF8	; 248
    2150:	39 f0       	breq	.+14     	; 0x2160 <__fixunssfsi+0x46>
    2152:	b9 3f       	cpi	r27, 0xF9	; 249
    2154:	cc f3       	brlt	.-14     	; 0x2148 <__fixunssfsi+0x2e>
    2156:	86 95       	lsr	r24
    2158:	77 95       	ror	r23
    215a:	67 95       	ror	r22
    215c:	b3 95       	inc	r27
    215e:	d9 f7       	brne	.-10     	; 0x2156 <__fixunssfsi+0x3c>
    2160:	3e f4       	brtc	.+14     	; 0x2170 <__fixunssfsi+0x56>
    2162:	90 95       	com	r25
    2164:	80 95       	com	r24
    2166:	70 95       	com	r23
    2168:	61 95       	neg	r22
    216a:	7f 4f       	sbci	r23, 0xFF	; 255
    216c:	8f 4f       	sbci	r24, 0xFF	; 255
    216e:	9f 4f       	sbci	r25, 0xFF	; 255
    2170:	08 95       	ret

00002172 <__floatunsisf>:
    2172:	e8 94       	clt
    2174:	09 c0       	rjmp	.+18     	; 0x2188 <__floatsisf+0x12>

00002176 <__floatsisf>:
    2176:	97 fb       	bst	r25, 7
    2178:	3e f4       	brtc	.+14     	; 0x2188 <__floatsisf+0x12>
    217a:	90 95       	com	r25
    217c:	80 95       	com	r24
    217e:	70 95       	com	r23
    2180:	61 95       	neg	r22
    2182:	7f 4f       	sbci	r23, 0xFF	; 255
    2184:	8f 4f       	sbci	r24, 0xFF	; 255
    2186:	9f 4f       	sbci	r25, 0xFF	; 255
    2188:	99 23       	and	r25, r25
    218a:	a9 f0       	breq	.+42     	; 0x21b6 <__floatsisf+0x40>
    218c:	f9 2f       	mov	r31, r25
    218e:	96 e9       	ldi	r25, 0x96	; 150
    2190:	bb 27       	eor	r27, r27
    2192:	93 95       	inc	r25
    2194:	f6 95       	lsr	r31
    2196:	87 95       	ror	r24
    2198:	77 95       	ror	r23
    219a:	67 95       	ror	r22
    219c:	b7 95       	ror	r27
    219e:	f1 11       	cpse	r31, r1
    21a0:	f8 cf       	rjmp	.-16     	; 0x2192 <__floatsisf+0x1c>
    21a2:	fa f4       	brpl	.+62     	; 0x21e2 <__floatsisf+0x6c>
    21a4:	bb 0f       	add	r27, r27
    21a6:	11 f4       	brne	.+4      	; 0x21ac <__floatsisf+0x36>
    21a8:	60 ff       	sbrs	r22, 0
    21aa:	1b c0       	rjmp	.+54     	; 0x21e2 <__floatsisf+0x6c>
    21ac:	6f 5f       	subi	r22, 0xFF	; 255
    21ae:	7f 4f       	sbci	r23, 0xFF	; 255
    21b0:	8f 4f       	sbci	r24, 0xFF	; 255
    21b2:	9f 4f       	sbci	r25, 0xFF	; 255
    21b4:	16 c0       	rjmp	.+44     	; 0x21e2 <__floatsisf+0x6c>
    21b6:	88 23       	and	r24, r24
    21b8:	11 f0       	breq	.+4      	; 0x21be <__floatsisf+0x48>
    21ba:	96 e9       	ldi	r25, 0x96	; 150
    21bc:	11 c0       	rjmp	.+34     	; 0x21e0 <__floatsisf+0x6a>
    21be:	77 23       	and	r23, r23
    21c0:	21 f0       	breq	.+8      	; 0x21ca <__floatsisf+0x54>
    21c2:	9e e8       	ldi	r25, 0x8E	; 142
    21c4:	87 2f       	mov	r24, r23
    21c6:	76 2f       	mov	r23, r22
    21c8:	05 c0       	rjmp	.+10     	; 0x21d4 <__floatsisf+0x5e>
    21ca:	66 23       	and	r22, r22
    21cc:	71 f0       	breq	.+28     	; 0x21ea <__floatsisf+0x74>
    21ce:	96 e8       	ldi	r25, 0x86	; 134
    21d0:	86 2f       	mov	r24, r22
    21d2:	70 e0       	ldi	r23, 0x00	; 0
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	2a f0       	brmi	.+10     	; 0x21e2 <__floatsisf+0x6c>
    21d8:	9a 95       	dec	r25
    21da:	66 0f       	add	r22, r22
    21dc:	77 1f       	adc	r23, r23
    21de:	88 1f       	adc	r24, r24
    21e0:	da f7       	brpl	.-10     	; 0x21d8 <__floatsisf+0x62>
    21e2:	88 0f       	add	r24, r24
    21e4:	96 95       	lsr	r25
    21e6:	87 95       	ror	r24
    21e8:	97 f9       	bld	r25, 7
    21ea:	08 95       	ret

000021ec <__fp_inf>:
    21ec:	97 f9       	bld	r25, 7
    21ee:	9f 67       	ori	r25, 0x7F	; 127
    21f0:	80 e8       	ldi	r24, 0x80	; 128
    21f2:	70 e0       	ldi	r23, 0x00	; 0
    21f4:	60 e0       	ldi	r22, 0x00	; 0
    21f6:	08 95       	ret

000021f8 <__fp_nan>:
    21f8:	9f ef       	ldi	r25, 0xFF	; 255
    21fa:	80 ec       	ldi	r24, 0xC0	; 192
    21fc:	08 95       	ret

000021fe <__fp_pscA>:
    21fe:	00 24       	eor	r0, r0
    2200:	0a 94       	dec	r0
    2202:	16 16       	cp	r1, r22
    2204:	17 06       	cpc	r1, r23
    2206:	18 06       	cpc	r1, r24
    2208:	09 06       	cpc	r0, r25
    220a:	08 95       	ret

0000220c <__fp_pscB>:
    220c:	00 24       	eor	r0, r0
    220e:	0a 94       	dec	r0
    2210:	12 16       	cp	r1, r18
    2212:	13 06       	cpc	r1, r19
    2214:	14 06       	cpc	r1, r20
    2216:	05 06       	cpc	r0, r21
    2218:	08 95       	ret

0000221a <__fp_round>:
    221a:	09 2e       	mov	r0, r25
    221c:	03 94       	inc	r0
    221e:	00 0c       	add	r0, r0
    2220:	11 f4       	brne	.+4      	; 0x2226 <__fp_round+0xc>
    2222:	88 23       	and	r24, r24
    2224:	52 f0       	brmi	.+20     	; 0x223a <__fp_round+0x20>
    2226:	bb 0f       	add	r27, r27
    2228:	40 f4       	brcc	.+16     	; 0x223a <__fp_round+0x20>
    222a:	bf 2b       	or	r27, r31
    222c:	11 f4       	brne	.+4      	; 0x2232 <__fp_round+0x18>
    222e:	60 ff       	sbrs	r22, 0
    2230:	04 c0       	rjmp	.+8      	; 0x223a <__fp_round+0x20>
    2232:	6f 5f       	subi	r22, 0xFF	; 255
    2234:	7f 4f       	sbci	r23, 0xFF	; 255
    2236:	8f 4f       	sbci	r24, 0xFF	; 255
    2238:	9f 4f       	sbci	r25, 0xFF	; 255
    223a:	08 95       	ret

0000223c <__fp_split3>:
    223c:	57 fd       	sbrc	r21, 7
    223e:	90 58       	subi	r25, 0x80	; 128
    2240:	44 0f       	add	r20, r20
    2242:	55 1f       	adc	r21, r21
    2244:	59 f0       	breq	.+22     	; 0x225c <__fp_splitA+0x10>
    2246:	5f 3f       	cpi	r21, 0xFF	; 255
    2248:	71 f0       	breq	.+28     	; 0x2266 <__fp_splitA+0x1a>
    224a:	47 95       	ror	r20

0000224c <__fp_splitA>:
    224c:	88 0f       	add	r24, r24
    224e:	97 fb       	bst	r25, 7
    2250:	99 1f       	adc	r25, r25
    2252:	61 f0       	breq	.+24     	; 0x226c <__fp_splitA+0x20>
    2254:	9f 3f       	cpi	r25, 0xFF	; 255
    2256:	79 f0       	breq	.+30     	; 0x2276 <__fp_splitA+0x2a>
    2258:	87 95       	ror	r24
    225a:	08 95       	ret
    225c:	12 16       	cp	r1, r18
    225e:	13 06       	cpc	r1, r19
    2260:	14 06       	cpc	r1, r20
    2262:	55 1f       	adc	r21, r21
    2264:	f2 cf       	rjmp	.-28     	; 0x224a <__fp_split3+0xe>
    2266:	46 95       	lsr	r20
    2268:	f1 df       	rcall	.-30     	; 0x224c <__fp_splitA>
    226a:	08 c0       	rjmp	.+16     	; 0x227c <__fp_splitA+0x30>
    226c:	16 16       	cp	r1, r22
    226e:	17 06       	cpc	r1, r23
    2270:	18 06       	cpc	r1, r24
    2272:	99 1f       	adc	r25, r25
    2274:	f1 cf       	rjmp	.-30     	; 0x2258 <__fp_splitA+0xc>
    2276:	86 95       	lsr	r24
    2278:	71 05       	cpc	r23, r1
    227a:	61 05       	cpc	r22, r1
    227c:	08 94       	sec
    227e:	08 95       	ret

00002280 <__fp_zero>:
    2280:	e8 94       	clt

00002282 <__fp_szero>:
    2282:	bb 27       	eor	r27, r27
    2284:	66 27       	eor	r22, r22
    2286:	77 27       	eor	r23, r23
    2288:	cb 01       	movw	r24, r22
    228a:	97 f9       	bld	r25, 7
    228c:	08 95       	ret

0000228e <__mulsf3>:
    228e:	0b d0       	rcall	.+22     	; 0x22a6 <__mulsf3x>
    2290:	c4 cf       	rjmp	.-120    	; 0x221a <__fp_round>
    2292:	b5 df       	rcall	.-150    	; 0x21fe <__fp_pscA>
    2294:	28 f0       	brcs	.+10     	; 0x22a0 <__mulsf3+0x12>
    2296:	ba df       	rcall	.-140    	; 0x220c <__fp_pscB>
    2298:	18 f0       	brcs	.+6      	; 0x22a0 <__mulsf3+0x12>
    229a:	95 23       	and	r25, r21
    229c:	09 f0       	breq	.+2      	; 0x22a0 <__mulsf3+0x12>
    229e:	a6 cf       	rjmp	.-180    	; 0x21ec <__fp_inf>
    22a0:	ab cf       	rjmp	.-170    	; 0x21f8 <__fp_nan>
    22a2:	11 24       	eor	r1, r1
    22a4:	ee cf       	rjmp	.-36     	; 0x2282 <__fp_szero>

000022a6 <__mulsf3x>:
    22a6:	ca df       	rcall	.-108    	; 0x223c <__fp_split3>
    22a8:	a0 f3       	brcs	.-24     	; 0x2292 <__mulsf3+0x4>

000022aa <__mulsf3_pse>:
    22aa:	95 9f       	mul	r25, r21
    22ac:	d1 f3       	breq	.-12     	; 0x22a2 <__mulsf3+0x14>
    22ae:	95 0f       	add	r25, r21
    22b0:	50 e0       	ldi	r21, 0x00	; 0
    22b2:	55 1f       	adc	r21, r21
    22b4:	62 9f       	mul	r22, r18
    22b6:	f0 01       	movw	r30, r0
    22b8:	72 9f       	mul	r23, r18
    22ba:	bb 27       	eor	r27, r27
    22bc:	f0 0d       	add	r31, r0
    22be:	b1 1d       	adc	r27, r1
    22c0:	63 9f       	mul	r22, r19
    22c2:	aa 27       	eor	r26, r26
    22c4:	f0 0d       	add	r31, r0
    22c6:	b1 1d       	adc	r27, r1
    22c8:	aa 1f       	adc	r26, r26
    22ca:	64 9f       	mul	r22, r20
    22cc:	66 27       	eor	r22, r22
    22ce:	b0 0d       	add	r27, r0
    22d0:	a1 1d       	adc	r26, r1
    22d2:	66 1f       	adc	r22, r22
    22d4:	82 9f       	mul	r24, r18
    22d6:	22 27       	eor	r18, r18
    22d8:	b0 0d       	add	r27, r0
    22da:	a1 1d       	adc	r26, r1
    22dc:	62 1f       	adc	r22, r18
    22de:	73 9f       	mul	r23, r19
    22e0:	b0 0d       	add	r27, r0
    22e2:	a1 1d       	adc	r26, r1
    22e4:	62 1f       	adc	r22, r18
    22e6:	83 9f       	mul	r24, r19
    22e8:	a0 0d       	add	r26, r0
    22ea:	61 1d       	adc	r22, r1
    22ec:	22 1f       	adc	r18, r18
    22ee:	74 9f       	mul	r23, r20
    22f0:	33 27       	eor	r19, r19
    22f2:	a0 0d       	add	r26, r0
    22f4:	61 1d       	adc	r22, r1
    22f6:	23 1f       	adc	r18, r19
    22f8:	84 9f       	mul	r24, r20
    22fa:	60 0d       	add	r22, r0
    22fc:	21 1d       	adc	r18, r1
    22fe:	82 2f       	mov	r24, r18
    2300:	76 2f       	mov	r23, r22
    2302:	6a 2f       	mov	r22, r26
    2304:	11 24       	eor	r1, r1
    2306:	9f 57       	subi	r25, 0x7F	; 127
    2308:	50 40       	sbci	r21, 0x00	; 0
    230a:	8a f0       	brmi	.+34     	; 0x232e <__mulsf3_pse+0x84>
    230c:	e1 f0       	breq	.+56     	; 0x2346 <__mulsf3_pse+0x9c>
    230e:	88 23       	and	r24, r24
    2310:	4a f0       	brmi	.+18     	; 0x2324 <__mulsf3_pse+0x7a>
    2312:	ee 0f       	add	r30, r30
    2314:	ff 1f       	adc	r31, r31
    2316:	bb 1f       	adc	r27, r27
    2318:	66 1f       	adc	r22, r22
    231a:	77 1f       	adc	r23, r23
    231c:	88 1f       	adc	r24, r24
    231e:	91 50       	subi	r25, 0x01	; 1
    2320:	50 40       	sbci	r21, 0x00	; 0
    2322:	a9 f7       	brne	.-22     	; 0x230e <__mulsf3_pse+0x64>
    2324:	9e 3f       	cpi	r25, 0xFE	; 254
    2326:	51 05       	cpc	r21, r1
    2328:	70 f0       	brcs	.+28     	; 0x2346 <__mulsf3_pse+0x9c>
    232a:	60 cf       	rjmp	.-320    	; 0x21ec <__fp_inf>
    232c:	aa cf       	rjmp	.-172    	; 0x2282 <__fp_szero>
    232e:	5f 3f       	cpi	r21, 0xFF	; 255
    2330:	ec f3       	brlt	.-6      	; 0x232c <__mulsf3_pse+0x82>
    2332:	98 3e       	cpi	r25, 0xE8	; 232
    2334:	dc f3       	brlt	.-10     	; 0x232c <__mulsf3_pse+0x82>
    2336:	86 95       	lsr	r24
    2338:	77 95       	ror	r23
    233a:	67 95       	ror	r22
    233c:	b7 95       	ror	r27
    233e:	f7 95       	ror	r31
    2340:	e7 95       	ror	r30
    2342:	9f 5f       	subi	r25, 0xFF	; 255
    2344:	c1 f7       	brne	.-16     	; 0x2336 <__mulsf3_pse+0x8c>
    2346:	fe 2b       	or	r31, r30
    2348:	88 0f       	add	r24, r24
    234a:	91 1d       	adc	r25, r1
    234c:	96 95       	lsr	r25
    234e:	87 95       	ror	r24
    2350:	97 f9       	bld	r25, 7
    2352:	08 95       	ret

00002354 <__tablejump2__>:
    2354:	ee 0f       	add	r30, r30
    2356:	ff 1f       	adc	r31, r31
    2358:	88 1f       	adc	r24, r24
    235a:	8b bf       	out	0x3b, r24	; 59
    235c:	07 90       	elpm	r0, Z+
    235e:	f6 91       	elpm	r31, Z
    2360:	e0 2d       	mov	r30, r0
    2362:	19 94       	eijmp

00002364 <_exit>:
    2364:	f8 94       	cli

00002366 <__stop_program>:
    2366:	ff cf       	rjmp	.-2      	; 0x2366 <__stop_program>
