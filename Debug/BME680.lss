
BME680.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00002606  0000269a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002606  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800220  00800220  000026ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000026ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  0000272c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001be2  00000000  00000000  00002854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000deb  00000000  00000000  00004436  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000168c  00000000  00000000  00005221  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000046c  00000000  00000000  000068b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000acf  00000000  00000000  00006d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000969  00000000  00000000  000077eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00008154  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	70 c0       	rjmp	.+224    	; 0xe2 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	33 02       	muls	r19, r19
      ce:	39 02       	muls	r19, r25
      d0:	3f 02       	muls	r19, r31
      d2:	45 02       	muls	r20, r21
      d4:	4b 02       	muls	r20, r27
      d6:	51 02       	muls	r21, r17
      d8:	57 02       	muls	r21, r23
      da:	5d 02       	muls	r21, r29
      dc:	63 02       	muls	r22, r19
      de:	69 02       	muls	r22, r25
      e0:	6e 02       	muls	r22, r30

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf ef       	ldi	r28, 0xFF	; 255
      e8:	d1 e2       	ldi	r29, 0x21	; 33
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0c bf       	out	0x3c, r16	; 60

000000f2 <__do_copy_data>:
      f2:	12 e0       	ldi	r17, 0x02	; 2
      f4:	a0 e0       	ldi	r26, 0x00	; 0
      f6:	b2 e0       	ldi	r27, 0x02	; 2
      f8:	e6 e0       	ldi	r30, 0x06	; 6
      fa:	f6 e2       	ldi	r31, 0x26	; 38
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0b bf       	out	0x3b, r16	; 59
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x14>
     102:	07 90       	elpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a0 32       	cpi	r26, 0x20	; 32
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0x10>

0000010c <__do_clear_bss>:
     10c:	22 e0       	ldi	r18, 0x02	; 2
     10e:	a0 e2       	ldi	r26, 0x20	; 32
     110:	b2 e0       	ldi	r27, 0x02	; 2
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a5 32       	cpi	r26, 0x25	; 37
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	a1 d2       	rcall	.+1346   	; 0x660 <main>
     11e:	0c 94 01 13 	jmp	0x2602	; 0x2602 <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <USART0Init>:
	UBRR1H = (uiUbrr >> 8);		// Baudrate High Register setzen
	UBRR1L = uiUbrr;			// Baudrate Low Register  setzen
	UCSR1A = INIT_UCSR1A;		// UCSRA0 setzen
	UCSR1C = INIT_UCSR1C;		// UCSRC0 setzen
	UCSR1B = INIT_UCSR1B;		// UCSRB0 setzen
}
     124:	cf 93       	push	r28
     126:	df 93       	push	r29
     128:	1f 92       	push	r1
     12a:	1f 92       	push	r1
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
     130:	9a 83       	std	Y+2, r25	; 0x02
     132:	89 83       	std	Y+1, r24	; 0x01
     134:	84 e6       	ldi	r24, 0x64	; 100
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	24 e6       	ldi	r18, 0x64	; 100
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	f9 01       	movw	r30, r18
     13e:	20 81       	ld	r18, Z
     140:	21 70       	andi	r18, 0x01	; 1
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
     146:	85 ec       	ldi	r24, 0xC5	; 197
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	29 81       	ldd	r18, Y+1	; 0x01
     14c:	3a 81       	ldd	r19, Y+2	; 0x02
     14e:	23 2f       	mov	r18, r19
     150:	33 27       	eor	r19, r19
     152:	fc 01       	movw	r30, r24
     154:	20 83       	st	Z, r18
     156:	84 ec       	ldi	r24, 0xC4	; 196
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	29 81       	ldd	r18, Y+1	; 0x01
     15c:	fc 01       	movw	r30, r24
     15e:	20 83       	st	Z, r18
     160:	80 ec       	ldi	r24, 0xC0	; 192
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	22 e0       	ldi	r18, 0x02	; 2
     166:	fc 01       	movw	r30, r24
     168:	20 83       	st	Z, r18
     16a:	82 ec       	ldi	r24, 0xC2	; 194
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	2e e0       	ldi	r18, 0x0E	; 14
     170:	fc 01       	movw	r30, r24
     172:	20 83       	st	Z, r18
     174:	81 ec       	ldi	r24, 0xC1	; 193
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	28 e9       	ldi	r18, 0x98	; 152
     17a:	fc 01       	movw	r30, r24
     17c:	20 83       	st	Z, r18
     17e:	00 00       	nop
     180:	0f 90       	pop	r0
     182:	0f 90       	pop	r0
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	08 95       	ret

0000018a <USART0SendByte>:

void USART0SendByte(unsigned char ucData)
{
     18a:	cf 93       	push	r28
     18c:	df 93       	push	r29
     18e:	1f 92       	push	r1
     190:	cd b7       	in	r28, 0x3d	; 61
     192:	de b7       	in	r29, 0x3e	; 62
     194:	89 83       	std	Y+1, r24	; 0x01
	while(!( UCSR0A & 0x20))
     196:	00 00       	nop
     198:	80 ec       	ldi	r24, 0xC0	; 192
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	fc 01       	movw	r30, r24
     19e:	80 81       	ld	r24, Z
     1a0:	88 2f       	mov	r24, r24
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	80 72       	andi	r24, 0x20	; 32
     1a6:	99 27       	eor	r25, r25
     1a8:	89 2b       	or	r24, r25
     1aa:	b1 f3       	breq	.-20     	; 0x198 <USART0SendByte+0xe>
	{
		// UDRE0 = 1: Buffer Leer, UDRE0 = 0: Buffer voll
		// Warten bis TX buffer leer ist
	}
	UDR0 = ucData;	// Daten senden
     1ac:	86 ec       	ldi	r24, 0xC6	; 198
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	29 81       	ldd	r18, Y+1	; 0x01
     1b2:	fc 01       	movw	r30, r24
     1b4:	20 83       	st	Z, r18
}
     1b6:	00 00       	nop
     1b8:	0f 90       	pop	r0
     1ba:	df 91       	pop	r29
     1bc:	cf 91       	pop	r28
     1be:	08 95       	ret

000001c0 <twi_send_start>:

#include "avr-twi-lib.h"

// Send start condition
static ret_code_t twi_send_start(void)
{
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
	// Send start condition
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     1c8:	8c eb       	ldi	r24, 0xBC	; 188
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	24 ea       	ldi	r18, 0xA4	; 164
     1ce:	fc 01       	movw	r30, r24
     1d0:	20 83       	st	Z, r18

	// Wait for operation to finish
	while(!(TWCR & (1 << TWINT)));
     1d2:	00 00       	nop
     1d4:	8c eb       	ldi	r24, 0xBC	; 188
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	fc 01       	movw	r30, r24
     1da:	80 81       	ld	r24, Z
     1dc:	88 23       	and	r24, r24
     1de:	d4 f7       	brge	.-12     	; 0x1d4 <twi_send_start+0x14>

	// Check TWSR Status register
	if(TWI_STATUS != 0x08)
     1e0:	89 eb       	ldi	r24, 0xB9	; 185
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	fc 01       	movw	r30, r24
     1e6:	80 81       	ld	r24, Z
     1e8:	88 2f       	mov	r24, r24
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	88 7f       	andi	r24, 0xF8	; 248
     1ee:	99 27       	eor	r25, r25
     1f0:	08 97       	sbiw	r24, 0x08	; 8
     1f2:	19 f0       	breq	.+6      	; 0x1fa <twi_send_start+0x3a>
	{
		return TWI_ERR_START;
     1f4:	83 e0       	ldi	r24, 0x03	; 3
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <twi_send_start+0x3e>
	}
	return TWI_SUCCESS;
     1fa:	80 e0       	ldi	r24, 0x00	; 0
     1fc:	90 e0       	ldi	r25, 0x00	; 0
}
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	08 95       	ret

00000204 <twi_send_sla_w>:

// Transmit slave address with write flag
static ret_code_t twi_send_sla_w(uint8_t slave_addr)
{
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	1f 92       	push	r1
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	89 83       	std	Y+1, r24	; 0x01
	// Write slave address
	TWDR = TWI_SLA_W(slave_addr);
     210:	8b eb       	ldi	r24, 0xBB	; 187
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	29 81       	ldd	r18, Y+1	; 0x01
     216:	22 0f       	add	r18, r18
     218:	fc 01       	movw	r30, r24
     21a:	20 83       	st	Z, r18
	// Write TWINT bit
	TWCR = (1 << TWINT) | (1 << TWEN);
     21c:	8c eb       	ldi	r24, 0xBC	; 188
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	24 e8       	ldi	r18, 0x84	; 132
     222:	fc 01       	movw	r30, r24
     224:	20 83       	st	Z, r18

	// Wait for operation to finish
	while(!(TWCR & (1 << TWINT)));
     226:	00 00       	nop
     228:	8c eb       	ldi	r24, 0xBC	; 188
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	fc 01       	movw	r30, r24
     22e:	80 81       	ld	r24, Z
     230:	88 23       	and	r24, r24
     232:	d4 f7       	brge	.-12     	; 0x228 <twi_send_sla_w+0x24>

	if(TWI_STATUS != 0x18)
     234:	89 eb       	ldi	r24, 0xB9	; 185
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	fc 01       	movw	r30, r24
     23a:	80 81       	ld	r24, Z
     23c:	88 2f       	mov	r24, r24
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	88 7f       	andi	r24, 0xF8	; 248
     242:	99 27       	eor	r25, r25
     244:	48 97       	sbiw	r24, 0x18	; 24
     246:	81 f0       	breq	.+32     	; 0x268 <twi_send_sla_w+0x64>
	{
		if(TWI_STATUS == 0x20)
     248:	89 eb       	ldi	r24, 0xB9	; 185
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	fc 01       	movw	r30, r24
     24e:	80 81       	ld	r24, Z
     250:	88 2f       	mov	r24, r24
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	88 7f       	andi	r24, 0xF8	; 248
     256:	99 27       	eor	r25, r25
     258:	80 97       	sbiw	r24, 0x20	; 32
     25a:	19 f4       	brne	.+6      	; 0x262 <twi_send_sla_w+0x5e>
		{
			// Received NACK
			return TWI_ERR_NACK;
     25c:	84 e0       	ldi	r24, 0x04	; 4
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	05 c0       	rjmp	.+10     	; 0x26c <twi_send_sla_w+0x68>
		}
		// unknow error code in TWSR
		return TWI_ERROR;
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	02 c0       	rjmp	.+4      	; 0x26c <twi_send_sla_w+0x68>
	}
	return TWI_SUCCESS;
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	90 e0       	ldi	r25, 0x00	; 0
}
     26c:	0f 90       	pop	r0
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	08 95       	ret

00000274 <twi_send_sla_r>:

// Transmit slave address with read flag
static ret_code_t twi_send_sla_r(uint8_t slave_addr)
{
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	1f 92       	push	r1
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	89 83       	std	Y+1, r24	; 0x01
	// Write slave address
	TWDR = TWI_SLA_R(slave_addr);
     280:	8b eb       	ldi	r24, 0xBB	; 187
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	29 81       	ldd	r18, Y+1	; 0x01
     286:	22 2f       	mov	r18, r18
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	22 0f       	add	r18, r18
     28c:	33 1f       	adc	r19, r19
     28e:	21 60       	ori	r18, 0x01	; 1
     290:	fc 01       	movw	r30, r24
     292:	20 83       	st	Z, r18
	// Write TWINT bit
	TWCR = (1 << TWINT) | (1 << TWEN);
     294:	8c eb       	ldi	r24, 0xBC	; 188
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	24 e8       	ldi	r18, 0x84	; 132
     29a:	fc 01       	movw	r30, r24
     29c:	20 83       	st	Z, r18

	// Wait for operation to finish
	while(!(TWCR & (1 << TWINT)));
     29e:	00 00       	nop
     2a0:	8c eb       	ldi	r24, 0xBC	; 188
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	fc 01       	movw	r30, r24
     2a6:	80 81       	ld	r24, Z
     2a8:	88 23       	and	r24, r24
     2aa:	d4 f7       	brge	.-12     	; 0x2a0 <twi_send_sla_r+0x2c>

	if(TWI_STATUS != 0x40)
     2ac:	89 eb       	ldi	r24, 0xB9	; 185
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	fc 01       	movw	r30, r24
     2b2:	80 81       	ld	r24, Z
     2b4:	88 2f       	mov	r24, r24
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	88 7f       	andi	r24, 0xF8	; 248
     2ba:	99 27       	eor	r25, r25
     2bc:	80 34       	cpi	r24, 0x40	; 64
     2be:	91 05       	cpc	r25, r1
     2c0:	89 f0       	breq	.+34     	; 0x2e4 <twi_send_sla_r+0x70>
	{
		if(TWI_STATUS == 0x48)
     2c2:	89 eb       	ldi	r24, 0xB9	; 185
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	fc 01       	movw	r30, r24
     2c8:	80 81       	ld	r24, Z
     2ca:	88 2f       	mov	r24, r24
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	88 7f       	andi	r24, 0xF8	; 248
     2d0:	99 27       	eor	r25, r25
     2d2:	88 34       	cpi	r24, 0x48	; 72
     2d4:	91 05       	cpc	r25, r1
     2d6:	19 f4       	brne	.+6      	; 0x2de <twi_send_sla_r+0x6a>
		{
			// Received NACK
			return TWI_ERR_NACK;
     2d8:	84 e0       	ldi	r24, 0x04	; 4
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <twi_send_sla_r+0x74>
		}
		// unknow error code in TWSR
		return TWI_ERROR;
     2de:	81 e0       	ldi	r24, 0x01	; 1
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <twi_send_sla_r+0x74>
	}
	return TWI_SUCCESS;
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
}
     2e8:	0f 90       	pop	r0
     2ea:	df 91       	pop	r29
     2ec:	cf 91       	pop	r28
     2ee:	08 95       	ret

000002f0 <twi_send_data>:

// Send data byte
static ret_code_t twi_send_data(uint8_t data)
{
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
     2f4:	1f 92       	push	r1
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	89 83       	std	Y+1, r24	; 0x01
	// Write data byte
	TWDR = data;
     2fc:	8b eb       	ldi	r24, 0xBB	; 187
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	29 81       	ldd	r18, Y+1	; 0x01
     302:	fc 01       	movw	r30, r24
     304:	20 83       	st	Z, r18
	// Write TWINT bit
	TWCR = (1 << TWINT) | (1 << TWEN);
     306:	8c eb       	ldi	r24, 0xBC	; 188
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	24 e8       	ldi	r18, 0x84	; 132
     30c:	fc 01       	movw	r30, r24
     30e:	20 83       	st	Z, r18

	// Wait for operation to finish
	while(!(TWCR & (1 << TWINT)));
     310:	00 00       	nop
     312:	8c eb       	ldi	r24, 0xBC	; 188
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	fc 01       	movw	r30, r24
     318:	80 81       	ld	r24, Z
     31a:	88 23       	and	r24, r24
     31c:	d4 f7       	brge	.-12     	; 0x312 <twi_send_data+0x22>

	if(TWI_STATUS != 0x28)
     31e:	89 eb       	ldi	r24, 0xB9	; 185
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	fc 01       	movw	r30, r24
     324:	80 81       	ld	r24, Z
     326:	88 2f       	mov	r24, r24
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	88 7f       	andi	r24, 0xF8	; 248
     32c:	99 27       	eor	r25, r25
     32e:	88 97       	sbiw	r24, 0x28	; 40
     330:	81 f0       	breq	.+32     	; 0x352 <twi_send_data+0x62>
	{
		if(TWI_STATUS == 0x30)
     332:	89 eb       	ldi	r24, 0xB9	; 185
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	fc 01       	movw	r30, r24
     338:	80 81       	ld	r24, Z
     33a:	88 2f       	mov	r24, r24
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	88 7f       	andi	r24, 0xF8	; 248
     340:	99 27       	eor	r25, r25
     342:	c0 97       	sbiw	r24, 0x30	; 48
     344:	19 f4       	brne	.+6      	; 0x34c <twi_send_data+0x5c>
		{
			// Received NACK
			return TWI_ERR_NACK;
     346:	84 e0       	ldi	r24, 0x04	; 4
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	05 c0       	rjmp	.+10     	; 0x356 <twi_send_data+0x66>
		}
		// unknow error code in TWSR
		return TWI_ERROR;
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	02 c0       	rjmp	.+4      	; 0x356 <twi_send_data+0x66>
	}

	return TWI_SUCCESS;
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	90 e0       	ldi	r25, 0x00	; 0
}
     356:	0f 90       	pop	r0
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	08 95       	ret

0000035e <twi_read_data>:

// Read data byte
static uint8_t twi_read_data(char read_ack)
{
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	1f 92       	push	r1
     364:	1f 92       	push	r1
     366:	cd b7       	in	r28, 0x3d	; 61
     368:	de b7       	in	r29, 0x3e	; 62
     36a:	8a 83       	std	Y+2, r24	; 0x02
	if(read_ack)
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	88 23       	and	r24, r24
     370:	e9 f0       	breq	.+58     	; 0x3ac <twi_read_data+0x4e>
	{
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     372:	8c eb       	ldi	r24, 0xBC	; 188
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	24 ec       	ldi	r18, 0xC4	; 196
     378:	fc 01       	movw	r30, r24
     37a:	20 83       	st	Z, r18
		while(!(TWCR & (1 << TWINT)));
     37c:	00 00       	nop
     37e:	8c eb       	ldi	r24, 0xBC	; 188
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	fc 01       	movw	r30, r24
     384:	80 81       	ld	r24, Z
     386:	88 23       	and	r24, r24
     388:	d4 f7       	brge	.-12     	; 0x37e <twi_read_data+0x20>
		if(TWI_STATUS != 0x50)
     38a:	89 eb       	ldi	r24, 0xB9	; 185
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	fc 01       	movw	r30, r24
     390:	80 81       	ld	r24, Z
     392:	88 2f       	mov	r24, r24
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	88 7f       	andi	r24, 0xF8	; 248
     398:	99 27       	eor	r25, r25
     39a:	80 35       	cpi	r24, 0x50	; 80
     39c:	91 05       	cpc	r25, r1
     39e:	19 f1       	breq	.+70     	; 0x3e6 <twi_read_data+0x88>
		{
			return TWI_STATUS;
     3a0:	89 eb       	ldi	r24, 0xB9	; 185
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	fc 01       	movw	r30, r24
     3a6:	80 81       	ld	r24, Z
     3a8:	88 7f       	andi	r24, 0xF8	; 248
     3aa:	23 c0       	rjmp	.+70     	; 0x3f2 <twi_read_data+0x94>
		}
	}
	else
	{
		TWCR = (1 << TWINT) | (1 << TWEN);
     3ac:	8c eb       	ldi	r24, 0xBC	; 188
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	24 e8       	ldi	r18, 0x84	; 132
     3b2:	fc 01       	movw	r30, r24
     3b4:	20 83       	st	Z, r18
		while(!(TWCR & (1 << TWINT)));
     3b6:	00 00       	nop
     3b8:	8c eb       	ldi	r24, 0xBC	; 188
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	fc 01       	movw	r30, r24
     3be:	80 81       	ld	r24, Z
     3c0:	88 23       	and	r24, r24
     3c2:	d4 f7       	brge	.-12     	; 0x3b8 <twi_read_data+0x5a>
		if(TWI_STATUS != 0x58)
     3c4:	89 eb       	ldi	r24, 0xB9	; 185
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	fc 01       	movw	r30, r24
     3ca:	80 81       	ld	r24, Z
     3cc:	88 2f       	mov	r24, r24
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	88 7f       	andi	r24, 0xF8	; 248
     3d2:	99 27       	eor	r25, r25
     3d4:	88 35       	cpi	r24, 0x58	; 88
     3d6:	91 05       	cpc	r25, r1
     3d8:	31 f0       	breq	.+12     	; 0x3e6 <twi_read_data+0x88>
		{
			return TWI_STATUS;
     3da:	89 eb       	ldi	r24, 0xB9	; 185
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	fc 01       	movw	r30, r24
     3e0:	80 81       	ld	r24, Z
     3e2:	88 7f       	andi	r24, 0xF8	; 248
     3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <twi_read_data+0x94>
		}
	}
	uint8_t data = TWDR;
     3e6:	8b eb       	ldi	r24, 0xBB	; 187
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	fc 01       	movw	r30, r24
     3ec:	80 81       	ld	r24, Z
     3ee:	89 83       	std	Y+1, r24	; 0x01

	return data;
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
}
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	08 95       	ret

000003fc <twi_send_stop>:

// Send stop condition
ret_code_t twi_send_stop(void)
{
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	cd b7       	in	r28, 0x3d	; 61
     402:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     404:	8c eb       	ldi	r24, 0xBC	; 188
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	24 e9       	ldi	r18, 0x94	; 148
     40a:	fc 01       	movw	r30, r24
     40c:	20 83       	st	Z, r18

	return TWI_SUCCESS;
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	90 e0       	ldi	r25, 0x00	; 0
}
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	08 95       	ret

00000418 <twi_init>:

// Initialise TWI interface
ret_code_t twi_init(twi_freq_t twi_freq)
{
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	1f 92       	push	r1
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	89 83       	std	Y+1, r24	; 0x01
	// Set power reduction register
#if defined (__AVR_ATmega2561__)
	PRR0 &= ~(1 << PRTWI);
     424:	84 e6       	ldi	r24, 0x64	; 100
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	24 e6       	ldi	r18, 0x64	; 100
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	f9 01       	movw	r30, r18
     42e:	20 81       	ld	r18, Z
     430:	2f 77       	andi	r18, 0x7F	; 127
     432:	fc 01       	movw	r30, r24
     434:	20 83       	st	Z, r18
#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
	PRR &= ~(1 << PRTWI);
#endif

	// Set frequency
	switch(twi_freq)
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	88 2f       	mov	r24, r24
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	09 2e       	mov	r0, r25
     43e:	00 0c       	add	r0, r0
     440:	aa 0b       	sbc	r26, r26
     442:	bb 0b       	sbc	r27, r27
     444:	40 e0       	ldi	r20, 0x00	; 0
     446:	50 e0       	ldi	r21, 0x00	; 0
     448:	2a e0       	ldi	r18, 0x0A	; 10
     44a:	30 e0       	ldi	r19, 0x00	; 0
     44c:	84 1b       	sub	r24, r20
     44e:	95 0b       	sbc	r25, r21
     450:	28 17       	cp	r18, r24
     452:	39 07       	cpc	r19, r25
     454:	08 f4       	brcc	.+2      	; 0x458 <twi_init+0x40>
     456:	48 c0       	rjmp	.+144    	; 0x4e8 <twi_init+0xd0>
     458:	fc 01       	movw	r30, r24
     45a:	88 27       	eor	r24, r24
     45c:	ea 59       	subi	r30, 0x9A	; 154
     45e:	ff 4f       	sbci	r31, 0xFF	; 255
     460:	8f 4f       	sbci	r24, 0xFF	; 255
     462:	0c 94 f9 12 	jmp	0x25f2	; 0x25f2 <__tablejump2__>
	{
		case TWI_FREQ_100K_8M:
			// Set TWBR 32 and Prescaler 1 -> 8MHz / (16 + 2 * 32 * 1) = 100kHz
			TWBR = 32;
     466:	88 eb       	ldi	r24, 0xB8	; 184
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	20 e2       	ldi	r18, 0x20	; 32
     46c:	fc 01       	movw	r30, r24
     46e:	20 83       	st	Z, r18
			break;
     470:	3e c0       	rjmp	.+124    	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_100K_16M:
			// Set TWBR 32 and Prescaler 1 -> 16MHz / (16 + 2 * 72 * 1) = 100kHz
			TWBR = 72;
     472:	88 eb       	ldi	r24, 0xB8	; 184
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	28 e4       	ldi	r18, 0x48	; 72
     478:	fc 01       	movw	r30, r24
     47a:	20 83       	st	Z, r18
			break;
     47c:	38 c0       	rjmp	.+112    	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_100K_20M:
			// Set TWBR 32 and Prescaler 1 -> 20MHz / (16 + 2 * 92 * 1) = 100kHz
			TWBR = 92;
     47e:	88 eb       	ldi	r24, 0xB8	; 184
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	2c e5       	ldi	r18, 0x5C	; 92
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
			break;
     488:	32 c0       	rjmp	.+100    	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_250K_8M:
			// Set TWBR 8 and Prescaler 1 -> 8MHz / (16 + 2 * 8 * 1) = 250kHz
			TWBR = 8;
     48a:	88 eb       	ldi	r24, 0xB8	; 184
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	28 e0       	ldi	r18, 0x08	; 8
     490:	fc 01       	movw	r30, r24
     492:	20 83       	st	Z, r18
			break;
     494:	2c c0       	rjmp	.+88     	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_250K_16M:
			// Set TWBR 32 and Prescaler 1 -> 16MHz / (16 + 2 * 24 * 1) = 100kHz
			TWBR = 24;
     496:	88 eb       	ldi	r24, 0xB8	; 184
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	28 e1       	ldi	r18, 0x18	; 24
     49c:	fc 01       	movw	r30, r24
     49e:	20 83       	st	Z, r18
			break;
     4a0:	26 c0       	rjmp	.+76     	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_250K_20M:
			// Set TWBR 32 and Prescaler 1 -> 20MHz / (16 + 2 * 32 * 1) = 100kHz
			TWBR = 32;
     4a2:	88 eb       	ldi	r24, 0xB8	; 184
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	20 e2       	ldi	r18, 0x20	; 32
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18
			break;
     4ac:	20 c0       	rjmp	.+64     	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_400K_8M:
			// Set TWBR 2 and Prescaler 1 -> 8MHz / (16 + 2 * 2 * 1) = 400kHz
			TWBR = 2;
     4ae:	88 eb       	ldi	r24, 0xB8	; 184
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	22 e0       	ldi	r18, 0x02	; 2
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18
			break;
     4b8:	1a c0       	rjmp	.+52     	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_400K_16M:
			// Set TWBR 32 and Prescaler 1 -> 16MHz / (16 + 2 * 12 * 1) = 100kHz
			TWBR = 12;
     4ba:	88 eb       	ldi	r24, 0xB8	; 184
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	2c e0       	ldi	r18, 0x0C	; 12
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 83       	st	Z, r18
			break;
     4c4:	14 c0       	rjmp	.+40     	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_400K_20M:
			// Set TWBR 32 and Prescaler 1 -> 20MHz / (16 + 2 * 17 * 1) = 100kHz
			TWBR = 17;
     4c6:	88 eb       	ldi	r24, 0xB8	; 184
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	21 e1       	ldi	r18, 0x11	; 17
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 83       	st	Z, r18
			break;
     4d0:	0e c0       	rjmp	.+28     	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_1M_16M:
			// Set TWBR 2 and Prescaler 1 -> 16MHz / (16 + 2 * 0 * 1) = 1MHz
			TWBR = 0;
     4d2:	88 eb       	ldi	r24, 0xB8	; 184
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	fc 01       	movw	r30, r24
     4d8:	10 82       	st	Z, r1
			break;
     4da:	09 c0       	rjmp	.+18     	; 0x4ee <twi_init+0xd6>
		case TWI_FREQ_1M_20M:
			// Set TWBR 32 and Prescaler 1 -> 20MHz / (16 + 2 * 2 * 1) = 100kHz
			TWBR = 2;
     4dc:	88 eb       	ldi	r24, 0xB8	; 184
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	22 e0       	ldi	r18, 0x02	; 2
     4e2:	fc 01       	movw	r30, r24
     4e4:	20 83       	st	Z, r18
			break;
     4e6:	03 c0       	rjmp	.+6      	; 0x4ee <twi_init+0xd6>
		default:
			return TWI_ERR_FREQ;
     4e8:	82 e0       	ldi	r24, 0x02	; 2
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <twi_init+0xda>
			break;
	}
	return TWI_SUCCESS;
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
}
     4f2:	0f 90       	pop	r0
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	08 95       	ret

000004fa <twi_master_transmit>:

// Transmit on the TWI Interface as a master
ret_code_t twi_master_transmit(uint8_t slave_addr, uint8_t* pData, uint8_t len, char repeat_start)
{
     4fa:	cf 93       	push	r28
     4fc:	df 93       	push	r29
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	29 97       	sbiw	r28, 0x09	; 9
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	f8 94       	cli
     508:	de bf       	out	0x3e, r29	; 62
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	cd bf       	out	0x3d, r28	; 61
     50e:	8d 83       	std	Y+5, r24	; 0x05
     510:	7f 83       	std	Y+7, r23	; 0x07
     512:	6e 83       	std	Y+6, r22	; 0x06
     514:	48 87       	std	Y+8, r20	; 0x08
     516:	29 87       	std	Y+9, r18	; 0x09
	// Send start condition
	ret_code_t error_code = twi_send_start();
     518:	53 de       	rcall	.-858    	; 0x1c0 <twi_send_start>
     51a:	9c 83       	std	Y+4, r25	; 0x04
     51c:	8b 83       	std	Y+3, r24	; 0x03
	if(error_code != TWI_SUCCESS)
     51e:	8b 81       	ldd	r24, Y+3	; 0x03
     520:	9c 81       	ldd	r25, Y+4	; 0x04
     522:	89 2b       	or	r24, r25
     524:	19 f0       	breq	.+6      	; 0x52c <twi_master_transmit+0x32>
	{
		return error_code;
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	9c 81       	ldd	r25, Y+4	; 0x04
     52a:	33 c0       	rjmp	.+102    	; 0x592 <twi_master_transmit+0x98>
	}

	// Send slave address with write flag
	error_code = twi_send_sla_w(slave_addr);
     52c:	8d 81       	ldd	r24, Y+5	; 0x05
     52e:	6a de       	rcall	.-812    	; 0x204 <twi_send_sla_w>
     530:	9c 83       	std	Y+4, r25	; 0x04
     532:	8b 83       	std	Y+3, r24	; 0x03
	if(error_code != TWI_SUCCESS)
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	9c 81       	ldd	r25, Y+4	; 0x04
     538:	89 2b       	or	r24, r25
     53a:	19 f0       	breq	.+6      	; 0x542 <twi_master_transmit+0x48>
	{
		return error_code;
     53c:	8b 81       	ldd	r24, Y+3	; 0x03
     53e:	9c 81       	ldd	r25, Y+4	; 0x04
     540:	28 c0       	rjmp	.+80     	; 0x592 <twi_master_transmit+0x98>
	}

	// Send data byte or bytes
	for(int i = 0; i < len; i++)
     542:	1a 82       	std	Y+2, r1	; 0x02
     544:	19 82       	std	Y+1, r1	; 0x01
     546:	17 c0       	rjmp	.+46     	; 0x576 <twi_master_transmit+0x7c>
	{
		error_code = twi_send_data(pData[i]);
     548:	89 81       	ldd	r24, Y+1	; 0x01
     54a:	9a 81       	ldd	r25, Y+2	; 0x02
     54c:	2e 81       	ldd	r18, Y+6	; 0x06
     54e:	3f 81       	ldd	r19, Y+7	; 0x07
     550:	82 0f       	add	r24, r18
     552:	93 1f       	adc	r25, r19
     554:	fc 01       	movw	r30, r24
     556:	80 81       	ld	r24, Z
     558:	cb de       	rcall	.-618    	; 0x2f0 <twi_send_data>
     55a:	9c 83       	std	Y+4, r25	; 0x04
     55c:	8b 83       	std	Y+3, r24	; 0x03
		if(error_code != TWI_SUCCESS)
     55e:	8b 81       	ldd	r24, Y+3	; 0x03
     560:	9c 81       	ldd	r25, Y+4	; 0x04
     562:	89 2b       	or	r24, r25
     564:	19 f0       	breq	.+6      	; 0x56c <twi_master_transmit+0x72>
		{
			return error_code;
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	9c 81       	ldd	r25, Y+4	; 0x04
     56a:	13 c0       	rjmp	.+38     	; 0x592 <twi_master_transmit+0x98>
	{
		return error_code;
	}

	// Send data byte or bytes
	for(int i = 0; i < len; i++)
     56c:	89 81       	ldd	r24, Y+1	; 0x01
     56e:	9a 81       	ldd	r25, Y+2	; 0x02
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	9a 83       	std	Y+2, r25	; 0x02
     574:	89 83       	std	Y+1, r24	; 0x01
     576:	88 85       	ldd	r24, Y+8	; 0x08
     578:	28 2f       	mov	r18, r24
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
     580:	82 17       	cp	r24, r18
     582:	93 07       	cpc	r25, r19
     584:	0c f3       	brlt	.-62     	; 0x548 <twi_master_transmit+0x4e>
			return error_code;
		}
	}

	// Send stop condition
	if(!repeat_start)
     586:	89 85       	ldd	r24, Y+9	; 0x09
     588:	88 23       	and	r24, r24
	{
		twi_send_stop();
     58a:	09 f4       	brne	.+2      	; 0x58e <twi_master_transmit+0x94>
     58c:	37 df       	rcall	.-402    	; 0x3fc <twi_send_stop>
	}

	return TWI_SUCCESS;
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 e0       	ldi	r25, 0x00	; 0
}
     592:	29 96       	adiw	r28, 0x09	; 9
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <twi_master_receive>:

ret_code_t twi_master_receive(uint8_t slave_addr, uint8_t* pData, uint8_t len)
{
     5a4:	0f 93       	push	r16
     5a6:	1f 93       	push	r17
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	cd b7       	in	r28, 0x3d	; 61
     5ae:	de b7       	in	r29, 0x3e	; 62
     5b0:	28 97       	sbiw	r28, 0x08	; 8
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	8d 83       	std	Y+5, r24	; 0x05
     5be:	7f 83       	std	Y+7, r23	; 0x07
     5c0:	6e 83       	std	Y+6, r22	; 0x06
     5c2:	48 87       	std	Y+8, r20	; 0x08
	// Send start condition
	ret_code_t error_code = twi_send_start();
     5c4:	fd dd       	rcall	.-1030   	; 0x1c0 <twi_send_start>
     5c6:	9c 83       	std	Y+4, r25	; 0x04
     5c8:	8b 83       	std	Y+3, r24	; 0x03
	if(error_code != TWI_SUCCESS)
     5ca:	8b 81       	ldd	r24, Y+3	; 0x03
     5cc:	9c 81       	ldd	r25, Y+4	; 0x04
     5ce:	89 2b       	or	r24, r25
     5d0:	19 f0       	breq	.+6      	; 0x5d8 <twi_master_receive+0x34>
	{
		return error_code;
     5d2:	8b 81       	ldd	r24, Y+3	; 0x03
     5d4:	9c 81       	ldd	r25, Y+4	; 0x04
     5d6:	39 c0       	rjmp	.+114    	; 0x64a <twi_master_receive+0xa6>
	}

	// Send slave address with write flag
	error_code = twi_send_sla_r(slave_addr);
     5d8:	8d 81       	ldd	r24, Y+5	; 0x05
     5da:	4c de       	rcall	.-872    	; 0x274 <twi_send_sla_r>
     5dc:	9c 83       	std	Y+4, r25	; 0x04
     5de:	8b 83       	std	Y+3, r24	; 0x03
	if(error_code != TWI_SUCCESS)
     5e0:	8b 81       	ldd	r24, Y+3	; 0x03
     5e2:	9c 81       	ldd	r25, Y+4	; 0x04
     5e4:	89 2b       	or	r24, r25
     5e6:	19 f0       	breq	.+6      	; 0x5ee <twi_master_receive+0x4a>
	{
		return error_code;
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	9c 81       	ldd	r25, Y+4	; 0x04
     5ec:	2e c0       	rjmp	.+92     	; 0x64a <twi_master_receive+0xa6>
	}

	/* Read single or multiple data byte and send ack */
	for(int i = 0; i < len-1; i++)
     5ee:	1a 82       	std	Y+2, r1	; 0x02
     5f0:	19 82       	std	Y+1, r1	; 0x01
     5f2:	10 c0       	rjmp	.+32     	; 0x614 <twi_master_receive+0x70>
	{
		pData[i] = twi_read_data(TWI_READ_ACK);
     5f4:	89 81       	ldd	r24, Y+1	; 0x01
     5f6:	9a 81       	ldd	r25, Y+2	; 0x02
     5f8:	2e 81       	ldd	r18, Y+6	; 0x06
     5fa:	3f 81       	ldd	r19, Y+7	; 0x07
     5fc:	89 01       	movw	r16, r18
     5fe:	08 0f       	add	r16, r24
     600:	19 1f       	adc	r17, r25
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	ac de       	rcall	.-680    	; 0x35e <twi_read_data>
     606:	f8 01       	movw	r30, r16
     608:	80 83       	st	Z, r24
	{
		return error_code;
	}

	/* Read single or multiple data byte and send ack */
	for(int i = 0; i < len-1; i++)
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	9a 81       	ldd	r25, Y+2	; 0x02
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	9a 83       	std	Y+2, r25	; 0x02
     612:	89 83       	std	Y+1, r24	; 0x01
     614:	88 85       	ldd	r24, Y+8	; 0x08
     616:	88 2f       	mov	r24, r24
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	9c 01       	movw	r18, r24
     61c:	21 50       	subi	r18, 0x01	; 1
     61e:	31 09       	sbc	r19, r1
     620:	89 81       	ldd	r24, Y+1	; 0x01
     622:	9a 81       	ldd	r25, Y+2	; 0x02
     624:	82 17       	cp	r24, r18
     626:	93 07       	cpc	r25, r19
     628:	2c f3       	brlt	.-54     	; 0x5f4 <twi_master_receive+0x50>
	{
		pData[i] = twi_read_data(TWI_READ_ACK);
	}
	pData[len-1] = twi_read_data(TWI_READ_NACK);
     62a:	88 85       	ldd	r24, Y+8	; 0x08
     62c:	88 2f       	mov	r24, r24
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	2e 81       	ldd	r18, Y+6	; 0x06
     634:	3f 81       	ldd	r19, Y+7	; 0x07
     636:	89 01       	movw	r16, r18
     638:	08 0f       	add	r16, r24
     63a:	19 1f       	adc	r17, r25
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	8f de       	rcall	.-738    	; 0x35e <twi_read_data>
     640:	f8 01       	movw	r30, r16

	/* Send STOP condition */
	twi_send_stop();
     642:	80 83       	st	Z, r24
     644:	db de       	rcall	.-586    	; 0x3fc <twi_send_stop>

	return TWI_SUCCESS;
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
}
     64a:	28 96       	adiw	r28, 0x08	; 8
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	08 95       	ret

00000660 <main>:
#include "Header.h"
#include <util/delay.h>
volatile unsigned char cRecieve[5];

int main(void)
{
     660:	cf 92       	push	r12
     662:	df 92       	push	r13
     664:	ef 92       	push	r14
     666:	ff 92       	push	r15
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	c5 55       	subi	r28, 0x55	; 85
     672:	d1 09       	sbc	r29, r1
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	de bf       	out	0x3e, r29	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	cd bf       	out	0x3d, r28	; 61
	char cRET = 0;
     67e:	1d 8a       	std	Y+21, r1	; 0x15
	cRET = INIT();
     680:	e3 d4       	rcall	.+2502   	; 0x1048 <INIT>
     682:	8d 8b       	std	Y+21, r24	; 0x15
	float TEMP;
	float PRESS;
	float HUM;
	float GAS;
	char Ziffern[10];
	char TEMPRATURE[] = {'T','E','M','P','R','A','T','U','R','E',':',' '};
     684:	8c e0       	ldi	r24, 0x0C	; 12
     686:	e0 e0       	ldi	r30, 0x00	; 0
     688:	f2 e0       	ldi	r31, 0x02	; 2
     68a:	de 01       	movw	r26, r28
     68c:	d6 96       	adiw	r26, 0x36	; 54
     68e:	01 90       	ld	r0, Z+
     690:	0d 92       	st	X+, r0
     692:	8a 95       	dec	r24
     694:	e1 f7       	brne	.-8      	; 0x68e <main+0x2e>
	char PRESSURE[] =	{'P','R','E','S','S','U','R','E',':',' '};
     696:	ce 01       	movw	r24, r28
     698:	8e 5b       	subi	r24, 0xBE	; 190
     69a:	9f 4f       	sbci	r25, 0xFF	; 255
     69c:	2a e0       	ldi	r18, 0x0A	; 10
     69e:	ec e0       	ldi	r30, 0x0C	; 12
     6a0:	f2 e0       	ldi	r31, 0x02	; 2
     6a2:	dc 01       	movw	r26, r24
     6a4:	01 90       	ld	r0, Z+
     6a6:	0d 92       	st	X+, r0
     6a8:	2a 95       	dec	r18
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <main+0x44>
	char HUMIDITY[] =	{'H','U','M','I','D','I','T','Y',':',' '};
     6ac:	ce 01       	movw	r24, r28
     6ae:	84 5b       	subi	r24, 0xB4	; 180
     6b0:	9f 4f       	sbci	r25, 0xFF	; 255
     6b2:	2a e0       	ldi	r18, 0x0A	; 10
     6b4:	e6 e1       	ldi	r30, 0x16	; 22
     6b6:	f2 e0       	ldi	r31, 0x02	; 2
     6b8:	dc 01       	movw	r26, r24
     6ba:	01 90       	ld	r0, Z+
     6bc:	0d 92       	st	X+, r0
     6be:	2a 95       	dec	r18
	
    /* Replace with your application code */
    while (1) 
    {
		
		START_CONVERSION();
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <main+0x5a>
		TEMP = READ_TEMP_F();
     6c2:	3f d5       	rcall	.+2686   	; 0x1142 <START_CONVERSION>
     6c4:	64 d5       	rcall	.+2760   	; 0x118e <READ_TEMP_F>
     6c6:	dc 01       	movw	r26, r24
     6c8:	cb 01       	movw	r24, r22
     6ca:	89 83       	std	Y+1, r24	; 0x01
     6cc:	9a 83       	std	Y+2, r25	; 0x02
     6ce:	ab 83       	std	Y+3, r26	; 0x03
		PRESS = READ_PRESS();
     6d0:	bc 83       	std	Y+4, r27	; 0x04
     6d2:	38 d7       	rcall	.+3696   	; 0x1544 <READ_PRESS>
     6d4:	dc 01       	movw	r26, r24
     6d6:	cb 01       	movw	r24, r22
     6d8:	8e 8b       	std	Y+22, r24	; 0x16
     6da:	9f 8b       	std	Y+23, r25	; 0x17
     6dc:	a8 8f       	std	Y+24, r26	; 0x18
     6de:	b9 8f       	std	Y+25, r27	; 0x19
		HUM = READ_HUM ();
     6e0:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <READ_HUM>
     6e4:	dc 01       	movw	r26, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	8a 8f       	std	Y+26, r24	; 0x1a
     6ea:	9b 8f       	std	Y+27, r25	; 0x1b
     6ec:	ac 8f       	std	Y+28, r26	; 0x1c
     6ee:	bd 8f       	std	Y+29, r27	; 0x1d
		//GAS = READ_GAS();
		
		for(int i = 0; i < 12; i++)
     6f0:	1e 82       	std	Y+6, r1	; 0x06
     6f2:	1d 82       	std	Y+5, r1	; 0x05
     6f4:	0f c0       	rjmp	.+30     	; 0x714 <main+0xb4>
		{
			USART0SendByte(TEMPRATURE[i]);
     6f6:	9e 01       	movw	r18, r28
     6f8:	2a 5c       	subi	r18, 0xCA	; 202
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	8d 81       	ldd	r24, Y+5	; 0x05
     6fe:	9e 81       	ldd	r25, Y+6	; 0x06
     700:	82 0f       	add	r24, r18
     702:	93 1f       	adc	r25, r19
     704:	fc 01       	movw	r30, r24
     706:	80 81       	ld	r24, Z
     708:	40 dd       	rcall	.-1408   	; 0x18a <USART0SendByte>
		TEMP = READ_TEMP_F();
		PRESS = READ_PRESS();
		HUM = READ_HUM ();
		//GAS = READ_GAS();
		
		for(int i = 0; i < 12; i++)
     70a:	8d 81       	ldd	r24, Y+5	; 0x05
     70c:	9e 81       	ldd	r25, Y+6	; 0x06
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	9e 83       	std	Y+6, r25	; 0x06
     712:	8d 83       	std	Y+5, r24	; 0x05
     714:	8d 81       	ldd	r24, Y+5	; 0x05
     716:	9e 81       	ldd	r25, Y+6	; 0x06
     718:	0c 97       	sbiw	r24, 0x0c	; 12
     71a:	6c f3       	brlt	.-38     	; 0x6f6 <main+0x96>
		{
			USART0SendByte(TEMPRATURE[i]);
		}	
		
		if (TEMP < 0)
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	a9 01       	movw	r20, r18
     722:	69 81       	ldd	r22, Y+1	; 0x01
     724:	7a 81       	ldd	r23, Y+2	; 0x02
     726:	8b 81       	ldd	r24, Y+3	; 0x03
     728:	9c 81       	ldd	r25, Y+4	; 0x04
     72a:	0e 94 43 11 	call	0x2286	; 0x2286 <__cmpsf2>
     72e:	88 23       	and	r24, r24
		{
			USART0SendByte('-');
     730:	5c f4       	brge	.+22     	; 0x748 <main+0xe8>
     732:	8d e2       	ldi	r24, 0x2D	; 45
     734:	2a dd       	rcall	.-1452   	; 0x18a <USART0SendByte>
			TEMP = TEMP * -1.0;
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	9a 81       	ldd	r25, Y+2	; 0x02
     73a:	ab 81       	ldd	r26, Y+3	; 0x03
     73c:	bc 81       	ldd	r27, Y+4	; 0x04
     73e:	b0 58       	subi	r27, 0x80	; 128
     740:	89 83       	std	Y+1, r24	; 0x01
     742:	9a 83       	std	Y+2, r25	; 0x02
     744:	ab 83       	std	Y+3, r26	; 0x03
     746:	bc 83       	std	Y+4, r27	; 0x04
		}
		
		
		
		Ziffern[0] = TEMP / 10;
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	40 e2       	ldi	r20, 0x20	; 32
     74e:	51 e4       	ldi	r21, 0x41	; 65
     750:	69 81       	ldd	r22, Y+1	; 0x01
     752:	7a 81       	ldd	r23, Y+2	; 0x02
     754:	8b 81       	ldd	r24, Y+3	; 0x03
     756:	9c 81       	ldd	r25, Y+4	; 0x04
     758:	0e 94 47 11 	call	0x228e	; 0x228e <__divsf3>
     75c:	dc 01       	movw	r26, r24
     75e:	cb 01       	movw	r24, r22
     760:	bc 01       	movw	r22, r24
     762:	cd 01       	movw	r24, r26
     764:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     768:	dc 01       	movw	r26, r24
     76a:	cb 01       	movw	r24, r22
     76c:	8c a7       	std	Y+44, r24	; 0x2c
		Ziffern[1] = TEMP  - Ziffern[0] * 10;
     76e:	8c a5       	ldd	r24, Y+44	; 0x2c
     770:	88 2f       	mov	r24, r24
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	9c 01       	movw	r18, r24
     77a:	22 0f       	add	r18, r18
     77c:	33 1f       	adc	r19, r19
     77e:	22 0f       	add	r18, r18
     780:	33 1f       	adc	r19, r19
     782:	82 0f       	add	r24, r18
     784:	93 1f       	adc	r25, r19
     786:	09 2e       	mov	r0, r25
     788:	00 0c       	add	r0, r0
     78a:	aa 0b       	sbc	r26, r26
     78c:	bb 0b       	sbc	r27, r27
     78e:	bc 01       	movw	r22, r24
     790:	cd 01       	movw	r24, r26
     792:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
     79a:	9c 01       	movw	r18, r24
     79c:	ad 01       	movw	r20, r26
     79e:	69 81       	ldd	r22, Y+1	; 0x01
     7a0:	7a 81       	ldd	r23, Y+2	; 0x02
     7a2:	8b 81       	ldd	r24, Y+3	; 0x03
     7a4:	9c 81       	ldd	r25, Y+4	; 0x04
     7a6:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     7aa:	dc 01       	movw	r26, r24
     7ac:	cb 01       	movw	r24, r22
     7ae:	bc 01       	movw	r22, r24
     7b0:	cd 01       	movw	r24, r26
     7b2:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     7b6:	dc 01       	movw	r26, r24
     7b8:	cb 01       	movw	r24, r22
     7ba:	8d a7       	std	Y+45, r24	; 0x2d
		Ziffern[2] = (TEMP - Ziffern[0] * 10 -  Ziffern[1]) * 10;
     7bc:	8c a5       	ldd	r24, Y+44	; 0x2c
     7be:	88 2f       	mov	r24, r24
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	88 0f       	add	r24, r24
     7c4:	99 1f       	adc	r25, r25
     7c6:	9c 01       	movw	r18, r24
     7c8:	22 0f       	add	r18, r18
     7ca:	33 1f       	adc	r19, r19
     7cc:	22 0f       	add	r18, r18
     7ce:	33 1f       	adc	r19, r19
     7d0:	82 0f       	add	r24, r18
     7d2:	93 1f       	adc	r25, r19
     7d4:	09 2e       	mov	r0, r25
     7d6:	00 0c       	add	r0, r0
     7d8:	aa 0b       	sbc	r26, r26
     7da:	bb 0b       	sbc	r27, r27
     7dc:	bc 01       	movw	r22, r24
     7de:	cd 01       	movw	r24, r26
     7e0:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     7e4:	dc 01       	movw	r26, r24
     7e6:	cb 01       	movw	r24, r22
     7e8:	9c 01       	movw	r18, r24
     7ea:	ad 01       	movw	r20, r26
     7ec:	69 81       	ldd	r22, Y+1	; 0x01
     7ee:	7a 81       	ldd	r23, Y+2	; 0x02
     7f0:	8b 81       	ldd	r24, Y+3	; 0x03
     7f2:	9c 81       	ldd	r25, Y+4	; 0x04
     7f4:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     7f8:	dc 01       	movw	r26, r24
     7fa:	cb 01       	movw	r24, r22
     7fc:	6c 01       	movw	r12, r24
     7fe:	7d 01       	movw	r14, r26
     800:	8d a5       	ldd	r24, Y+45	; 0x2d
     802:	88 2f       	mov	r24, r24
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	09 2e       	mov	r0, r25
     808:	00 0c       	add	r0, r0
     80a:	aa 0b       	sbc	r26, r26
     80c:	bb 0b       	sbc	r27, r27
     80e:	bc 01       	movw	r22, r24
     810:	cd 01       	movw	r24, r26
     812:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     816:	dc 01       	movw	r26, r24
     818:	cb 01       	movw	r24, r22
     81a:	9c 01       	movw	r18, r24
     81c:	ad 01       	movw	r20, r26
     81e:	c7 01       	movw	r24, r14
     820:	b6 01       	movw	r22, r12
     822:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     826:	dc 01       	movw	r26, r24
     828:	cb 01       	movw	r24, r22
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	40 e2       	ldi	r20, 0x20	; 32
     830:	51 e4       	ldi	r21, 0x41	; 65
     832:	bc 01       	movw	r22, r24
     834:	cd 01       	movw	r24, r26
     836:	0e 94 96 12 	call	0x252c	; 0x252c <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	bc 01       	movw	r22, r24
     840:	cd 01       	movw	r24, r26
     842:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     846:	dc 01       	movw	r26, r24
     848:	cb 01       	movw	r24, r22
     84a:	8e a7       	std	Y+46, r24	; 0x2e
		Ziffern[3] = (TEMP - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
     84c:	8c a5       	ldd	r24, Y+44	; 0x2c
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	9c 01       	movw	r18, r24
     858:	22 0f       	add	r18, r18
     85a:	33 1f       	adc	r19, r19
     85c:	22 0f       	add	r18, r18
     85e:	33 1f       	adc	r19, r19
     860:	82 0f       	add	r24, r18
     862:	93 1f       	adc	r25, r19
     864:	09 2e       	mov	r0, r25
     866:	00 0c       	add	r0, r0
     868:	aa 0b       	sbc	r26, r26
     86a:	bb 0b       	sbc	r27, r27
     86c:	bc 01       	movw	r22, r24
     86e:	cd 01       	movw	r24, r26
     870:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     874:	dc 01       	movw	r26, r24
     876:	cb 01       	movw	r24, r22
     878:	9c 01       	movw	r18, r24
     87a:	ad 01       	movw	r20, r26
     87c:	69 81       	ldd	r22, Y+1	; 0x01
     87e:	7a 81       	ldd	r23, Y+2	; 0x02
     880:	8b 81       	ldd	r24, Y+3	; 0x03
     882:	9c 81       	ldd	r25, Y+4	; 0x04
     884:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     888:	dc 01       	movw	r26, r24
     88a:	cb 01       	movw	r24, r22
     88c:	6c 01       	movw	r12, r24
     88e:	7d 01       	movw	r14, r26
     890:	8d a5       	ldd	r24, Y+45	; 0x2d
     892:	88 2f       	mov	r24, r24
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	09 2e       	mov	r0, r25
     898:	00 0c       	add	r0, r0
     89a:	aa 0b       	sbc	r26, r26
     89c:	bb 0b       	sbc	r27, r27
     89e:	bc 01       	movw	r22, r24
     8a0:	cd 01       	movw	r24, r26
     8a2:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     8a6:	dc 01       	movw	r26, r24
     8a8:	cb 01       	movw	r24, r22
     8aa:	9c 01       	movw	r18, r24
     8ac:	ad 01       	movw	r20, r26
     8ae:	c7 01       	movw	r24, r14
     8b0:	b6 01       	movw	r22, r12
     8b2:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     8b6:	dc 01       	movw	r26, r24
     8b8:	cb 01       	movw	r24, r22
     8ba:	6c 01       	movw	r12, r24
     8bc:	7d 01       	movw	r14, r26
     8be:	8e a5       	ldd	r24, Y+46	; 0x2e
     8c0:	88 2f       	mov	r24, r24
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	a0 e0       	ldi	r26, 0x00	; 0
     8c6:	b0 e0       	ldi	r27, 0x00	; 0
     8c8:	bc 01       	movw	r22, r24
     8ca:	cd 01       	movw	r24, r26
     8cc:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
     8d0:	dc 01       	movw	r26, r24
     8d2:	cb 01       	movw	r24, r22
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	40 e2       	ldi	r20, 0x20	; 32
     8da:	51 e4       	ldi	r21, 0x41	; 65
     8dc:	bc 01       	movw	r22, r24
     8de:	cd 01       	movw	r24, r26
     8e0:	0e 94 47 11 	call	0x228e	; 0x228e <__divsf3>
     8e4:	dc 01       	movw	r26, r24
     8e6:	cb 01       	movw	r24, r22
     8e8:	9c 01       	movw	r18, r24
     8ea:	ad 01       	movw	r20, r26
     8ec:	c7 01       	movw	r24, r14
     8ee:	b6 01       	movw	r22, r12
     8f0:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     8f4:	dc 01       	movw	r26, r24
     8f6:	cb 01       	movw	r24, r22
     8f8:	20 e0       	ldi	r18, 0x00	; 0
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	48 ec       	ldi	r20, 0xC8	; 200
     8fe:	52 e4       	ldi	r21, 0x42	; 66
     900:	bc 01       	movw	r22, r24
     902:	cd 01       	movw	r24, r26
     904:	0e 94 96 12 	call	0x252c	; 0x252c <__mulsf3>
     908:	dc 01       	movw	r26, r24
     90a:	cb 01       	movw	r24, r22
     90c:	bc 01       	movw	r22, r24
     90e:	cd 01       	movw	r24, r26
     910:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     914:	dc 01       	movw	r26, r24
     916:	cb 01       	movw	r24, r22
     918:	8f a7       	std	Y+47, r24	; 0x2f
		Ziffern[4] = (TEMP - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0) -  ((double)Ziffern[3] / 100.0)) * 1000;
     91a:	8c a5       	ldd	r24, Y+44	; 0x2c
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	88 0f       	add	r24, r24
     922:	99 1f       	adc	r25, r25
     924:	9c 01       	movw	r18, r24
     926:	22 0f       	add	r18, r18
     928:	33 1f       	adc	r19, r19
     92a:	22 0f       	add	r18, r18
     92c:	33 1f       	adc	r19, r19
     92e:	82 0f       	add	r24, r18
     930:	93 1f       	adc	r25, r19
     932:	09 2e       	mov	r0, r25
     934:	00 0c       	add	r0, r0
     936:	aa 0b       	sbc	r26, r26
     938:	bb 0b       	sbc	r27, r27
     93a:	bc 01       	movw	r22, r24
     93c:	cd 01       	movw	r24, r26
     93e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     942:	dc 01       	movw	r26, r24
     944:	cb 01       	movw	r24, r22
     946:	9c 01       	movw	r18, r24
     948:	ad 01       	movw	r20, r26
     94a:	69 81       	ldd	r22, Y+1	; 0x01
     94c:	7a 81       	ldd	r23, Y+2	; 0x02
     94e:	8b 81       	ldd	r24, Y+3	; 0x03
     950:	9c 81       	ldd	r25, Y+4	; 0x04
     952:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     956:	dc 01       	movw	r26, r24
     958:	cb 01       	movw	r24, r22
     95a:	6c 01       	movw	r12, r24
     95c:	7d 01       	movw	r14, r26
     95e:	8d a5       	ldd	r24, Y+45	; 0x2d
     960:	88 2f       	mov	r24, r24
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	09 2e       	mov	r0, r25
     966:	00 0c       	add	r0, r0
     968:	aa 0b       	sbc	r26, r26
     96a:	bb 0b       	sbc	r27, r27
     96c:	bc 01       	movw	r22, r24
     96e:	cd 01       	movw	r24, r26
     970:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     974:	dc 01       	movw	r26, r24
     976:	cb 01       	movw	r24, r22
     978:	9c 01       	movw	r18, r24
     97a:	ad 01       	movw	r20, r26
     97c:	c7 01       	movw	r24, r14
     97e:	b6 01       	movw	r22, r12
     980:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     984:	dc 01       	movw	r26, r24
     986:	cb 01       	movw	r24, r22
     988:	6c 01       	movw	r12, r24
     98a:	7d 01       	movw	r14, r26
     98c:	8e a5       	ldd	r24, Y+46	; 0x2e
     98e:	88 2f       	mov	r24, r24
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a0 e0       	ldi	r26, 0x00	; 0
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	bc 01       	movw	r22, r24
     998:	cd 01       	movw	r24, r26
     99a:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e2       	ldi	r20, 0x20	; 32
     9a8:	51 e4       	ldi	r21, 0x41	; 65
     9aa:	bc 01       	movw	r22, r24
     9ac:	cd 01       	movw	r24, r26
     9ae:	0e 94 47 11 	call	0x228e	; 0x228e <__divsf3>
     9b2:	dc 01       	movw	r26, r24
     9b4:	cb 01       	movw	r24, r22
     9b6:	9c 01       	movw	r18, r24
     9b8:	ad 01       	movw	r20, r26
     9ba:	c7 01       	movw	r24, r14
     9bc:	b6 01       	movw	r22, r12
     9be:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     9c2:	dc 01       	movw	r26, r24
     9c4:	cb 01       	movw	r24, r22
     9c6:	6c 01       	movw	r12, r24
     9c8:	7d 01       	movw	r14, r26
     9ca:	8f a5       	ldd	r24, Y+47	; 0x2f
     9cc:	88 2f       	mov	r24, r24
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	bc 01       	movw	r22, r24
     9d6:	cd 01       	movw	r24, r26
     9d8:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
     9dc:	dc 01       	movw	r26, r24
     9de:	cb 01       	movw	r24, r22
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	48 ec       	ldi	r20, 0xC8	; 200
     9e6:	52 e4       	ldi	r21, 0x42	; 66
     9e8:	bc 01       	movw	r22, r24
     9ea:	cd 01       	movw	r24, r26
     9ec:	0e 94 47 11 	call	0x228e	; 0x228e <__divsf3>
     9f0:	dc 01       	movw	r26, r24
     9f2:	cb 01       	movw	r24, r22
     9f4:	9c 01       	movw	r18, r24
     9f6:	ad 01       	movw	r20, r26
     9f8:	c7 01       	movw	r24, r14
     9fa:	b6 01       	movw	r22, r12
     9fc:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     a00:	dc 01       	movw	r26, r24
     a02:	cb 01       	movw	r24, r22
     a04:	20 e0       	ldi	r18, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	4a e7       	ldi	r20, 0x7A	; 122
     a0a:	54 e4       	ldi	r21, 0x44	; 68
     a0c:	bc 01       	movw	r22, r24
     a0e:	cd 01       	movw	r24, r26
     a10:	0e 94 96 12 	call	0x252c	; 0x252c <__mulsf3>
     a14:	dc 01       	movw	r26, r24
     a16:	cb 01       	movw	r24, r22
     a18:	bc 01       	movw	r22, r24
     a1a:	cd 01       	movw	r24, r26
     a1c:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	88 ab       	std	Y+48, r24	; 0x30
		
		for (int i = 0; i < 2; i++)
     a26:	18 86       	std	Y+8, r1	; 0x08
     a28:	1f 82       	std	Y+7, r1	; 0x07
     a2a:	10 c0       	rjmp	.+32     	; 0xa4c <main+0x3ec>
		{
			USART0SendByte(Ziffern[i] + 0x30);
     a2c:	9e 01       	movw	r18, r28
     a2e:	24 5d       	subi	r18, 0xD4	; 212
     a30:	3f 4f       	sbci	r19, 0xFF	; 255
     a32:	8f 81       	ldd	r24, Y+7	; 0x07
     a34:	98 85       	ldd	r25, Y+8	; 0x08
     a36:	82 0f       	add	r24, r18
     a38:	93 1f       	adc	r25, r19
     a3a:	fc 01       	movw	r30, r24
     a3c:	80 81       	ld	r24, Z
     a3e:	80 5d       	subi	r24, 0xD0	; 208
     a40:	a4 db       	rcall	.-2232   	; 0x18a <USART0SendByte>
		Ziffern[1] = TEMP  - Ziffern[0] * 10;
		Ziffern[2] = (TEMP - Ziffern[0] * 10 -  Ziffern[1]) * 10;
		Ziffern[3] = (TEMP - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
		Ziffern[4] = (TEMP - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0) -  ((double)Ziffern[3] / 100.0)) * 1000;
		
		for (int i = 0; i < 2; i++)
     a42:	8f 81       	ldd	r24, Y+7	; 0x07
     a44:	98 85       	ldd	r25, Y+8	; 0x08
     a46:	01 96       	adiw	r24, 0x01	; 1
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	8f 83       	std	Y+7, r24	; 0x07
     a4c:	8f 81       	ldd	r24, Y+7	; 0x07
     a4e:	98 85       	ldd	r25, Y+8	; 0x08
     a50:	02 97       	sbiw	r24, 0x02	; 2
		{
			USART0SendByte(Ziffern[i] + 0x30);
		}
		USART0SendByte(0x2E);
     a52:	64 f3       	brlt	.-40     	; 0xa2c <main+0x3cc>
     a54:	8e e2       	ldi	r24, 0x2E	; 46
     a56:	99 db       	rcall	.-2254   	; 0x18a <USART0SendByte>
		for (int i = 0; i < 3; i++)
     a58:	1a 86       	std	Y+10, r1	; 0x0a
     a5a:	19 86       	std	Y+9, r1	; 0x09
     a5c:	11 c0       	rjmp	.+34     	; 0xa80 <main+0x420>
		{
			USART0SendByte(Ziffern[i+2] + 0x30);
     a5e:	89 85       	ldd	r24, Y+9	; 0x09
     a60:	9a 85       	ldd	r25, Y+10	; 0x0a
     a62:	02 96       	adiw	r24, 0x02	; 2
     a64:	9e 01       	movw	r18, r28
     a66:	24 5d       	subi	r18, 0xD4	; 212
     a68:	3f 4f       	sbci	r19, 0xFF	; 255
     a6a:	82 0f       	add	r24, r18
     a6c:	93 1f       	adc	r25, r19
     a6e:	fc 01       	movw	r30, r24
     a70:	80 81       	ld	r24, Z
     a72:	80 5d       	subi	r24, 0xD0	; 208
     a74:	8a db       	rcall	.-2284   	; 0x18a <USART0SendByte>
		for (int i = 0; i < 2; i++)
		{
			USART0SendByte(Ziffern[i] + 0x30);
		}
		USART0SendByte(0x2E);
		for (int i = 0; i < 3; i++)
     a76:	89 85       	ldd	r24, Y+9	; 0x09
     a78:	9a 85       	ldd	r25, Y+10	; 0x0a
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	9a 87       	std	Y+10, r25	; 0x0a
     a7e:	89 87       	std	Y+9, r24	; 0x09
     a80:	89 85       	ldd	r24, Y+9	; 0x09
     a82:	9a 85       	ldd	r25, Y+10	; 0x0a
		{
			USART0SendByte(Ziffern[i+2] + 0x30);
		}
		
		USART0SendByte(',');
     a84:	03 97       	sbiw	r24, 0x03	; 3
     a86:	5c f3       	brlt	.-42     	; 0xa5e <main+0x3fe>
     a88:	8c e2       	ldi	r24, 0x2C	; 44
		USART0SendByte(' ');
     a8a:	7f db       	rcall	.-2306   	; 0x18a <USART0SendByte>
     a8c:	80 e2       	ldi	r24, 0x20	; 32
     a8e:	7d db       	rcall	.-2310   	; 0x18a <USART0SendByte>
		
		PRESS = PRESS / 100;
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	48 ec       	ldi	r20, 0xC8	; 200
     a96:	52 e4       	ldi	r21, 0x42	; 66
     a98:	6e 89       	ldd	r22, Y+22	; 0x16
     a9a:	7f 89       	ldd	r23, Y+23	; 0x17
     a9c:	88 8d       	ldd	r24, Y+24	; 0x18
     a9e:	99 8d       	ldd	r25, Y+25	; 0x19
     aa0:	0e 94 47 11 	call	0x228e	; 0x228e <__divsf3>
     aa4:	dc 01       	movw	r26, r24
     aa6:	cb 01       	movw	r24, r22
     aa8:	8e 8b       	std	Y+22, r24	; 0x16
     aaa:	9f 8b       	std	Y+23, r25	; 0x17
     aac:	a8 8f       	std	Y+24, r26	; 0x18
     aae:	b9 8f       	std	Y+25, r27	; 0x19
		Ziffern[0] = PRESS / 1000;
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	4a e7       	ldi	r20, 0x7A	; 122
     ab6:	54 e4       	ldi	r21, 0x44	; 68
     ab8:	6e 89       	ldd	r22, Y+22	; 0x16
     aba:	7f 89       	ldd	r23, Y+23	; 0x17
     abc:	88 8d       	ldd	r24, Y+24	; 0x18
     abe:	99 8d       	ldd	r25, Y+25	; 0x19
     ac0:	0e 94 47 11 	call	0x228e	; 0x228e <__divsf3>
     ac4:	dc 01       	movw	r26, r24
     ac6:	cb 01       	movw	r24, r22
     ac8:	bc 01       	movw	r22, r24
     aca:	cd 01       	movw	r24, r26
     acc:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     ad0:	dc 01       	movw	r26, r24
     ad2:	cb 01       	movw	r24, r22
     ad4:	8c a7       	std	Y+44, r24	; 0x2c
		Ziffern[1] = (PRESS - Ziffern[0] * 1000) / 100; 
     ad6:	8c a5       	ldd	r24, Y+44	; 0x2c
     ad8:	48 2f       	mov	r20, r24
     ada:	50 e0       	ldi	r21, 0x00	; 0
     adc:	28 ee       	ldi	r18, 0xE8	; 232
     ade:	33 e0       	ldi	r19, 0x03	; 3
     ae0:	42 9f       	mul	r20, r18
     ae2:	c0 01       	movw	r24, r0
     ae4:	43 9f       	mul	r20, r19
     ae6:	90 0d       	add	r25, r0
     ae8:	52 9f       	mul	r21, r18
     aea:	90 0d       	add	r25, r0
     aec:	11 24       	eor	r1, r1
     aee:	09 2e       	mov	r0, r25
     af0:	00 0c       	add	r0, r0
     af2:	aa 0b       	sbc	r26, r26
     af4:	bb 0b       	sbc	r27, r27
     af6:	bc 01       	movw	r22, r24
     af8:	cd 01       	movw	r24, r26
     afa:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     afe:	dc 01       	movw	r26, r24
     b00:	cb 01       	movw	r24, r22
     b02:	9c 01       	movw	r18, r24
     b04:	ad 01       	movw	r20, r26
     b06:	6e 89       	ldd	r22, Y+22	; 0x16
     b08:	7f 89       	ldd	r23, Y+23	; 0x17
     b0a:	88 8d       	ldd	r24, Y+24	; 0x18
     b0c:	99 8d       	ldd	r25, Y+25	; 0x19
     b0e:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     b12:	dc 01       	movw	r26, r24
     b14:	cb 01       	movw	r24, r22
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	48 ec       	ldi	r20, 0xC8	; 200
     b1c:	52 e4       	ldi	r21, 0x42	; 66
     b1e:	bc 01       	movw	r22, r24
     b20:	cd 01       	movw	r24, r26
     b22:	0e 94 47 11 	call	0x228e	; 0x228e <__divsf3>
     b26:	dc 01       	movw	r26, r24
     b28:	cb 01       	movw	r24, r22
     b2a:	bc 01       	movw	r22, r24
     b2c:	cd 01       	movw	r24, r26
     b2e:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     b32:	dc 01       	movw	r26, r24
     b34:	cb 01       	movw	r24, r22
     b36:	8d a7       	std	Y+45, r24	; 0x2d
		Ziffern[2] = (PRESS - Ziffern[0] * 1000 - Ziffern[1] * 100) / 10; 
     b38:	8c a5       	ldd	r24, Y+44	; 0x2c
     b3a:	48 2f       	mov	r20, r24
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	28 ee       	ldi	r18, 0xE8	; 232
     b40:	33 e0       	ldi	r19, 0x03	; 3
     b42:	42 9f       	mul	r20, r18
     b44:	c0 01       	movw	r24, r0
     b46:	43 9f       	mul	r20, r19
     b48:	90 0d       	add	r25, r0
     b4a:	52 9f       	mul	r21, r18
     b4c:	90 0d       	add	r25, r0
     b4e:	11 24       	eor	r1, r1
     b50:	09 2e       	mov	r0, r25
     b52:	00 0c       	add	r0, r0
     b54:	aa 0b       	sbc	r26, r26
     b56:	bb 0b       	sbc	r27, r27
     b58:	bc 01       	movw	r22, r24
     b5a:	cd 01       	movw	r24, r26
     b5c:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	9c 01       	movw	r18, r24
     b66:	ad 01       	movw	r20, r26
     b68:	6e 89       	ldd	r22, Y+22	; 0x16
     b6a:	7f 89       	ldd	r23, Y+23	; 0x17
     b6c:	88 8d       	ldd	r24, Y+24	; 0x18
     b6e:	99 8d       	ldd	r25, Y+25	; 0x19
     b70:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	6c 01       	movw	r12, r24
     b7a:	7d 01       	movw	r14, r26
     b7c:	8d a5       	ldd	r24, Y+45	; 0x2d
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	44 e6       	ldi	r20, 0x64	; 100
     b84:	42 9f       	mul	r20, r18
     b86:	c0 01       	movw	r24, r0
     b88:	43 9f       	mul	r20, r19
     b8a:	90 0d       	add	r25, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	09 2e       	mov	r0, r25
     b90:	00 0c       	add	r0, r0
     b92:	aa 0b       	sbc	r26, r26
     b94:	bb 0b       	sbc	r27, r27
     b96:	bc 01       	movw	r22, r24
     b98:	cd 01       	movw	r24, r26
     b9a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     b9e:	dc 01       	movw	r26, r24
     ba0:	cb 01       	movw	r24, r22
     ba2:	9c 01       	movw	r18, r24
     ba4:	ad 01       	movw	r20, r26
     ba6:	c7 01       	movw	r24, r14
     ba8:	b6 01       	movw	r22, r12
     baa:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e2       	ldi	r20, 0x20	; 32
     bb8:	51 e4       	ldi	r21, 0x41	; 65
     bba:	bc 01       	movw	r22, r24
     bbc:	cd 01       	movw	r24, r26
     bbe:	0e 94 47 11 	call	0x228e	; 0x228e <__divsf3>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	bc 01       	movw	r22, r24
     bc8:	cd 01       	movw	r24, r26
     bca:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     bce:	dc 01       	movw	r26, r24
     bd0:	cb 01       	movw	r24, r22
     bd2:	8e a7       	std	Y+46, r24	; 0x2e
		Ziffern[3] = (PRESS - Ziffern[0] * 1000 - Ziffern[1] * 100 - Ziffern[2] * 10); 
     bd4:	8c a5       	ldd	r24, Y+44	; 0x2c
     bd6:	48 2f       	mov	r20, r24
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	28 ee       	ldi	r18, 0xE8	; 232
     bdc:	33 e0       	ldi	r19, 0x03	; 3
     bde:	42 9f       	mul	r20, r18
     be0:	c0 01       	movw	r24, r0
     be2:	43 9f       	mul	r20, r19
     be4:	90 0d       	add	r25, r0
     be6:	52 9f       	mul	r21, r18
     be8:	90 0d       	add	r25, r0
     bea:	11 24       	eor	r1, r1
     bec:	09 2e       	mov	r0, r25
     bee:	00 0c       	add	r0, r0
     bf0:	aa 0b       	sbc	r26, r26
     bf2:	bb 0b       	sbc	r27, r27
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9c 01       	movw	r18, r24
     c02:	ad 01       	movw	r20, r26
     c04:	6e 89       	ldd	r22, Y+22	; 0x16
     c06:	7f 89       	ldd	r23, Y+23	; 0x17
     c08:	88 8d       	ldd	r24, Y+24	; 0x18
     c0a:	99 8d       	ldd	r25, Y+25	; 0x19
     c0c:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     c10:	dc 01       	movw	r26, r24
     c12:	cb 01       	movw	r24, r22
     c14:	6c 01       	movw	r12, r24
     c16:	7d 01       	movw	r14, r26
     c18:	8d a5       	ldd	r24, Y+45	; 0x2d
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	44 e6       	ldi	r20, 0x64	; 100
     c20:	42 9f       	mul	r20, r18
     c22:	c0 01       	movw	r24, r0
     c24:	43 9f       	mul	r20, r19
     c26:	90 0d       	add	r25, r0
     c28:	11 24       	eor	r1, r1
     c2a:	09 2e       	mov	r0, r25
     c2c:	00 0c       	add	r0, r0
     c2e:	aa 0b       	sbc	r26, r26
     c30:	bb 0b       	sbc	r27, r27
     c32:	bc 01       	movw	r22, r24
     c34:	cd 01       	movw	r24, r26
     c36:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     c3a:	dc 01       	movw	r26, r24
     c3c:	cb 01       	movw	r24, r22
     c3e:	9c 01       	movw	r18, r24
     c40:	ad 01       	movw	r20, r26
     c42:	c7 01       	movw	r24, r14
     c44:	b6 01       	movw	r22, r12
     c46:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	6c 01       	movw	r12, r24
     c50:	7d 01       	movw	r14, r26
     c52:	8e a5       	ldd	r24, Y+46	; 0x2e
     c54:	88 2f       	mov	r24, r24
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	9c 01       	movw	r18, r24
     c5e:	22 0f       	add	r18, r18
     c60:	33 1f       	adc	r19, r19
     c62:	22 0f       	add	r18, r18
     c64:	33 1f       	adc	r19, r19
     c66:	82 0f       	add	r24, r18
     c68:	93 1f       	adc	r25, r19
     c6a:	09 2e       	mov	r0, r25
     c6c:	00 0c       	add	r0, r0
     c6e:	aa 0b       	sbc	r26, r26
     c70:	bb 0b       	sbc	r27, r27
     c72:	bc 01       	movw	r22, r24
     c74:	cd 01       	movw	r24, r26
     c76:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     c7a:	dc 01       	movw	r26, r24
     c7c:	cb 01       	movw	r24, r22
     c7e:	9c 01       	movw	r18, r24
     c80:	ad 01       	movw	r20, r26
     c82:	c7 01       	movw	r24, r14
     c84:	b6 01       	movw	r22, r12
     c86:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     c8a:	dc 01       	movw	r26, r24
     c8c:	cb 01       	movw	r24, r22
     c8e:	bc 01       	movw	r22, r24
     c90:	cd 01       	movw	r24, r26
     c92:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     c96:	dc 01       	movw	r26, r24
     c98:	cb 01       	movw	r24, r22
     c9a:	8f a7       	std	Y+47, r24	; 0x2f
		for(int i = 0; i < 10; i++)
     c9c:	1c 86       	std	Y+12, r1	; 0x0c
     c9e:	1b 86       	std	Y+11, r1	; 0x0b
		{
			USART0SendByte(PRESSURE[i]);
     ca0:	0f c0       	rjmp	.+30     	; 0xcc0 <main+0x660>
     ca2:	9e 01       	movw	r18, r28
     ca4:	2e 5b       	subi	r18, 0xBE	; 190
     ca6:	3f 4f       	sbci	r19, 0xFF	; 255
     ca8:	8b 85       	ldd	r24, Y+11	; 0x0b
     caa:	9c 85       	ldd	r25, Y+12	; 0x0c
     cac:	82 0f       	add	r24, r18
     cae:	93 1f       	adc	r25, r19
     cb0:	fc 01       	movw	r30, r24
     cb2:	80 81       	ld	r24, Z
     cb4:	6a da       	rcall	.-2860   	; 0x18a <USART0SendByte>
		PRESS = PRESS / 100;
		Ziffern[0] = PRESS / 1000;
		Ziffern[1] = (PRESS - Ziffern[0] * 1000) / 100; 
		Ziffern[2] = (PRESS - Ziffern[0] * 1000 - Ziffern[1] * 100) / 10; 
		Ziffern[3] = (PRESS - Ziffern[0] * 1000 - Ziffern[1] * 100 - Ziffern[2] * 10); 
		for(int i = 0; i < 10; i++)
     cb6:	8b 85       	ldd	r24, Y+11	; 0x0b
     cb8:	9c 85       	ldd	r25, Y+12	; 0x0c
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	9c 87       	std	Y+12, r25	; 0x0c
     cbe:	8b 87       	std	Y+11, r24	; 0x0b
     cc0:	8b 85       	ldd	r24, Y+11	; 0x0b
     cc2:	9c 85       	ldd	r25, Y+12	; 0x0c
     cc4:	0a 97       	sbiw	r24, 0x0a	; 10
     cc6:	6c f3       	brlt	.-38     	; 0xca2 <main+0x642>
		{
			USART0SendByte(PRESSURE[i]);
		}
		for (int i = 0; i < 4; i++)
     cc8:	1e 86       	std	Y+14, r1	; 0x0e
     cca:	1d 86       	std	Y+13, r1	; 0x0d
		{
			USART0SendByte(Ziffern[i] + 0x30);
     ccc:	10 c0       	rjmp	.+32     	; 0xcee <main+0x68e>
     cce:	9e 01       	movw	r18, r28
     cd0:	24 5d       	subi	r18, 0xD4	; 212
     cd2:	3f 4f       	sbci	r19, 0xFF	; 255
     cd4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd8:	82 0f       	add	r24, r18
     cda:	93 1f       	adc	r25, r19
     cdc:	fc 01       	movw	r30, r24
     cde:	80 81       	ld	r24, Z
     ce0:	80 5d       	subi	r24, 0xD0	; 208
		Ziffern[3] = (PRESS - Ziffern[0] * 1000 - Ziffern[1] * 100 - Ziffern[2] * 10); 
		for(int i = 0; i < 10; i++)
		{
			USART0SendByte(PRESSURE[i]);
		}
		for (int i = 0; i < 4; i++)
     ce2:	53 da       	rcall	.-2906   	; 0x18a <USART0SendByte>
     ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	9e 87       	std	Y+14, r25	; 0x0e
     cec:	8d 87       	std	Y+13, r24	; 0x0d
     cee:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf0:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf2:	04 97       	sbiw	r24, 0x04	; 4
		{
			USART0SendByte(Ziffern[i] + 0x30);
		}
		
		USART0SendByte(',');
     cf4:	64 f3       	brlt	.-40     	; 0xcce <main+0x66e>
     cf6:	8c e2       	ldi	r24, 0x2C	; 44
     cf8:	48 da       	rcall	.-2928   	; 0x18a <USART0SendByte>
		USART0SendByte(' ');
     cfa:	80 e2       	ldi	r24, 0x20	; 32
     cfc:	46 da       	rcall	.-2932   	; 0x18a <USART0SendByte>
     cfe:	20 e0       	ldi	r18, 0x00	; 0
		
		Ziffern[0] = HUM / 10;
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e2       	ldi	r20, 0x20	; 32
     d04:	51 e4       	ldi	r21, 0x41	; 65
     d06:	6a 8d       	ldd	r22, Y+26	; 0x1a
     d08:	7b 8d       	ldd	r23, Y+27	; 0x1b
     d0a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d0c:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d0e:	0e 94 47 11 	call	0x228e	; 0x228e <__divsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	bc 01       	movw	r22, r24
     d18:	cd 01       	movw	r24, r26
     d1a:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     d1e:	dc 01       	movw	r26, r24
     d20:	cb 01       	movw	r24, r22
     d22:	8c a7       	std	Y+44, r24	; 0x2c
     d24:	8c a5       	ldd	r24, Y+44	; 0x2c
		Ziffern[1] = HUM  - Ziffern[0] * 10;
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	9c 01       	movw	r18, r24
     d30:	22 0f       	add	r18, r18
     d32:	33 1f       	adc	r19, r19
     d34:	22 0f       	add	r18, r18
     d36:	33 1f       	adc	r19, r19
     d38:	82 0f       	add	r24, r18
     d3a:	93 1f       	adc	r25, r19
     d3c:	09 2e       	mov	r0, r25
     d3e:	00 0c       	add	r0, r0
     d40:	aa 0b       	sbc	r26, r26
     d42:	bb 0b       	sbc	r27, r27
     d44:	bc 01       	movw	r22, r24
     d46:	cd 01       	movw	r24, r26
     d48:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	9c 01       	movw	r18, r24
     d52:	ad 01       	movw	r20, r26
     d54:	6a 8d       	ldd	r22, Y+26	; 0x1a
     d56:	7b 8d       	ldd	r23, Y+27	; 0x1b
     d58:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d5c:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	bc 01       	movw	r22, r24
     d66:	cd 01       	movw	r24, r26
     d68:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	8d a7       	std	Y+45, r24	; 0x2d
     d72:	8c a5       	ldd	r24, Y+44	; 0x2c
		Ziffern[2] = (HUM - Ziffern[0] * 10 -  Ziffern[1]) * 10;
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	9c 01       	movw	r18, r24
     d7e:	22 0f       	add	r18, r18
     d80:	33 1f       	adc	r19, r19
     d82:	22 0f       	add	r18, r18
     d84:	33 1f       	adc	r19, r19
     d86:	82 0f       	add	r24, r18
     d88:	93 1f       	adc	r25, r19
     d8a:	09 2e       	mov	r0, r25
     d8c:	00 0c       	add	r0, r0
     d8e:	aa 0b       	sbc	r26, r26
     d90:	bb 0b       	sbc	r27, r27
     d92:	bc 01       	movw	r22, r24
     d94:	cd 01       	movw	r24, r26
     d96:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     d9a:	dc 01       	movw	r26, r24
     d9c:	cb 01       	movw	r24, r22
     d9e:	9c 01       	movw	r18, r24
     da0:	ad 01       	movw	r20, r26
     da2:	6a 8d       	ldd	r22, Y+26	; 0x1a
     da4:	7b 8d       	ldd	r23, Y+27	; 0x1b
     da6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     da8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     daa:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	6c 01       	movw	r12, r24
     db4:	7d 01       	movw	r14, r26
     db6:	8d a5       	ldd	r24, Y+45	; 0x2d
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	09 2e       	mov	r0, r25
     dbe:	00 0c       	add	r0, r0
     dc0:	aa 0b       	sbc	r26, r26
     dc2:	bb 0b       	sbc	r27, r27
     dc4:	bc 01       	movw	r22, r24
     dc6:	cd 01       	movw	r24, r26
     dc8:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     dcc:	dc 01       	movw	r26, r24
     dce:	cb 01       	movw	r24, r22
     dd0:	9c 01       	movw	r18, r24
     dd2:	ad 01       	movw	r20, r26
     dd4:	c7 01       	movw	r24, r14
     dd6:	b6 01       	movw	r22, r12
     dd8:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e2       	ldi	r20, 0x20	; 32
     de6:	51 e4       	ldi	r21, 0x41	; 65
     de8:	bc 01       	movw	r22, r24
     dea:	cd 01       	movw	r24, r26
     dec:	0e 94 96 12 	call	0x252c	; 0x252c <__mulsf3>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	bc 01       	movw	r22, r24
     df6:	cd 01       	movw	r24, r26
     df8:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	8e a7       	std	Y+46, r24	; 0x2e
     e02:	8c a5       	ldd	r24, Y+44	; 0x2c
		Ziffern[3] = (HUM - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
     e04:	88 2f       	mov	r24, r24
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	9c 01       	movw	r18, r24
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	22 0f       	add	r18, r18
     e14:	33 1f       	adc	r19, r19
     e16:	82 0f       	add	r24, r18
     e18:	93 1f       	adc	r25, r19
     e1a:	09 2e       	mov	r0, r25
     e1c:	00 0c       	add	r0, r0
     e1e:	aa 0b       	sbc	r26, r26
     e20:	bb 0b       	sbc	r27, r27
     e22:	bc 01       	movw	r22, r24
     e24:	cd 01       	movw	r24, r26
     e26:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	9c 01       	movw	r18, r24
     e30:	ad 01       	movw	r20, r26
     e32:	6a 8d       	ldd	r22, Y+26	; 0x1a
     e34:	7b 8d       	ldd	r23, Y+27	; 0x1b
     e36:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e38:	9d 8d       	ldd	r25, Y+29	; 0x1d
     e3a:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	6c 01       	movw	r12, r24
     e44:	7d 01       	movw	r14, r26
     e46:	8d a5       	ldd	r24, Y+45	; 0x2d
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	09 2e       	mov	r0, r25
     e4e:	00 0c       	add	r0, r0
     e50:	aa 0b       	sbc	r26, r26
     e52:	bb 0b       	sbc	r27, r27
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	9c 01       	movw	r18, r24
     e62:	ad 01       	movw	r20, r26
     e64:	c7 01       	movw	r24, r14
     e66:	b6 01       	movw	r22, r12
     e68:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	6c 01       	movw	r12, r24
     e72:	7d 01       	movw	r14, r26
     e74:	8e a5       	ldd	r24, Y+46	; 0x2e
     e76:	88 2f       	mov	r24, r24
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	bc 01       	movw	r22, r24
     e80:	cd 01       	movw	r24, r26
     e82:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
     e86:	dc 01       	movw	r26, r24
     e88:	cb 01       	movw	r24, r22
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	40 e2       	ldi	r20, 0x20	; 32
     e90:	51 e4       	ldi	r21, 0x41	; 65
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	0e 94 47 11 	call	0x228e	; 0x228e <__divsf3>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	9c 01       	movw	r18, r24
     ea0:	ad 01       	movw	r20, r26
     ea2:	c7 01       	movw	r24, r14
     ea4:	b6 01       	movw	r22, r12
     ea6:	0e 94 de 10 	call	0x21bc	; 0x21bc <__subsf3>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	20 e0       	ldi	r18, 0x00	; 0
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	48 ec       	ldi	r20, 0xC8	; 200
     eb4:	52 e4       	ldi	r21, 0x42	; 66
     eb6:	bc 01       	movw	r22, r24
     eb8:	cd 01       	movw	r24, r26
     eba:	0e 94 96 12 	call	0x252c	; 0x252c <__mulsf3>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	bc 01       	movw	r22, r24
     ec4:	cd 01       	movw	r24, r26
     ec6:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	8f a7       	std	Y+47, r24	; 0x2f
		for(int i = 0; i < 10; i++)
     ed0:	18 8a       	std	Y+16, r1	; 0x10
     ed2:	1f 86       	std	Y+15, r1	; 0x0f
     ed4:	0f c0       	rjmp	.+30     	; 0xef4 <main+0x894>
		{
			USART0SendByte(HUMIDITY[i]);
     ed6:	9e 01       	movw	r18, r28
     ed8:	24 5b       	subi	r18, 0xB4	; 180
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	8f 85       	ldd	r24, Y+15	; 0x0f
     ede:	98 89       	ldd	r25, Y+16	; 0x10
     ee0:	82 0f       	add	r24, r18
     ee2:	93 1f       	adc	r25, r19
     ee4:	fc 01       	movw	r30, r24
     ee6:	80 81       	ld	r24, Z
     ee8:	50 d9       	rcall	.-3424   	; 0x18a <USART0SendByte>
     eea:	8f 85       	ldd	r24, Y+15	; 0x0f
		
		Ziffern[0] = HUM / 10;
		Ziffern[1] = HUM  - Ziffern[0] * 10;
		Ziffern[2] = (HUM - Ziffern[0] * 10 -  Ziffern[1]) * 10;
		Ziffern[3] = (HUM - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
		for(int i = 0; i < 10; i++)
     eec:	98 89       	ldd	r25, Y+16	; 0x10
     eee:	01 96       	adiw	r24, 0x01	; 1
     ef0:	98 8b       	std	Y+16, r25	; 0x10
     ef2:	8f 87       	std	Y+15, r24	; 0x0f
     ef4:	8f 85       	ldd	r24, Y+15	; 0x0f
     ef6:	98 89       	ldd	r25, Y+16	; 0x10
     ef8:	0a 97       	sbiw	r24, 0x0a	; 10
     efa:	6c f3       	brlt	.-38     	; 0xed6 <main+0x876>
		{
			USART0SendByte(HUMIDITY[i]);
		}
		for (int i = 0; i < 2; i++)
     efc:	1a 8a       	std	Y+18, r1	; 0x12
     efe:	19 8a       	std	Y+17, r1	; 0x11
     f00:	10 c0       	rjmp	.+32     	; 0xf22 <main+0x8c2>
		{
			USART0SendByte(Ziffern[i] + 0x30);
     f02:	9e 01       	movw	r18, r28
     f04:	24 5d       	subi	r18, 0xD4	; 212
     f06:	3f 4f       	sbci	r19, 0xFF	; 255
     f08:	89 89       	ldd	r24, Y+17	; 0x11
     f0a:	9a 89       	ldd	r25, Y+18	; 0x12
     f0c:	82 0f       	add	r24, r18
     f0e:	93 1f       	adc	r25, r19
     f10:	fc 01       	movw	r30, r24
     f12:	80 81       	ld	r24, Z
     f14:	80 5d       	subi	r24, 0xD0	; 208
     f16:	39 d9       	rcall	.-3470   	; 0x18a <USART0SendByte>
		Ziffern[3] = (HUM - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
		for(int i = 0; i < 10; i++)
		{
			USART0SendByte(HUMIDITY[i]);
		}
		for (int i = 0; i < 2; i++)
     f18:	89 89       	ldd	r24, Y+17	; 0x11
     f1a:	9a 89       	ldd	r25, Y+18	; 0x12
     f1c:	01 96       	adiw	r24, 0x01	; 1
     f1e:	9a 8b       	std	Y+18, r25	; 0x12
     f20:	89 8b       	std	Y+17, r24	; 0x11
     f22:	89 89       	ldd	r24, Y+17	; 0x11
     f24:	9a 89       	ldd	r25, Y+18	; 0x12
     f26:	02 97       	sbiw	r24, 0x02	; 2
		{
			USART0SendByte(Ziffern[i] + 0x30);
		}
		USART0SendByte(0x2E);
     f28:	64 f3       	brlt	.-40     	; 0xf02 <main+0x8a2>
     f2a:	8e e2       	ldi	r24, 0x2E	; 46
     f2c:	2e d9       	rcall	.-3492   	; 0x18a <USART0SendByte>
		for (int i = 0; i < 2; i++)
     f2e:	1c 8a       	std	Y+20, r1	; 0x14
     f30:	1b 8a       	std	Y+19, r1	; 0x13
     f32:	11 c0       	rjmp	.+34     	; 0xf56 <main+0x8f6>
		{
			USART0SendByte(Ziffern[i+2] + 0x30);
     f34:	8b 89       	ldd	r24, Y+19	; 0x13
     f36:	9c 89       	ldd	r25, Y+20	; 0x14
     f38:	02 96       	adiw	r24, 0x02	; 2
     f3a:	9e 01       	movw	r18, r28
     f3c:	24 5d       	subi	r18, 0xD4	; 212
     f3e:	3f 4f       	sbci	r19, 0xFF	; 255
     f40:	82 0f       	add	r24, r18
     f42:	93 1f       	adc	r25, r19
     f44:	fc 01       	movw	r30, r24
     f46:	80 81       	ld	r24, Z
     f48:	80 5d       	subi	r24, 0xD0	; 208
     f4a:	1f d9       	rcall	.-3522   	; 0x18a <USART0SendByte>
		for (int i = 0; i < 2; i++)
		{
			USART0SendByte(Ziffern[i] + 0x30);
		}
		USART0SendByte(0x2E);
		for (int i = 0; i < 2; i++)
     f4c:	8b 89       	ldd	r24, Y+19	; 0x13
     f4e:	9c 89       	ldd	r25, Y+20	; 0x14
     f50:	01 96       	adiw	r24, 0x01	; 1
     f52:	9c 8b       	std	Y+20, r25	; 0x14
     f54:	8b 8b       	std	Y+19, r24	; 0x13
     f56:	8b 89       	ldd	r24, Y+19	; 0x13
     f58:	9c 89       	ldd	r25, Y+20	; 0x14
     f5a:	02 97       	sbiw	r24, 0x02	; 2
     f5c:	5c f3       	brlt	.-42     	; 0xf34 <main+0x8d4>
		{
			USART0SendByte(Ziffern[i+2] + 0x30);
		}
		
		USART0SendByte(0x0A);
     f5e:	8a e0       	ldi	r24, 0x0A	; 10
     f60:	14 d9       	rcall	.-3544   	; 0x18a <USART0SendByte>
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	aa ef       	ldi	r26, 0xFA	; 250
     f68:	b3 e4       	ldi	r27, 0x43	; 67
     f6a:	8e 8f       	std	Y+30, r24	; 0x1e
     f6c:	9f 8f       	std	Y+31, r25	; 0x1f
     f6e:	a8 a3       	std	Y+32, r26	; 0x20
     f70:	b9 a3       	std	Y+33, r27	; 0x21
     f72:	20 e0       	ldi	r18, 0x00	; 0

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	4a ef       	ldi	r20, 0xFA	; 250
     f78:	54 e4       	ldi	r21, 0x44	; 68
     f7a:	6e 8d       	ldd	r22, Y+30	; 0x1e
     f7c:	7f 8d       	ldd	r23, Y+31	; 0x1f
     f7e:	88 a1       	ldd	r24, Y+32	; 0x20
     f80:	99 a1       	ldd	r25, Y+33	; 0x21
     f82:	0e 94 96 12 	call	0x252c	; 0x252c <__mulsf3>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	8a a3       	std	Y+34, r24	; 0x22
     f8c:	9b a3       	std	Y+35, r25	; 0x23
     f8e:	ac a3       	std	Y+36, r26	; 0x24
     f90:	bd a3       	std	Y+37, r27	; 0x25
     f92:	20 e0       	ldi	r18, 0x00	; 0
	if (__tmp < 1.0)
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e8       	ldi	r20, 0x80	; 128
     f98:	5f e3       	ldi	r21, 0x3F	; 63
     f9a:	6a a1       	ldd	r22, Y+34	; 0x22
     f9c:	7b a1       	ldd	r23, Y+35	; 0x23
     f9e:	8c a1       	ldd	r24, Y+36	; 0x24
     fa0:	9d a1       	ldd	r25, Y+37	; 0x25
     fa2:	0e 94 43 11 	call	0x2286	; 0x2286 <__cmpsf2>
     fa6:	88 23       	and	r24, r24
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <main+0x954>
     faa:	81 e0       	ldi	r24, 0x01	; 1
		__ticks = 1;
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	9f a3       	std	Y+39, r25	; 0x27
     fb0:	8e a3       	std	Y+38, r24	; 0x26
     fb2:	3f c0       	rjmp	.+126    	; 0x1032 <__EEPROM_REGION_LENGTH__+0x32>
     fb4:	20 e0       	ldi	r18, 0x00	; 0
	else if (__tmp > 65535)
     fb6:	3f ef       	ldi	r19, 0xFF	; 255
     fb8:	4f e7       	ldi	r20, 0x7F	; 127
     fba:	57 e4       	ldi	r21, 0x47	; 71
     fbc:	6a a1       	ldd	r22, Y+34	; 0x22
     fbe:	7b a1       	ldd	r23, Y+35	; 0x23
     fc0:	8c a1       	ldd	r24, Y+36	; 0x24
     fc2:	9d a1       	ldd	r25, Y+37	; 0x25
     fc4:	0e 94 92 12 	call	0x2524	; 0x2524 <__gesf2>
     fc8:	18 16       	cp	r1, r24
     fca:	4c f5       	brge	.+82     	; 0x101e <__EEPROM_REGION_LENGTH__+0x1e>
     fcc:	20 e0       	ldi	r18, 0x00	; 0
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e2       	ldi	r20, 0x20	; 32
     fd2:	51 e4       	ldi	r21, 0x41	; 65
     fd4:	6e 8d       	ldd	r22, Y+30	; 0x1e
     fd6:	7f 8d       	ldd	r23, Y+31	; 0x1f
     fd8:	88 a1       	ldd	r24, Y+32	; 0x20
     fda:	99 a1       	ldd	r25, Y+33	; 0x21
     fdc:	0e 94 96 12 	call	0x252c	; 0x252c <__mulsf3>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	bc 01       	movw	r22, r24
     fe6:	cd 01       	movw	r24, r26
     fe8:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
     fec:	dc 01       	movw	r26, r24
     fee:	cb 01       	movw	r24, r22
     ff0:	9f a3       	std	Y+39, r25	; 0x27
     ff2:	8e a3       	std	Y+38, r24	; 0x26
     ff4:	0f c0       	rjmp	.+30     	; 0x1014 <__EEPROM_REGION_LENGTH__+0x14>
     ff6:	88 ec       	ldi	r24, 0xC8	; 200
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	99 a7       	std	Y+41, r25	; 0x29
     ffc:	88 a7       	std	Y+40, r24	; 0x28
     ffe:	88 a5       	ldd	r24, Y+40	; 0x28
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1000:	99 a5       	ldd	r25, Y+41	; 0x29
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
    1006:	99 a7       	std	Y+41, r25	; 0x29
    1008:	88 a7       	std	Y+40, r24	; 0x28
    100a:	8e a1       	ldd	r24, Y+38	; 0x26
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100c:	9f a1       	ldd	r25, Y+39	; 0x27
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	9f a3       	std	Y+39, r25	; 0x27
    1012:	8e a3       	std	Y+38, r24	; 0x26
    1014:	8e a1       	ldd	r24, Y+38	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1016:	9f a1       	ldd	r25, Y+39	; 0x27
    1018:	89 2b       	or	r24, r25
    101a:	69 f7       	brne	.-38     	; 0xff6 <main+0x996>
    101c:	14 c0       	rjmp	.+40     	; 0x1046 <__EEPROM_REGION_LENGTH__+0x46>
    101e:	6a a1       	ldd	r22, Y+34	; 0x22
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1020:	7b a1       	ldd	r23, Y+35	; 0x23
    1022:	8c a1       	ldd	r24, Y+36	; 0x24
    1024:	9d a1       	ldd	r25, Y+37	; 0x25
    1026:	0e 94 b4 11 	call	0x2368	; 0x2368 <__fixunssfsi>
    102a:	dc 01       	movw	r26, r24
    102c:	cb 01       	movw	r24, r22
    102e:	9f a3       	std	Y+39, r25	; 0x27
    1030:	8e a3       	std	Y+38, r24	; 0x26
    1032:	8e a1       	ldd	r24, Y+38	; 0x26
    1034:	9f a1       	ldd	r25, Y+39	; 0x27
    1036:	9b a7       	std	Y+43, r25	; 0x2b
    1038:	8a a7       	std	Y+42, r24	; 0x2a
    103a:	8a a5       	ldd	r24, Y+42	; 0x2a
    103c:	9b a5       	ldd	r25, Y+43	; 0x2b
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	f1 f7       	brne	.-4      	; 0x103e <__EEPROM_REGION_LENGTH__+0x3e>
    1042:	9b a7       	std	Y+43, r25	; 0x2b
    1044:	8a a7       	std	Y+42, r24	; 0x2a
    1046:	3d cb       	rjmp	.-2438   	; 0x6c2 <main+0x62>

00001048 <INIT>:
		_delay_ms(500);
    }
    1048:	cf 93       	push	r28
}

char INIT ( void )
{
    104a:	df 93       	push	r29
    104c:	1f 92       	push	r1
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
	char cRET = 0;
    1052:	19 82       	std	Y+1, r1	; 0x01
	USART0Init(103);
    1054:	87 e6       	ldi	r24, 0x67	; 103
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	65 d8       	rcall	.-3894   	; 0x124 <USART0Init>

	
	cRET = twi_init(TWI_FREQ_100K_8M);
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	dd d9       	rcall	.-3142   	; 0x418 <twi_init>
	cRET = INIT_BME();
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	0d d0       	rcall	.+26     	; 0x107c <INIT_BME>

	USART0SendByte(0x21);
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	81 e2       	ldi	r24, 0x21	; 33
    1066:	91 d8       	rcall	.-3806   	; 0x18a <USART0SendByte>
	
	if (cRET)
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	88 23       	and	r24, r24
    106c:	11 f0       	breq	.+4      	; 0x1072 <INIT+0x2a>
	{
		return 1;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <INIT+0x2c>
	}
	else
	{
		return 0;
    1072:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1074:	0f 90       	pop	r0
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	08 95       	ret

0000107c <INIT_BME>:

char INIT_BME ( void )
{
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	00 d0       	rcall	.+0      	; 0x1082 <INIT_BME+0x6>
    1082:	1f 92       	push	r1
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
	unsigned char ucInitValues[2];
	unsigned char ucIdRegister = REG_ID;
    1088:	80 ed       	ldi	r24, 0xD0	; 208
    108a:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char cID = 0;
    108c:	1c 82       	std	Y+4, r1	; 0x04
	
	twi_master_transmit(SLAVE_ADR_LOW, &ucIdRegister, 1, 0);
    108e:	ce 01       	movw	r24, r28
    1090:	03 96       	adiw	r24, 0x03	; 3
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	41 e0       	ldi	r20, 0x01	; 1
    1096:	bc 01       	movw	r22, r24
    1098:	86 e7       	ldi	r24, 0x76	; 118
    109a:	2f da       	rcall	.-2978   	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, &cID , 1);
    109c:	ce 01       	movw	r24, r28
    109e:	04 96       	adiw	r24, 0x04	; 4
    10a0:	41 e0       	ldi	r20, 0x01	; 1
    10a2:	bc 01       	movw	r22, r24
    10a4:	86 e7       	ldi	r24, 0x76	; 118
    10a6:	7e da       	rcall	.-2820   	; 0x5a4 <twi_master_receive>
	
	if (!cID)
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	88 23       	and	r24, r24
    10ac:	11 f4       	brne	.+4      	; 0x10b2 <INIT_BME+0x36>
	{
		return 1;
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	41 c0       	rjmp	.+130    	; 0x1134 <INIT_BME+0xb8>
	}
	
	/*** WRITE RESET REGISTER ***/
	ucInitValues[0] = REG_RESET;
    10b2:	80 ee       	ldi	r24, 0xE0	; 224
    10b4:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = VAL_RESET;
    10b6:	86 eb       	ldi	r24, 0xB6	; 182
    10b8:	8a 83       	std	Y+2, r24	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	42 e0       	ldi	r20, 0x02	; 2
    10be:	ce 01       	movw	r24, r28
    10c0:	01 96       	adiw	r24, 0x01	; 1
    10c2:	bc 01       	movw	r22, r24
    10c4:	86 e7       	ldi	r24, 0x76	; 118
    10c6:	19 da       	rcall	.-3022   	; 0x4fa <twi_master_transmit>
	
	/*** WRITE CTRL_HUM REGISTER ***/
	ucInitValues[0] = REG_CTRL_HUM;
    10c8:	82 e7       	ldi	r24, 0x72	; 114
    10ca:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = (0xBF & (0b00000111 & VAL_OSRS_1));
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	8a 83       	std	Y+2, r24	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	42 e0       	ldi	r20, 0x02	; 2
    10d4:	ce 01       	movw	r24, r28
    10d6:	01 96       	adiw	r24, 0x01	; 1
    10d8:	bc 01       	movw	r22, r24
    10da:	86 e7       	ldi	r24, 0x76	; 118
    10dc:	0e da       	rcall	.-3044   	; 0x4fa <twi_master_transmit>
	
	/*** WRITE CONFIG REGISTER ***/
	ucInitValues[0] = REG_CONFIG;
    10de:	85 e7       	ldi	r24, 0x75	; 117
    10e0:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = (0xFE & (0b00011100 & (VAL_FILTER_0 << 2)));
    10e2:	1a 82       	std	Y+2, r1	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	42 e0       	ldi	r20, 0x02	; 2
    10e8:	ce 01       	movw	r24, r28
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	bc 01       	movw	r22, r24
    10ee:	86 e7       	ldi	r24, 0x76	; 118
    10f0:	04 da       	rcall	.-3064   	; 0x4fa <twi_master_transmit>
	
	/*** WRITE CTRL_MEAS REGISTER ***/
	ucInitValues[0] = REG_CTRL_MEAS;
    10f2:	84 e7       	ldi	r24, 0x74	; 116
    10f4:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = ((0b00000011 & VAL_MODE_FORCED) | (0b00011100 & (VAL_OSRS_1 << 2)) | (0b11100000 & (VAL_OSRS_1 << 5)));
    10f6:	85 e2       	ldi	r24, 0x25	; 37
    10f8:	8a 83       	std	Y+2, r24	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	42 e0       	ldi	r20, 0x02	; 2
    10fe:	ce 01       	movw	r24, r28
    1100:	01 96       	adiw	r24, 0x01	; 1
    1102:	bc 01       	movw	r22, r24
    1104:	86 e7       	ldi	r24, 0x76	; 118
    1106:	f9 d9       	rcall	.-3086   	; 0x4fa <twi_master_transmit>
	
	/*** WRITE CTRL_GAS REGISTER ***/
	ucInitValues[0] = REG_CTRL_GAS_0;
    1108:	80 e7       	ldi	r24, 0x70	; 112
    110a:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = (0b00001000 & (VAL_HEAT_OFF << 3));
    110c:	88 e0       	ldi	r24, 0x08	; 8
    110e:	8a 83       	std	Y+2, r24	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	42 e0       	ldi	r20, 0x02	; 2
    1114:	ce 01       	movw	r24, r28
    1116:	01 96       	adiw	r24, 0x01	; 1
    1118:	bc 01       	movw	r22, r24
    111a:	86 e7       	ldi	r24, 0x76	; 118
    111c:	ee d9       	rcall	.-3108   	; 0x4fa <twi_master_transmit>
	
	/*** WRITE CTRL_HUM REGISTER ***/
	ucInitValues[0] = REG_CTRL_GAS_1;
    111e:	81 e7       	ldi	r24, 0x71	; 113
    1120:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = (0b00010000 & (VAL_HEAT_ON << 4));
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
    1122:	1a 82       	std	Y+2, r1	; 0x02
    1124:	20 e0       	ldi	r18, 0x00	; 0
    1126:	42 e0       	ldi	r20, 0x02	; 2
    1128:	ce 01       	movw	r24, r28
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	bc 01       	movw	r22, r24
    112e:	86 e7       	ldi	r24, 0x76	; 118
    1130:	e4 d9       	rcall	.-3128   	; 0x4fa <twi_master_transmit>
	
	return 0;
    1132:	80 e0       	ldi	r24, 0x00	; 0
}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret

00001142 <START_CONVERSION>:

void START_CONVERSION ( void )
{
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	00 d0       	rcall	.+0      	; 0x1148 <START_CONVERSION+0x6>
    1148:	1f 92       	push	r1
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
	unsigned char ucInitValues[2];
	
	ucInitValues[0] = REG_CTRL_MEAS;
    114e:	84 e7       	ldi	r24, 0x74	; 116
    1150:	8b 83       	std	Y+3, r24	; 0x03
	ucInitValues[1] = ((0b00000011 & VAL_MODE_FORCED) | (0b00011100 & (VAL_OSRS_1 << 2)) | (0b11100000 & (VAL_OSRS_1 << 5)));
    1152:	85 e2       	ldi	r24, 0x25	; 37
    1154:	8c 83       	std	Y+4, r24	; 0x04
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
    1156:	ce 01       	movw	r24, r28
    1158:	03 96       	adiw	r24, 0x03	; 3
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	42 e0       	ldi	r20, 0x02	; 2
    115e:	bc 01       	movw	r22, r24
    1160:	86 e7       	ldi	r24, 0x76	; 118
    1162:	cb d9       	rcall	.-3178   	; 0x4fa <twi_master_transmit>
	for(int i = 0; i < 50; i++)
    1164:	1a 82       	std	Y+2, r1	; 0x02
    1166:	19 82       	std	Y+1, r1	; 0x01
    1168:	06 c0       	rjmp	.+12     	; 0x1176 <START_CONVERSION+0x34>
	{
		asm("nop");
    116a:	00 00       	nop
	unsigned char ucInitValues[2];
	
	ucInitValues[0] = REG_CTRL_MEAS;
	ucInitValues[1] = ((0b00000011 & VAL_MODE_FORCED) | (0b00011100 & (VAL_OSRS_1 << 2)) | (0b11100000 & (VAL_OSRS_1 << 5)));
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
	for(int i = 0; i < 50; i++)
    116c:	89 81       	ldd	r24, Y+1	; 0x01
    116e:	9a 81       	ldd	r25, Y+2	; 0x02
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	c2 97       	sbiw	r24, 0x32	; 50
    117c:	b4 f3       	brlt	.-20     	; 0x116a <START_CONVERSION+0x28>
	{
		asm("nop");
	}
}
    117e:	00 00       	nop
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	08 95       	ret

0000118e <READ_TEMP_F>:

float READ_TEMP_F ( void )
{
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	00 d0       	rcall	.+0      	; 0x1194 <READ_TEMP_F+0x6>
    1194:	1f 92       	push	r1
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
	int32_t t_fine = READ_TEMP_I();
    119a:	21 d0       	rcall	.+66     	; 0x11de <READ_TEMP_I>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	89 83       	std	Y+1, r24	; 0x01
    11a2:	9a 83       	std	Y+2, r25	; 0x02
    11a4:	ab 83       	std	Y+3, r26	; 0x03
    11a6:	bc 83       	std	Y+4, r27	; 0x04
	return t_fine / 5120.0;	
    11a8:	69 81       	ldd	r22, Y+1	; 0x01
    11aa:	7a 81       	ldd	r23, Y+2	; 0x02
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__floatsisf>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	20 e0       	ldi	r18, 0x00	; 0
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	40 ea       	ldi	r20, 0xA0	; 160
    11be:	55 e4       	ldi	r21, 0x45	; 69
    11c0:	bc 01       	movw	r22, r24
    11c2:	cd 01       	movw	r24, r26
    11c4:	0e 94 47 11 	call	0x228e	; 0x228e <__divsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
}
    11cc:	bc 01       	movw	r22, r24
    11ce:	cd 01       	movw	r24, r26
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	08 95       	ret

000011de <READ_TEMP_I>:

int32_t READ_TEMP_I ( void )
{
    11de:	8f 92       	push	r8
    11e0:	9f 92       	push	r9
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	66 97       	sbiw	r28, 0x16	; 22
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
	unsigned char cAdrWork = 0;
    1202:	1e 8a       	std	Y+22, r1	; 0x16
	uint32_t temp_adc = 0;
    1204:	19 82       	std	Y+1, r1	; 0x01
    1206:	1a 82       	std	Y+2, r1	; 0x02
    1208:	1b 82       	std	Y+3, r1	; 0x03
    120a:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t par_t1 = 0;
    120c:	1e 82       	std	Y+6, r1	; 0x06
    120e:	1d 82       	std	Y+5, r1	; 0x05
	int16_t par_t2 = 0;
    1210:	18 86       	std	Y+8, r1	; 0x08
    1212:	1f 82       	std	Y+7, r1	; 0x07
	int8_t par_t3 = 0;
    1214:	19 86       	std	Y+9, r1	; 0x09
	double var1 = 0;
    1216:	1a 86       	std	Y+10, r1	; 0x0a
    1218:	1b 86       	std	Y+11, r1	; 0x0b
    121a:	1c 86       	std	Y+12, r1	; 0x0c
    121c:	1d 86       	std	Y+13, r1	; 0x0d
	double var2 = 0;
    121e:	1e 86       	std	Y+14, r1	; 0x0e
    1220:	1f 86       	std	Y+15, r1	; 0x0f
    1222:	18 8a       	std	Y+16, r1	; 0x10
    1224:	19 8a       	std	Y+17, r1	; 0x11
	int32_t t_fine = 0;
    1226:	1a 8a       	std	Y+18, r1	; 0x12
    1228:	1b 8a       	std	Y+19, r1	; 0x13
    122a:	1c 8a       	std	Y+20, r1	; 0x14
    122c:	1d 8a       	std	Y+21, r1	; 0x15
	
	cAdrWork = REG_TEMP_MSB;
    122e:	82 e2       	ldi	r24, 0x22	; 34
    1230:	8e 8b       	std	Y+22, r24	; 0x16
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1232:	ce 01       	movw	r24, r28
    1234:	46 96       	adiw	r24, 0x16	; 22
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	41 e0       	ldi	r20, 0x01	; 1
    123a:	bc 01       	movw	r22, r24
    123c:	86 e7       	ldi	r24, 0x76	; 118
    123e:	5d d9       	rcall	.-3398   	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 3);
    1240:	43 e0       	ldi	r20, 0x03	; 3
    1242:	60 e2       	ldi	r22, 0x20	; 32
    1244:	72 e0       	ldi	r23, 0x02	; 2
    1246:	86 e7       	ldi	r24, 0x76	; 118
    1248:	ad d9       	rcall	.-3238   	; 0x5a4 <twi_master_receive>
	temp_adc = (0xFF000 & (((uint32_t)cRecieve[0]) << 12)) | (0x00FF0 & (cRecieve[1] << 4)) | (0x0000F & (cRecieve[2] >> 4));
    124a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    124e:	88 2f       	mov	r24, r24
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	a0 e0       	ldi	r26, 0x00	; 0
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	07 2e       	mov	r0, r23
    1258:	7c e0       	ldi	r23, 0x0C	; 12
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	aa 1f       	adc	r26, r26
    1260:	bb 1f       	adc	r27, r27
    1262:	7a 95       	dec	r23
    1264:	d1 f7       	brne	.-12     	; 0x125a <READ_TEMP_I+0x7c>
    1266:	70 2d       	mov	r23, r0
    1268:	9c 01       	movw	r18, r24
    126a:	ad 01       	movw	r20, r26
    126c:	22 27       	eor	r18, r18
    126e:	30 7f       	andi	r19, 0xF0	; 240
    1270:	4f 70       	andi	r20, 0x0F	; 15
    1272:	55 27       	eor	r21, r21
    1274:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	82 95       	swap	r24
    127e:	92 95       	swap	r25
    1280:	90 7f       	andi	r25, 0xF0	; 240
    1282:	98 27       	eor	r25, r24
    1284:	80 7f       	andi	r24, 0xF0	; 240
    1286:	98 27       	eor	r25, r24
    1288:	09 2e       	mov	r0, r25
    128a:	00 0c       	add	r0, r0
    128c:	aa 0b       	sbc	r26, r26
    128e:	bb 0b       	sbc	r27, r27
    1290:	80 7f       	andi	r24, 0xF0	; 240
    1292:	9f 70       	andi	r25, 0x0F	; 15
    1294:	aa 27       	eor	r26, r26
    1296:	bb 27       	eor	r27, r27
    1298:	28 2b       	or	r18, r24
    129a:	39 2b       	or	r19, r25
    129c:	4a 2b       	or	r20, r26
    129e:	5b 2b       	or	r21, r27
    12a0:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end+0x2>
    12a4:	82 95       	swap	r24
    12a6:	8f 70       	andi	r24, 0x0F	; 15
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	a0 e0       	ldi	r26, 0x00	; 0
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	82 2b       	or	r24, r18
    12b2:	93 2b       	or	r25, r19
    12b4:	a4 2b       	or	r26, r20
    12b6:	b5 2b       	or	r27, r21
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	9a 83       	std	Y+2, r25	; 0x02
    12bc:	ab 83       	std	Y+3, r26	; 0x03
    12be:	bc 83       	std	Y+4, r27	; 0x04
	
	cAdrWork = 0xE9;
    12c0:	89 ee       	ldi	r24, 0xE9	; 233
    12c2:	8e 8b       	std	Y+22, r24	; 0x16
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    12c4:	ce 01       	movw	r24, r28
    12c6:	46 96       	adiw	r24, 0x16	; 22
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	41 e0       	ldi	r20, 0x01	; 1
    12cc:	bc 01       	movw	r22, r24
    12ce:	86 e7       	ldi	r24, 0x76	; 118
    12d0:	14 d9       	rcall	.-3544   	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    12d2:	42 e0       	ldi	r20, 0x02	; 2
    12d4:	60 e2       	ldi	r22, 0x20	; 32
    12d6:	72 e0       	ldi	r23, 0x02	; 2
    12d8:	86 e7       	ldi	r24, 0x76	; 118
    12da:	64 d9       	rcall	.-3384   	; 0x5a4 <twi_master_receive>
	par_t1 = (0xFF00 & (cRecieve[1] << 8)) | (0x00FF & (cRecieve[0]));
    12dc:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	98 2f       	mov	r25, r24
    12e6:	88 27       	eor	r24, r24
    12e8:	9c 01       	movw	r18, r24
    12ea:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    12ee:	88 2f       	mov	r24, r24
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	82 2b       	or	r24, r18
    12f4:	93 2b       	or	r25, r19
    12f6:	9e 83       	std	Y+6, r25	; 0x06
    12f8:	8d 83       	std	Y+5, r24	; 0x05
	
	cAdrWork = 0x8A;
    12fa:	8a e8       	ldi	r24, 0x8A	; 138
    12fc:	8e 8b       	std	Y+22, r24	; 0x16
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    12fe:	ce 01       	movw	r24, r28
    1300:	46 96       	adiw	r24, 0x16	; 22
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	41 e0       	ldi	r20, 0x01	; 1
    1306:	bc 01       	movw	r22, r24
    1308:	86 e7       	ldi	r24, 0x76	; 118
    130a:	f7 d8       	rcall	.-3602   	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    130c:	42 e0       	ldi	r20, 0x02	; 2
    130e:	60 e2       	ldi	r22, 0x20	; 32
    1310:	72 e0       	ldi	r23, 0x02	; 2
    1312:	86 e7       	ldi	r24, 0x76	; 118
    1314:	47 d9       	rcall	.-3442   	; 0x5a4 <twi_master_receive>
    1316:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
	par_t2 = (0xFF00 & (cRecieve[1] << 8)) | (0x00FF & (cRecieve[0]));
    131a:	88 2f       	mov	r24, r24
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	98 2f       	mov	r25, r24
    1320:	88 27       	eor	r24, r24
    1322:	9c 01       	movw	r18, r24
    1324:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1328:	88 2f       	mov	r24, r24
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	82 2b       	or	r24, r18
    132e:	93 2b       	or	r25, r19
    1330:	98 87       	std	Y+8, r25	; 0x08
    1332:	8f 83       	std	Y+7, r24	; 0x07
    1334:	8c e8       	ldi	r24, 0x8C	; 140
	
	cAdrWork = 0x8C;
    1336:	8e 8b       	std	Y+22, r24	; 0x16
    1338:	ce 01       	movw	r24, r28
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    133a:	46 96       	adiw	r24, 0x16	; 22
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	41 e0       	ldi	r20, 0x01	; 1
    1340:	bc 01       	movw	r22, r24
    1342:	86 e7       	ldi	r24, 0x76	; 118
    1344:	da d8       	rcall	.-3660   	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    1346:	42 e0       	ldi	r20, 0x02	; 2
    1348:	60 e2       	ldi	r22, 0x20	; 32
    134a:	72 e0       	ldi	r23, 0x02	; 2
    134c:	86 e7       	ldi	r24, 0x76	; 118
    134e:	2a d9       	rcall	.-3500   	; 0x5a4 <twi_master_receive>
    1350:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
	par_t3 = (cRecieve[0]);
    1354:	89 87       	std	Y+9, r24	; 0x09
    1356:	69 81       	ldd	r22, Y+1	; 0x01
	
	var1 = (((double)temp_adc / 16384.0) - ((double)par_t1 / 1024.0)) * (double)par_t2;
    1358:	7a 81       	ldd	r23, Y+2	; 0x02
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	9c 81       	ldd	r25, Y+4	; 0x04
    135e:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    1362:	dc 01       	movw	r26, r24
    1364:	cb 01       	movw	r24, r22
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	40 e8       	ldi	r20, 0x80	; 128
    136c:	56 e4       	ldi	r21, 0x46	; 70
    136e:	bc 01       	movw	r22, r24
    1370:	cd 01       	movw	r24, r26
    1372:	8d d7       	rcall	.+3866   	; 0x228e <__divsf3>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	6c 01       	movw	r12, r24
    137a:	7d 01       	movw	r14, r26
    137c:	8d 81       	ldd	r24, Y+5	; 0x05
    137e:	9e 81       	ldd	r25, Y+6	; 0x06
    1380:	cc 01       	movw	r24, r24
    1382:	a0 e0       	ldi	r26, 0x00	; 0
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	bc 01       	movw	r22, r24
    1388:	cd 01       	movw	r24, r26
    138a:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__floatunsisf>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	40 e8       	ldi	r20, 0x80	; 128
    1398:	54 e4       	ldi	r21, 0x44	; 68
    139a:	bc 01       	movw	r22, r24
    139c:	cd 01       	movw	r24, r26
    139e:	77 d7       	rcall	.+3822   	; 0x228e <__divsf3>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	9c 01       	movw	r18, r24
    13a6:	ad 01       	movw	r20, r26
    13a8:	c7 01       	movw	r24, r14
    13aa:	b6 01       	movw	r22, r12
    13ac:	07 d7       	rcall	.+3598   	; 0x21bc <__subsf3>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	6c 01       	movw	r12, r24
    13b4:	7d 01       	movw	r14, r26
    13b6:	8f 81       	ldd	r24, Y+7	; 0x07
    13b8:	98 85       	ldd	r25, Y+8	; 0x08
    13ba:	09 2e       	mov	r0, r25
    13bc:	00 0c       	add	r0, r0
    13be:	aa 0b       	sbc	r26, r26
    13c0:	bb 0b       	sbc	r27, r27
    13c2:	bc 01       	movw	r22, r24
    13c4:	cd 01       	movw	r24, r26
    13c6:	fe d7       	rcall	.+4092   	; 0x23c4 <__floatsisf>
    13c8:	dc 01       	movw	r26, r24
    13ca:	cb 01       	movw	r24, r22
    13cc:	9c 01       	movw	r18, r24
    13ce:	ad 01       	movw	r20, r26
    13d0:	c7 01       	movw	r24, r14
    13d2:	b6 01       	movw	r22, r12
    13d4:	0e 94 96 12 	call	0x252c	; 0x252c <__mulsf3>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	8a 87       	std	Y+10, r24	; 0x0a
    13de:	9b 87       	std	Y+11, r25	; 0x0b
    13e0:	ac 87       	std	Y+12, r26	; 0x0c
    13e2:	bd 87       	std	Y+13, r27	; 0x0d
	var2 = ((((double)temp_adc / 131072.0) - ((double)par_t1 / 8192.0)) * (((double)temp_adc / 131072.0) - ((double)par_t1 / 8192.0))) * ((double)par_t3 * 16.0);
    13e4:	69 81       	ldd	r22, Y+1	; 0x01
    13e6:	7a 81       	ldd	r23, Y+2	; 0x02
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	e9 d7       	rcall	.+4050   	; 0x23c0 <__floatunsisf>
    13ee:	dc 01       	movw	r26, r24
    13f0:	cb 01       	movw	r24, r22
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	58 e4       	ldi	r21, 0x48	; 72
    13fa:	bc 01       	movw	r22, r24
    13fc:	cd 01       	movw	r24, r26
    13fe:	47 d7       	rcall	.+3726   	; 0x228e <__divsf3>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	6c 01       	movw	r12, r24
    1406:	7d 01       	movw	r14, r26
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	cc 01       	movw	r24, r24
    140e:	a0 e0       	ldi	r26, 0x00	; 0
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	bc 01       	movw	r22, r24
    1414:	cd 01       	movw	r24, r26
    1416:	d4 d7       	rcall	.+4008   	; 0x23c0 <__floatunsisf>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	56 e4       	ldi	r21, 0x46	; 70
    1424:	bc 01       	movw	r22, r24
    1426:	cd 01       	movw	r24, r26
    1428:	32 d7       	rcall	.+3684   	; 0x228e <__divsf3>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9c 01       	movw	r18, r24
    1430:	ad 01       	movw	r20, r26
    1432:	c7 01       	movw	r24, r14
    1434:	b6 01       	movw	r22, r12
    1436:	c2 d6       	rcall	.+3460   	; 0x21bc <__subsf3>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	6c 01       	movw	r12, r24
    143e:	7d 01       	movw	r14, r26
    1440:	69 81       	ldd	r22, Y+1	; 0x01
    1442:	7a 81       	ldd	r23, Y+2	; 0x02
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	bb d7       	rcall	.+3958   	; 0x23c0 <__floatunsisf>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	20 e0       	ldi	r18, 0x00	; 0
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	58 e4       	ldi	r21, 0x48	; 72
    1456:	bc 01       	movw	r22, r24
    1458:	cd 01       	movw	r24, r26
    145a:	19 d7       	rcall	.+3634   	; 0x228e <__divsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	4c 01       	movw	r8, r24
    1462:	5d 01       	movw	r10, r26
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	9e 81       	ldd	r25, Y+6	; 0x06
    1468:	cc 01       	movw	r24, r24
    146a:	a0 e0       	ldi	r26, 0x00	; 0
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	bc 01       	movw	r22, r24
    1470:	cd 01       	movw	r24, r26
    1472:	a6 d7       	rcall	.+3916   	; 0x23c0 <__floatunsisf>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e0       	ldi	r20, 0x00	; 0
    147e:	56 e4       	ldi	r21, 0x46	; 70
    1480:	bc 01       	movw	r22, r24
    1482:	cd 01       	movw	r24, r26
    1484:	04 d7       	rcall	.+3592   	; 0x228e <__divsf3>
    1486:	dc 01       	movw	r26, r24
    1488:	cb 01       	movw	r24, r22
    148a:	9c 01       	movw	r18, r24
    148c:	ad 01       	movw	r20, r26
    148e:	c5 01       	movw	r24, r10
    1490:	b4 01       	movw	r22, r8
    1492:	94 d6       	rcall	.+3368   	; 0x21bc <__subsf3>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	9c 01       	movw	r18, r24
    149a:	ad 01       	movw	r20, r26
    149c:	c7 01       	movw	r24, r14
    149e:	b6 01       	movw	r22, r12
    14a0:	0e 94 96 12 	call	0x252c	; 0x252c <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	6c 01       	movw	r12, r24
    14aa:	7d 01       	movw	r14, r26
    14ac:	89 85       	ldd	r24, Y+9	; 0x09
    14ae:	08 2e       	mov	r0, r24
    14b0:	00 0c       	add	r0, r0
    14b2:	99 0b       	sbc	r25, r25
    14b4:	aa 0b       	sbc	r26, r26
    14b6:	bb 0b       	sbc	r27, r27
    14b8:	bc 01       	movw	r22, r24
    14ba:	cd 01       	movw	r24, r26
    14bc:	83 d7       	rcall	.+3846   	; 0x23c4 <__floatsisf>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e8       	ldi	r20, 0x80	; 128
    14c8:	51 e4       	ldi	r21, 0x41	; 65
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	0e 94 96 12 	call	0x252c	; 0x252c <__mulsf3>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	9c 01       	movw	r18, r24
    14d8:	ad 01       	movw	r20, r26
    14da:	c7 01       	movw	r24, r14
    14dc:	b6 01       	movw	r22, r12
    14de:	0e 94 96 12 	call	0x252c	; 0x252c <__mulsf3>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	8e 87       	std	Y+14, r24	; 0x0e
    14e8:	9f 87       	std	Y+15, r25	; 0x0f
    14ea:	a8 8b       	std	Y+16, r26	; 0x10
    14ec:	b9 8b       	std	Y+17, r27	; 0x11
	t_fine = var1 + var2;
    14ee:	2e 85       	ldd	r18, Y+14	; 0x0e
    14f0:	3f 85       	ldd	r19, Y+15	; 0x0f
    14f2:	48 89       	ldd	r20, Y+16	; 0x10
    14f4:	59 89       	ldd	r21, Y+17	; 0x11
    14f6:	6a 85       	ldd	r22, Y+10	; 0x0a
    14f8:	7b 85       	ldd	r23, Y+11	; 0x0b
    14fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    14fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    14fe:	5f d6       	rcall	.+3262   	; 0x21be <__addsf3>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	bc 01       	movw	r22, r24
    1506:	cd 01       	movw	r24, r26
    1508:	2a d7       	rcall	.+3668   	; 0x235e <__fixsfsi>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	8a 8b       	std	Y+18, r24	; 0x12
    1510:	9b 8b       	std	Y+19, r25	; 0x13
    1512:	ac 8b       	std	Y+20, r26	; 0x14
    1514:	bd 8b       	std	Y+21, r27	; 0x15
    1516:	8a 89       	ldd	r24, Y+18	; 0x12
    1518:	9b 89       	ldd	r25, Y+19	; 0x13

	
	return t_fine;
    151a:	ac 89       	ldd	r26, Y+20	; 0x14
    151c:	bd 89       	ldd	r27, Y+21	; 0x15
    151e:	bc 01       	movw	r22, r24
    1520:	cd 01       	movw	r24, r26
}
    1522:	66 96       	adiw	r28, 0x16	; 22
    1524:	0f b6       	in	r0, 0x3f	; 63
    1526:	f8 94       	cli
    1528:	de bf       	out	0x3e, r29	; 62
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	cd bf       	out	0x3d, r28	; 61
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	bf 90       	pop	r11
    153c:	af 90       	pop	r10
    153e:	9f 90       	pop	r9
    1540:	8f 90       	pop	r8
    1542:	08 95       	ret

00001544 <READ_PRESS>:
    1544:	cf 92       	push	r12
    1546:	df 92       	push	r13

float READ_PRESS ( void )
{
    1548:	ef 92       	push	r14
    154a:	ff 92       	push	r15
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	a9 97       	sbiw	r28, 0x29	; 41
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	de bf       	out	0x3e, r29	; 62
    155c:	0f be       	out	0x3f, r0	; 63
    155e:	cd bf       	out	0x3d, r28	; 61
	int32_t t_fine = READ_TEMP_I();
    1560:	3e de       	rcall	.-900    	; 0x11de <READ_TEMP_I>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	89 83       	std	Y+1, r24	; 0x01
    1568:	9a 83       	std	Y+2, r25	; 0x02
    156a:	ab 83       	std	Y+3, r26	; 0x03
    156c:	bc 83       	std	Y+4, r27	; 0x04
	unsigned char cAdrWork = 0;
    156e:	19 a6       	std	Y+41, r1	; 0x29
	double var1 = 0;
    1570:	1d 82       	std	Y+5, r1	; 0x05
    1572:	1e 82       	std	Y+6, r1	; 0x06
    1574:	1f 82       	std	Y+7, r1	; 0x07
    1576:	18 86       	std	Y+8, r1	; 0x08
	double var2 = 0;
    1578:	19 86       	std	Y+9, r1	; 0x09
    157a:	1a 86       	std	Y+10, r1	; 0x0a
    157c:	1b 86       	std	Y+11, r1	; 0x0b
    157e:	1c 86       	std	Y+12, r1	; 0x0c
	double var3 = 0;
    1580:	1d 86       	std	Y+13, r1	; 0x0d
    1582:	1e 86       	std	Y+14, r1	; 0x0e
    1584:	1f 86       	std	Y+15, r1	; 0x0f
    1586:	18 8a       	std	Y+16, r1	; 0x10
	double press_comp = 0;
    1588:	19 8a       	std	Y+17, r1	; 0x11
    158a:	1a 8a       	std	Y+18, r1	; 0x12
    158c:	1b 8a       	std	Y+19, r1	; 0x13
    158e:	1c 8a       	std	Y+20, r1	; 0x14
	uint32_t press_adc = 0;
    1590:	1d 8a       	std	Y+21, r1	; 0x15
    1592:	1e 8a       	std	Y+22, r1	; 0x16
    1594:	1f 8a       	std	Y+23, r1	; 0x17
    1596:	18 8e       	std	Y+24, r1	; 0x18
	uint16_t par_p1  = 0;
    1598:	1a 8e       	std	Y+26, r1	; 0x1a
    159a:	19 8e       	std	Y+25, r1	; 0x19
	int16_t par_p2  = 0;
    159c:	1c 8e       	std	Y+28, r1	; 0x1c
    159e:	1b 8e       	std	Y+27, r1	; 0x1b
	int8_t par_p3  = 0;
    15a0:	1d 8e       	std	Y+29, r1	; 0x1d
	int16_t par_p4  = 0;
    15a2:	1f 8e       	std	Y+31, r1	; 0x1f
    15a4:	1e 8e       	std	Y+30, r1	; 0x1e
	int16_t par_p5  = 0;
    15a6:	19 a2       	std	Y+33, r1	; 0x21
    15a8:	18 a2       	std	Y+32, r1	; 0x20
	int8_t par_p6  = 0;
    15aa:	1a a2       	std	Y+34, r1	; 0x22
	int8_t par_p7  = 0;
    15ac:	1b a2       	std	Y+35, r1	; 0x23
	int16_t par_p8  = 0;
    15ae:	1d a2       	std	Y+37, r1	; 0x25
    15b0:	1c a2       	std	Y+36, r1	; 0x24
	int16_t par_p9  = 0;
    15b2:	1f a2       	std	Y+39, r1	; 0x27
    15b4:	1e a2       	std	Y+38, r1	; 0x26
	int8_t par_p10  = 0;
    15b6:	18 a6       	std	Y+40, r1	; 0x28
	
	cAdrWork = REG_PRESS_MSB;
    15b8:	8f e1       	ldi	r24, 0x1F	; 31
    15ba:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    15bc:	ce 01       	movw	r24, r28
    15be:	89 96       	adiw	r24, 0x29	; 41
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	41 e0       	ldi	r20, 0x01	; 1
    15c4:	bc 01       	movw	r22, r24
    15c6:	86 e7       	ldi	r24, 0x76	; 118
    15c8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    15cc:	41 e0       	ldi	r20, 0x01	; 1
    15ce:	60 e2       	ldi	r22, 0x20	; 32
    15d0:	72 e0       	ldi	r23, 0x02	; 2
    15d2:	86 e7       	ldi	r24, 0x76	; 118
    15d4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	press_adc = (0xFF000 & (((uint32_t)cRecieve[0]) << 12));
    15d8:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    15dc:	88 2f       	mov	r24, r24
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a0 e0       	ldi	r26, 0x00	; 0
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	07 2e       	mov	r0, r23
    15e6:	7c e0       	ldi	r23, 0x0C	; 12
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	aa 1f       	adc	r26, r26
    15ee:	bb 1f       	adc	r27, r27
    15f0:	7a 95       	dec	r23
    15f2:	d1 f7       	brne	.-12     	; 0x15e8 <READ_PRESS+0xa4>
    15f4:	70 2d       	mov	r23, r0
    15f6:	88 27       	eor	r24, r24
    15f8:	90 7f       	andi	r25, 0xF0	; 240
    15fa:	af 70       	andi	r26, 0x0F	; 15
    15fc:	bb 27       	eor	r27, r27
    15fe:	8d 8b       	std	Y+21, r24	; 0x15
    1600:	9e 8b       	std	Y+22, r25	; 0x16
    1602:	af 8b       	std	Y+23, r26	; 0x17
    1604:	b8 8f       	std	Y+24, r27	; 0x18
	
	cAdrWork = REG_PRESS_LSB;
    1606:	80 e2       	ldi	r24, 0x20	; 32
    1608:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    160a:	ce 01       	movw	r24, r28
    160c:	89 96       	adiw	r24, 0x29	; 41
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	41 e0       	ldi	r20, 0x01	; 1
    1612:	bc 01       	movw	r22, r24
    1614:	86 e7       	ldi	r24, 0x76	; 118
    1616:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    161a:	42 e0       	ldi	r20, 0x02	; 2
    161c:	60 e2       	ldi	r22, 0x20	; 32
    161e:	72 e0       	ldi	r23, 0x02	; 2
    1620:	86 e7       	ldi	r24, 0x76	; 118
    1622:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	press_adc = press_adc | (0x00FF0 & (cRecieve[0] << 4)) | (0x0000F & (cRecieve[1] >> 4));
    1626:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	82 95       	swap	r24
    1630:	92 95       	swap	r25
    1632:	90 7f       	andi	r25, 0xF0	; 240
    1634:	98 27       	eor	r25, r24
    1636:	80 7f       	andi	r24, 0xF0	; 240
    1638:	98 27       	eor	r25, r24
    163a:	09 2e       	mov	r0, r25
    163c:	00 0c       	add	r0, r0
    163e:	aa 0b       	sbc	r26, r26
    1640:	bb 0b       	sbc	r27, r27
    1642:	9c 01       	movw	r18, r24
    1644:	ad 01       	movw	r20, r26
    1646:	20 7f       	andi	r18, 0xF0	; 240
    1648:	3f 70       	andi	r19, 0x0F	; 15
    164a:	44 27       	eor	r20, r20
    164c:	55 27       	eor	r21, r21
    164e:	8d 89       	ldd	r24, Y+21	; 0x15
    1650:	9e 89       	ldd	r25, Y+22	; 0x16
    1652:	af 89       	ldd	r26, Y+23	; 0x17
    1654:	b8 8d       	ldd	r27, Y+24	; 0x18
    1656:	28 2b       	or	r18, r24
    1658:	39 2b       	or	r19, r25
    165a:	4a 2b       	or	r20, r26
    165c:	5b 2b       	or	r21, r27
    165e:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1662:	82 95       	swap	r24
    1664:	8f 70       	andi	r24, 0x0F	; 15
    1666:	88 2f       	mov	r24, r24
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	a0 e0       	ldi	r26, 0x00	; 0
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	82 2b       	or	r24, r18
    1670:	93 2b       	or	r25, r19
    1672:	a4 2b       	or	r26, r20
    1674:	b5 2b       	or	r27, r21
    1676:	8d 8b       	std	Y+21, r24	; 0x15
    1678:	9e 8b       	std	Y+22, r25	; 0x16
    167a:	af 8b       	std	Y+23, r26	; 0x17
    167c:	b8 8f       	std	Y+24, r27	; 0x18
	
	cAdrWork = 0x8E;
    167e:	8e e8       	ldi	r24, 0x8E	; 142
    1680:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1682:	ce 01       	movw	r24, r28
    1684:	89 96       	adiw	r24, 0x29	; 41
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	41 e0       	ldi	r20, 0x01	; 1
    168a:	bc 01       	movw	r22, r24
    168c:	86 e7       	ldi	r24, 0x76	; 118
    168e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    1692:	42 e0       	ldi	r20, 0x02	; 2
    1694:	60 e2       	ldi	r22, 0x20	; 32
    1696:	72 e0       	ldi	r23, 0x02	; 2
    1698:	86 e7       	ldi	r24, 0x76	; 118
    169a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_p1 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
    169e:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    16a2:	88 2f       	mov	r24, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	38 2f       	mov	r19, r24
    16a8:	22 27       	eor	r18, r18
    16aa:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	82 2b       	or	r24, r18
    16b4:	93 2b       	or	r25, r19
    16b6:	9a 8f       	std	Y+26, r25	; 0x1a
    16b8:	89 8f       	std	Y+25, r24	; 0x19
	
	cAdrWork = 0x90;
    16ba:	80 e9       	ldi	r24, 0x90	; 144
    16bc:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    16be:	ce 01       	movw	r24, r28
    16c0:	89 96       	adiw	r24, 0x29	; 41
    16c2:	20 e0       	ldi	r18, 0x00	; 0
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	bc 01       	movw	r22, r24
    16c8:	86 e7       	ldi	r24, 0x76	; 118
    16ca:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    16ce:	42 e0       	ldi	r20, 0x02	; 2
    16d0:	60 e2       	ldi	r22, 0x20	; 32
    16d2:	72 e0       	ldi	r23, 0x02	; 2
    16d4:	86 e7       	ldi	r24, 0x76	; 118
    16d6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_p2 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
    16da:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	38 2f       	mov	r19, r24
    16e4:	22 27       	eor	r18, r18
    16e6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    16ea:	88 2f       	mov	r24, r24
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	82 2b       	or	r24, r18
    16f0:	93 2b       	or	r25, r19
    16f2:	9c 8f       	std	Y+28, r25	; 0x1c
    16f4:	8b 8f       	std	Y+27, r24	; 0x1b
	
	cAdrWork = 0x92;
    16f6:	82 e9       	ldi	r24, 0x92	; 146
    16f8:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    16fa:	ce 01       	movw	r24, r28
    16fc:	89 96       	adiw	r24, 0x29	; 41
    16fe:	20 e0       	ldi	r18, 0x00	; 0
    1700:	41 e0       	ldi	r20, 0x01	; 1
    1702:	bc 01       	movw	r22, r24
    1704:	86 e7       	ldi	r24, 0x76	; 118
    1706:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    170a:	41 e0       	ldi	r20, 0x01	; 1
    170c:	60 e2       	ldi	r22, 0x20	; 32
    170e:	72 e0       	ldi	r23, 0x02	; 2
    1710:	86 e7       	ldi	r24, 0x76	; 118
    1712:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_p3 = cRecieve[0];
    1716:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    171a:	8d 8f       	std	Y+29, r24	; 0x1d
	
	cAdrWork = 0x94;
    171c:	84 e9       	ldi	r24, 0x94	; 148
    171e:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1720:	ce 01       	movw	r24, r28
    1722:	89 96       	adiw	r24, 0x29	; 41
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	bc 01       	movw	r22, r24
    172a:	86 e7       	ldi	r24, 0x76	; 118
    172c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    1730:	42 e0       	ldi	r20, 0x02	; 2
    1732:	60 e2       	ldi	r22, 0x20	; 32
    1734:	72 e0       	ldi	r23, 0x02	; 2
    1736:	86 e7       	ldi	r24, 0x76	; 118
    1738:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_p4 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
    173c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	38 2f       	mov	r19, r24
    1746:	22 27       	eor	r18, r18
    1748:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    174c:	88 2f       	mov	r24, r24
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	82 2b       	or	r24, r18
    1752:	93 2b       	or	r25, r19
    1754:	9f 8f       	std	Y+31, r25	; 0x1f
    1756:	8e 8f       	std	Y+30, r24	; 0x1e
	
	cAdrWork = 0x96;
    1758:	86 e9       	ldi	r24, 0x96	; 150
    175a:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    175c:	ce 01       	movw	r24, r28
    175e:	89 96       	adiw	r24, 0x29	; 41
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	bc 01       	movw	r22, r24
    1766:	86 e7       	ldi	r24, 0x76	; 118
    1768:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    176c:	42 e0       	ldi	r20, 0x02	; 2
    176e:	60 e2       	ldi	r22, 0x20	; 32
    1770:	72 e0       	ldi	r23, 0x02	; 2
    1772:	86 e7       	ldi	r24, 0x76	; 118
    1774:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_p5 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
    1778:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	38 2f       	mov	r19, r24
    1782:	22 27       	eor	r18, r18
    1784:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1788:	88 2f       	mov	r24, r24
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	82 2b       	or	r24, r18
    178e:	93 2b       	or	r25, r19
    1790:	99 a3       	std	Y+33, r25	; 0x21
    1792:	88 a3       	std	Y+32, r24	; 0x20
	
	cAdrWork = 0x99;
    1794:	89 e9       	ldi	r24, 0x99	; 153
    1796:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1798:	ce 01       	movw	r24, r28
    179a:	89 96       	adiw	r24, 0x29	; 41
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	41 e0       	ldi	r20, 0x01	; 1
    17a0:	bc 01       	movw	r22, r24
    17a2:	86 e7       	ldi	r24, 0x76	; 118
    17a4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    17a8:	41 e0       	ldi	r20, 0x01	; 1
    17aa:	60 e2       	ldi	r22, 0x20	; 32
    17ac:	72 e0       	ldi	r23, 0x02	; 2
    17ae:	86 e7       	ldi	r24, 0x76	; 118
    17b0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_p6 = cRecieve[0];
    17b4:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    17b8:	8a a3       	std	Y+34, r24	; 0x22
	
	cAdrWork = 0x98;
    17ba:	88 e9       	ldi	r24, 0x98	; 152
    17bc:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    17be:	ce 01       	movw	r24, r28
    17c0:	89 96       	adiw	r24, 0x29	; 41
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	bc 01       	movw	r22, r24
    17c8:	86 e7       	ldi	r24, 0x76	; 118
    17ca:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    17ce:	42 e0       	ldi	r20, 0x02	; 2
    17d0:	60 e2       	ldi	r22, 0x20	; 32
    17d2:	72 e0       	ldi	r23, 0x02	; 2
    17d4:	86 e7       	ldi	r24, 0x76	; 118
    17d6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_p7 = cRecieve[0];
    17da:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    17de:	8b a3       	std	Y+35, r24	; 0x23
	
	cAdrWork = 0x9C;
    17e0:	8c e9       	ldi	r24, 0x9C	; 156
    17e2:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    17e4:	ce 01       	movw	r24, r28
    17e6:	89 96       	adiw	r24, 0x29	; 41
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	bc 01       	movw	r22, r24
    17ee:	86 e7       	ldi	r24, 0x76	; 118
    17f0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    17f4:	42 e0       	ldi	r20, 0x02	; 2
    17f6:	60 e2       	ldi	r22, 0x20	; 32
    17f8:	72 e0       	ldi	r23, 0x02	; 2
    17fa:	86 e7       	ldi	r24, 0x76	; 118
    17fc:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_p8 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
    1800:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1804:	88 2f       	mov	r24, r24
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	38 2f       	mov	r19, r24
    180a:	22 27       	eor	r18, r18
    180c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	82 2b       	or	r24, r18
    1816:	93 2b       	or	r25, r19
    1818:	9d a3       	std	Y+37, r25	; 0x25
    181a:	8c a3       	std	Y+36, r24	; 0x24
	
	cAdrWork = 0x9E;
    181c:	8e e9       	ldi	r24, 0x9E	; 158
    181e:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1820:	ce 01       	movw	r24, r28
    1822:	89 96       	adiw	r24, 0x29	; 41
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	bc 01       	movw	r22, r24
    182a:	86 e7       	ldi	r24, 0x76	; 118
    182c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    1830:	42 e0       	ldi	r20, 0x02	; 2
    1832:	60 e2       	ldi	r22, 0x20	; 32
    1834:	72 e0       	ldi	r23, 0x02	; 2
    1836:	86 e7       	ldi	r24, 0x76	; 118
    1838:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_p9 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
    183c:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1840:	88 2f       	mov	r24, r24
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	38 2f       	mov	r19, r24
    1846:	22 27       	eor	r18, r18
    1848:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    184c:	88 2f       	mov	r24, r24
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	82 2b       	or	r24, r18
    1852:	93 2b       	or	r25, r19
    1854:	9f a3       	std	Y+39, r25	; 0x27
    1856:	8e a3       	std	Y+38, r24	; 0x26
	
	cAdrWork = 0xA0;
    1858:	80 ea       	ldi	r24, 0xA0	; 160
    185a:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    185c:	ce 01       	movw	r24, r28
    185e:	89 96       	adiw	r24, 0x29	; 41
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	41 e0       	ldi	r20, 0x01	; 1
    1864:	bc 01       	movw	r22, r24
    1866:	86 e7       	ldi	r24, 0x76	; 118
    1868:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    186c:	42 e0       	ldi	r20, 0x02	; 2
    186e:	60 e2       	ldi	r22, 0x20	; 32
    1870:	72 e0       	ldi	r23, 0x02	; 2
    1872:	86 e7       	ldi	r24, 0x76	; 118
    1874:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_p10 = cRecieve[0];
    1878:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    187c:	88 a7       	std	Y+40, r24	; 0x28
	
	
	var1 = ((double)t_fine / 2) - 64000.0;
    187e:	69 81       	ldd	r22, Y+1	; 0x01
    1880:	7a 81       	ldd	r23, Y+2	; 0x02
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	9c 81       	ldd	r25, Y+4	; 0x04
    1886:	9e d5       	rcall	.+2876   	; 0x23c4 <__floatsisf>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	40 e0       	ldi	r20, 0x00	; 0
    1892:	50 e4       	ldi	r21, 0x40	; 64
    1894:	bc 01       	movw	r22, r24
    1896:	cd 01       	movw	r24, r26
    1898:	fa d4       	rcall	.+2548   	; 0x228e <__divsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	20 e0       	ldi	r18, 0x00	; 0
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	4a e7       	ldi	r20, 0x7A	; 122
    18a4:	57 e4       	ldi	r21, 0x47	; 71
    18a6:	bc 01       	movw	r22, r24
    18a8:	cd 01       	movw	r24, r26
    18aa:	88 d4       	rcall	.+2320   	; 0x21bc <__subsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	8d 83       	std	Y+5, r24	; 0x05
    18b2:	9e 83       	std	Y+6, r25	; 0x06
    18b4:	af 83       	std	Y+7, r26	; 0x07
    18b6:	b8 87       	std	Y+8, r27	; 0x08
	var2 = var1 * var1 * ((double)par_p6 / 131072);
    18b8:	2d 81       	ldd	r18, Y+5	; 0x05
    18ba:	3e 81       	ldd	r19, Y+6	; 0x06
    18bc:	4f 81       	ldd	r20, Y+7	; 0x07
    18be:	58 85       	ldd	r21, Y+8	; 0x08
    18c0:	6d 81       	ldd	r22, Y+5	; 0x05
    18c2:	7e 81       	ldd	r23, Y+6	; 0x06
    18c4:	8f 81       	ldd	r24, Y+7	; 0x07
    18c6:	98 85       	ldd	r25, Y+8	; 0x08
    18c8:	31 d6       	rcall	.+3170   	; 0x252c <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	6c 01       	movw	r12, r24
    18d0:	7d 01       	movw	r14, r26
    18d2:	8a a1       	ldd	r24, Y+34	; 0x22
    18d4:	08 2e       	mov	r0, r24
    18d6:	00 0c       	add	r0, r0
    18d8:	99 0b       	sbc	r25, r25
    18da:	aa 0b       	sbc	r26, r26
    18dc:	bb 0b       	sbc	r27, r27
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	70 d5       	rcall	.+2784   	; 0x23c4 <__floatsisf>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	58 e4       	ldi	r21, 0x48	; 72
    18f0:	bc 01       	movw	r22, r24
    18f2:	cd 01       	movw	r24, r26
    18f4:	cc d4       	rcall	.+2456   	; 0x228e <__divsf3>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	9c 01       	movw	r18, r24
    18fc:	ad 01       	movw	r20, r26
    18fe:	c7 01       	movw	r24, r14
    1900:	b6 01       	movw	r22, r12
    1902:	14 d6       	rcall	.+3112   	; 0x252c <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	89 87       	std	Y+9, r24	; 0x09
    190a:	9a 87       	std	Y+10, r25	; 0x0a
    190c:	ab 87       	std	Y+11, r26	; 0x0b
    190e:	bc 87       	std	Y+12, r27	; 0x0c
	var2 = var2 + (var1 * (double)par_p5 * 2.0);
    1910:	88 a1       	ldd	r24, Y+32	; 0x20
    1912:	99 a1       	ldd	r25, Y+33	; 0x21
    1914:	09 2e       	mov	r0, r25
    1916:	00 0c       	add	r0, r0
    1918:	aa 0b       	sbc	r26, r26
    191a:	bb 0b       	sbc	r27, r27
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	51 d5       	rcall	.+2722   	; 0x23c4 <__floatsisf>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	2d 81       	ldd	r18, Y+5	; 0x05
    1928:	3e 81       	ldd	r19, Y+6	; 0x06
    192a:	4f 81       	ldd	r20, Y+7	; 0x07
    192c:	58 85       	ldd	r21, Y+8	; 0x08
    192e:	bc 01       	movw	r22, r24
    1930:	cd 01       	movw	r24, r26
    1932:	fc d5       	rcall	.+3064   	; 0x252c <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	9c 01       	movw	r18, r24
    193a:	ad 01       	movw	r20, r26
    193c:	bc 01       	movw	r22, r24
    193e:	cd 01       	movw	r24, r26
    1940:	3e d4       	rcall	.+2172   	; 0x21be <__addsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9c 01       	movw	r18, r24
    1948:	ad 01       	movw	r20, r26
    194a:	69 85       	ldd	r22, Y+9	; 0x09
    194c:	7a 85       	ldd	r23, Y+10	; 0x0a
    194e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1950:	9c 85       	ldd	r25, Y+12	; 0x0c
    1952:	35 d4       	rcall	.+2154   	; 0x21be <__addsf3>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	89 87       	std	Y+9, r24	; 0x09
    195a:	9a 87       	std	Y+10, r25	; 0x0a
    195c:	ab 87       	std	Y+11, r26	; 0x0b
    195e:	bc 87       	std	Y+12, r27	; 0x0c
	var2 = (var2 / 4.0) + ((double)par_p4 * 65536.0);
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	40 e8       	ldi	r20, 0x80	; 128
    1966:	50 e4       	ldi	r21, 0x40	; 64
    1968:	69 85       	ldd	r22, Y+9	; 0x09
    196a:	7a 85       	ldd	r23, Y+10	; 0x0a
    196c:	8b 85       	ldd	r24, Y+11	; 0x0b
    196e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1970:	8e d4       	rcall	.+2332   	; 0x228e <__divsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	6c 01       	movw	r12, r24
    1978:	7d 01       	movw	r14, r26
    197a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    197c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    197e:	09 2e       	mov	r0, r25
    1980:	00 0c       	add	r0, r0
    1982:	aa 0b       	sbc	r26, r26
    1984:	bb 0b       	sbc	r27, r27
    1986:	bc 01       	movw	r22, r24
    1988:	cd 01       	movw	r24, r26
    198a:	1c d5       	rcall	.+2616   	; 0x23c4 <__floatsisf>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e8       	ldi	r20, 0x80	; 128
    1996:	57 e4       	ldi	r21, 0x47	; 71
    1998:	bc 01       	movw	r22, r24
    199a:	cd 01       	movw	r24, r26
    199c:	c7 d5       	rcall	.+2958   	; 0x252c <__mulsf3>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	9c 01       	movw	r18, r24
    19a4:	ad 01       	movw	r20, r26
    19a6:	c7 01       	movw	r24, r14
    19a8:	b6 01       	movw	r22, r12
    19aa:	09 d4       	rcall	.+2066   	; 0x21be <__addsf3>
    19ac:	dc 01       	movw	r26, r24
    19ae:	cb 01       	movw	r24, r22
    19b0:	89 87       	std	Y+9, r24	; 0x09
    19b2:	9a 87       	std	Y+10, r25	; 0x0a
    19b4:	ab 87       	std	Y+11, r26	; 0x0b
    19b6:	bc 87       	std	Y+12, r27	; 0x0c
	var1 = ((((double)par_p3 * var1 * var1) / 16384.0) + ((double)par_p2 * var1)) / 524288.0;
    19b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ba:	08 2e       	mov	r0, r24
    19bc:	00 0c       	add	r0, r0
    19be:	99 0b       	sbc	r25, r25
    19c0:	aa 0b       	sbc	r26, r26
    19c2:	bb 0b       	sbc	r27, r27
    19c4:	bc 01       	movw	r22, r24
    19c6:	cd 01       	movw	r24, r26
    19c8:	fd d4       	rcall	.+2554   	; 0x23c4 <__floatsisf>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	2d 81       	ldd	r18, Y+5	; 0x05
    19d0:	3e 81       	ldd	r19, Y+6	; 0x06
    19d2:	4f 81       	ldd	r20, Y+7	; 0x07
    19d4:	58 85       	ldd	r21, Y+8	; 0x08
    19d6:	bc 01       	movw	r22, r24
    19d8:	cd 01       	movw	r24, r26
    19da:	a8 d5       	rcall	.+2896   	; 0x252c <__mulsf3>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	2d 81       	ldd	r18, Y+5	; 0x05
    19e2:	3e 81       	ldd	r19, Y+6	; 0x06
    19e4:	4f 81       	ldd	r20, Y+7	; 0x07
    19e6:	58 85       	ldd	r21, Y+8	; 0x08
    19e8:	bc 01       	movw	r22, r24
    19ea:	cd 01       	movw	r24, r26
    19ec:	9f d5       	rcall	.+2878   	; 0x252c <__mulsf3>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e8       	ldi	r20, 0x80	; 128
    19f8:	56 e4       	ldi	r21, 0x46	; 70
    19fa:	bc 01       	movw	r22, r24
    19fc:	cd 01       	movw	r24, r26
    19fe:	47 d4       	rcall	.+2190   	; 0x228e <__divsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	6c 01       	movw	r12, r24
    1a06:	7d 01       	movw	r14, r26
    1a08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a0c:	09 2e       	mov	r0, r25
    1a0e:	00 0c       	add	r0, r0
    1a10:	aa 0b       	sbc	r26, r26
    1a12:	bb 0b       	sbc	r27, r27
    1a14:	bc 01       	movw	r22, r24
    1a16:	cd 01       	movw	r24, r26
    1a18:	d5 d4       	rcall	.+2474   	; 0x23c4 <__floatsisf>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	2d 81       	ldd	r18, Y+5	; 0x05
    1a20:	3e 81       	ldd	r19, Y+6	; 0x06
    1a22:	4f 81       	ldd	r20, Y+7	; 0x07
    1a24:	58 85       	ldd	r21, Y+8	; 0x08
    1a26:	bc 01       	movw	r22, r24
    1a28:	cd 01       	movw	r24, r26
    1a2a:	80 d5       	rcall	.+2816   	; 0x252c <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9c 01       	movw	r18, r24
    1a32:	ad 01       	movw	r20, r26
    1a34:	c7 01       	movw	r24, r14
    1a36:	b6 01       	movw	r22, r12
    1a38:	c2 d3       	rcall	.+1924   	; 0x21be <__addsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e0       	ldi	r20, 0x00	; 0
    1a44:	59 e4       	ldi	r21, 0x49	; 73
    1a46:	bc 01       	movw	r22, r24
    1a48:	cd 01       	movw	r24, r26
    1a4a:	21 d4       	rcall	.+2114   	; 0x228e <__divsf3>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	8d 83       	std	Y+5, r24	; 0x05
    1a52:	9e 83       	std	Y+6, r25	; 0x06
    1a54:	af 83       	std	Y+7, r26	; 0x07
    1a56:	b8 87       	std	Y+8, r27	; 0x08
	var1 = (1.0 + (var1 / 32768.0)) * (double)par_p1;
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e0       	ldi	r20, 0x00	; 0
    1a5e:	57 e4       	ldi	r21, 0x47	; 71
    1a60:	6d 81       	ldd	r22, Y+5	; 0x05
    1a62:	7e 81       	ldd	r23, Y+6	; 0x06
    1a64:	8f 81       	ldd	r24, Y+7	; 0x07
    1a66:	98 85       	ldd	r25, Y+8	; 0x08
    1a68:	12 d4       	rcall	.+2084   	; 0x228e <__divsf3>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e8       	ldi	r20, 0x80	; 128
    1a74:	5f e3       	ldi	r21, 0x3F	; 63
    1a76:	bc 01       	movw	r22, r24
    1a78:	cd 01       	movw	r24, r26
    1a7a:	a1 d3       	rcall	.+1858   	; 0x21be <__addsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	6c 01       	movw	r12, r24
    1a82:	7d 01       	movw	r14, r26
    1a84:	89 8d       	ldd	r24, Y+25	; 0x19
    1a86:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1a88:	cc 01       	movw	r24, r24
    1a8a:	a0 e0       	ldi	r26, 0x00	; 0
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	96 d4       	rcall	.+2348   	; 0x23c0 <__floatunsisf>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	9c 01       	movw	r18, r24
    1a9a:	ad 01       	movw	r20, r26
    1a9c:	c7 01       	movw	r24, r14
    1a9e:	b6 01       	movw	r22, r12
    1aa0:	45 d5       	rcall	.+2698   	; 0x252c <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	8d 83       	std	Y+5, r24	; 0x05
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	af 83       	std	Y+7, r26	; 0x07
    1aac:	b8 87       	std	Y+8, r27	; 0x08
	press_comp = 1048576.0 - (double)press_adc;
    1aae:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab6:	84 d4       	rcall	.+2312   	; 0x23c0 <__floatunsisf>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	9c 01       	movw	r18, r24
    1abe:	ad 01       	movw	r20, r26
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	80 e8       	ldi	r24, 0x80	; 128
    1ac6:	99 e4       	ldi	r25, 0x49	; 73
    1ac8:	79 d3       	rcall	.+1778   	; 0x21bc <__subsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	89 8b       	std	Y+17, r24	; 0x11
    1ad0:	9a 8b       	std	Y+18, r25	; 0x12
    1ad2:	ab 8b       	std	Y+19, r26	; 0x13
	press_comp = ((press_comp - (var2 / 4096.0)) * 6250.0) / var1;
    1ad4:	bc 8b       	std	Y+20, r27	; 0x14
    1ad6:	20 e0       	ldi	r18, 0x00	; 0
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	40 e8       	ldi	r20, 0x80	; 128
    1adc:	55 e4       	ldi	r21, 0x45	; 69
    1ade:	69 85       	ldd	r22, Y+9	; 0x09
    1ae0:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ae2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ae4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ae6:	d3 d3       	rcall	.+1958   	; 0x228e <__divsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	9c 01       	movw	r18, r24
    1aee:	ad 01       	movw	r20, r26
    1af0:	69 89       	ldd	r22, Y+17	; 0x11
    1af2:	7a 89       	ldd	r23, Y+18	; 0x12
    1af4:	8b 89       	ldd	r24, Y+19	; 0x13
    1af6:	9c 89       	ldd	r25, Y+20	; 0x14
    1af8:	61 d3       	rcall	.+1730   	; 0x21bc <__subsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e5       	ldi	r19, 0x50	; 80
    1b02:	43 ec       	ldi	r20, 0xC3	; 195
    1b04:	55 e4       	ldi	r21, 0x45	; 69
    1b06:	bc 01       	movw	r22, r24
    1b08:	cd 01       	movw	r24, r26
    1b0a:	10 d5       	rcall	.+2592   	; 0x252c <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	2d 81       	ldd	r18, Y+5	; 0x05
    1b12:	3e 81       	ldd	r19, Y+6	; 0x06
    1b14:	4f 81       	ldd	r20, Y+7	; 0x07
    1b16:	58 85       	ldd	r21, Y+8	; 0x08
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	b8 d3       	rcall	.+1904   	; 0x228e <__divsf3>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	89 8b       	std	Y+17, r24	; 0x11
    1b24:	9a 8b       	std	Y+18, r25	; 0x12
    1b26:	ab 8b       	std	Y+19, r26	; 0x13
	var1 = ((double)par_p9 * press_comp) / 2147483648.0;
    1b28:	bc 8b       	std	Y+20, r27	; 0x14
    1b2a:	8e a1       	ldd	r24, Y+38	; 0x26
    1b2c:	9f a1       	ldd	r25, Y+39	; 0x27
    1b2e:	09 2e       	mov	r0, r25
    1b30:	00 0c       	add	r0, r0
    1b32:	aa 0b       	sbc	r26, r26
    1b34:	bb 0b       	sbc	r27, r27
    1b36:	bc 01       	movw	r22, r24
    1b38:	cd 01       	movw	r24, r26
    1b3a:	44 d4       	rcall	.+2184   	; 0x23c4 <__floatsisf>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	29 89       	ldd	r18, Y+17	; 0x11
    1b42:	3a 89       	ldd	r19, Y+18	; 0x12
    1b44:	4b 89       	ldd	r20, Y+19	; 0x13
    1b46:	5c 89       	ldd	r21, Y+20	; 0x14
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	ef d4       	rcall	.+2526   	; 0x252c <__mulsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	5f e4       	ldi	r21, 0x4F	; 79
    1b5a:	bc 01       	movw	r22, r24
    1b5c:	cd 01       	movw	r24, r26
    1b5e:	97 d3       	rcall	.+1838   	; 0x228e <__divsf3>
    1b60:	dc 01       	movw	r26, r24
    1b62:	cb 01       	movw	r24, r22
    1b64:	8d 83       	std	Y+5, r24	; 0x05
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	af 83       	std	Y+7, r26	; 0x07
	var2 = press_comp * ((double)par_p8 / 32768);
    1b6a:	b8 87       	std	Y+8, r27	; 0x08
    1b6c:	8c a1       	ldd	r24, Y+36	; 0x24
    1b6e:	9d a1       	ldd	r25, Y+37	; 0x25
    1b70:	09 2e       	mov	r0, r25
    1b72:	00 0c       	add	r0, r0
    1b74:	aa 0b       	sbc	r26, r26
    1b76:	bb 0b       	sbc	r27, r27
    1b78:	bc 01       	movw	r22, r24
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	23 d4       	rcall	.+2118   	; 0x23c4 <__floatsisf>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	40 e0       	ldi	r20, 0x00	; 0
    1b88:	57 e4       	ldi	r21, 0x47	; 71
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	7f d3       	rcall	.+1790   	; 0x228e <__divsf3>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	29 89       	ldd	r18, Y+17	; 0x11
    1b96:	3a 89       	ldd	r19, Y+18	; 0x12
    1b98:	4b 89       	ldd	r20, Y+19	; 0x13
    1b9a:	5c 89       	ldd	r21, Y+20	; 0x14
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	c5 d4       	rcall	.+2442   	; 0x252c <__mulsf3>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	89 87       	std	Y+9, r24	; 0x09
    1ba8:	9a 87       	std	Y+10, r25	; 0x0a
    1baa:	ab 87       	std	Y+11, r26	; 0x0b
	var3 = (press_comp / 256.0) * (press_comp / 256.0) * (press_comp / 256.0) * (par_p10 / 131072.0);
    1bac:	bc 87       	std	Y+12, r27	; 0x0c
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e8       	ldi	r20, 0x80	; 128
    1bb4:	53 e4       	ldi	r21, 0x43	; 67
    1bb6:	69 89       	ldd	r22, Y+17	; 0x11
    1bb8:	7a 89       	ldd	r23, Y+18	; 0x12
    1bba:	8b 89       	ldd	r24, Y+19	; 0x13
    1bbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bbe:	67 d3       	rcall	.+1742   	; 0x228e <__divsf3>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	6c 01       	movw	r12, r24
    1bc6:	7d 01       	movw	r14, r26
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	53 e4       	ldi	r21, 0x43	; 67
    1bd0:	69 89       	ldd	r22, Y+17	; 0x11
    1bd2:	7a 89       	ldd	r23, Y+18	; 0x12
    1bd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bd8:	5a d3       	rcall	.+1716   	; 0x228e <__divsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	9c 01       	movw	r18, r24
    1be0:	ad 01       	movw	r20, r26
    1be2:	c7 01       	movw	r24, r14
    1be4:	b6 01       	movw	r22, r12
    1be6:	a2 d4       	rcall	.+2372   	; 0x252c <__mulsf3>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	6c 01       	movw	r12, r24
    1bee:	7d 01       	movw	r14, r26
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e8       	ldi	r20, 0x80	; 128
    1bf6:	53 e4       	ldi	r21, 0x43	; 67
    1bf8:	69 89       	ldd	r22, Y+17	; 0x11
    1bfa:	7a 89       	ldd	r23, Y+18	; 0x12
    1bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1c00:	46 d3       	rcall	.+1676   	; 0x228e <__divsf3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9c 01       	movw	r18, r24
    1c08:	ad 01       	movw	r20, r26
    1c0a:	c7 01       	movw	r24, r14
    1c0c:	b6 01       	movw	r22, r12
    1c0e:	8e d4       	rcall	.+2332   	; 0x252c <__mulsf3>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	6c 01       	movw	r12, r24
    1c16:	7d 01       	movw	r14, r26
    1c18:	88 a5       	ldd	r24, Y+40	; 0x28
    1c1a:	08 2e       	mov	r0, r24
    1c1c:	00 0c       	add	r0, r0
    1c1e:	99 0b       	sbc	r25, r25
    1c20:	aa 0b       	sbc	r26, r26
    1c22:	bb 0b       	sbc	r27, r27
    1c24:	bc 01       	movw	r22, r24
    1c26:	cd 01       	movw	r24, r26
    1c28:	cd d3       	rcall	.+1946   	; 0x23c4 <__floatsisf>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	58 e4       	ldi	r21, 0x48	; 72
    1c36:	bc 01       	movw	r22, r24
    1c38:	cd 01       	movw	r24, r26
    1c3a:	29 d3       	rcall	.+1618   	; 0x228e <__divsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	9c 01       	movw	r18, r24
    1c42:	ad 01       	movw	r20, r26
    1c44:	c7 01       	movw	r24, r14
    1c46:	b6 01       	movw	r22, r12
    1c48:	71 d4       	rcall	.+2274   	; 0x252c <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	8d 87       	std	Y+13, r24	; 0x0d
    1c50:	9e 87       	std	Y+14, r25	; 0x0e
	press_comp = press_comp + (var1 + var2 + var3 + ((double)par_p7 * 128.0)) / 16.0;
    1c52:	af 87       	std	Y+15, r26	; 0x0f
    1c54:	b8 8b       	std	Y+16, r27	; 0x10
    1c56:	29 85       	ldd	r18, Y+9	; 0x09
    1c58:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c5a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1c5c:	5c 85       	ldd	r21, Y+12	; 0x0c
    1c5e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c60:	7e 81       	ldd	r23, Y+6	; 0x06
    1c62:	8f 81       	ldd	r24, Y+7	; 0x07
    1c64:	98 85       	ldd	r25, Y+8	; 0x08
    1c66:	ab d2       	rcall	.+1366   	; 0x21be <__addsf3>
    1c68:	dc 01       	movw	r26, r24
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1c6e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1c70:	4f 85       	ldd	r20, Y+15	; 0x0f
    1c72:	58 89       	ldd	r21, Y+16	; 0x10
    1c74:	bc 01       	movw	r22, r24
    1c76:	cd 01       	movw	r24, r26
    1c78:	a2 d2       	rcall	.+1348   	; 0x21be <__addsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	6c 01       	movw	r12, r24
    1c80:	7d 01       	movw	r14, r26
    1c82:	8b a1       	ldd	r24, Y+35	; 0x23
    1c84:	08 2e       	mov	r0, r24
    1c86:	00 0c       	add	r0, r0
    1c88:	99 0b       	sbc	r25, r25
    1c8a:	aa 0b       	sbc	r26, r26
    1c8c:	bb 0b       	sbc	r27, r27
    1c8e:	bc 01       	movw	r22, r24
    1c90:	cd 01       	movw	r24, r26
    1c92:	98 d3       	rcall	.+1840   	; 0x23c4 <__floatsisf>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	53 e4       	ldi	r21, 0x43	; 67
    1ca0:	bc 01       	movw	r22, r24
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	43 d4       	rcall	.+2182   	; 0x252c <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	9c 01       	movw	r18, r24
    1cac:	ad 01       	movw	r20, r26
    1cae:	c7 01       	movw	r24, r14
    1cb0:	b6 01       	movw	r22, r12
    1cb2:	85 d2       	rcall	.+1290   	; 0x21be <__addsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	40 e8       	ldi	r20, 0x80	; 128
    1cbe:	51 e4       	ldi	r21, 0x41	; 65
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	e4 d2       	rcall	.+1480   	; 0x228e <__divsf3>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	9c 01       	movw	r18, r24
    1ccc:	ad 01       	movw	r20, r26
    1cce:	69 89       	ldd	r22, Y+17	; 0x11
    1cd0:	7a 89       	ldd	r23, Y+18	; 0x12
    1cd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd6:	73 d2       	rcall	.+1254   	; 0x21be <__addsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	89 8b       	std	Y+17, r24	; 0x11
    1cde:	9a 8b       	std	Y+18, r25	; 0x12
    1ce0:	ab 8b       	std	Y+19, r26	; 0x13
    1ce2:	bc 8b       	std	Y+20, r27	; 0x14
    1ce4:	89 89       	ldd	r24, Y+17	; 0x11
    1ce6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce8:	ab 89       	ldd	r26, Y+19	; 0x13
	
	return press_comp;
    1cea:	bc 89       	ldd	r27, Y+20	; 0x14
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	a9 96       	adiw	r28, 0x29	; 41
}
    1cf2:	0f b6       	in	r0, 0x3f	; 63
    1cf4:	f8 94       	cli
    1cf6:	de bf       	out	0x3e, r29	; 62
    1cf8:	0f be       	out	0x3f, r0	; 63
    1cfa:	cd bf       	out	0x3d, r28	; 61
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	ff 90       	pop	r15
    1d02:	ef 90       	pop	r14
    1d04:	df 90       	pop	r13
    1d06:	cf 90       	pop	r12
    1d08:	08 95       	ret

00001d0a <READ_HUM>:
    1d0a:	8f 92       	push	r8
    1d0c:	9f 92       	push	r9
    1d0e:	af 92       	push	r10

float READ_HUM ( void )
{
    1d10:	bf 92       	push	r11
    1d12:	cf 92       	push	r12
    1d14:	df 92       	push	r13
    1d16:	ef 92       	push	r14
    1d18:	ff 92       	push	r15
    1d1a:	cf 93       	push	r28
    1d1c:	df 93       	push	r29
    1d1e:	cd b7       	in	r28, 0x3d	; 61
    1d20:	de b7       	in	r29, 0x3e	; 62
    1d22:	ae 97       	sbiw	r28, 0x2e	; 46
    1d24:	0f b6       	in	r0, 0x3f	; 63
    1d26:	f8 94       	cli
    1d28:	de bf       	out	0x3e, r29	; 62
    1d2a:	0f be       	out	0x3f, r0	; 63
    1d2c:	cd bf       	out	0x3d, r28	; 61
	double t_comp = READ_TEMP_F();
    1d2e:	2f da       	rcall	.-2978   	; 0x118e <READ_TEMP_F>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	89 83       	std	Y+1, r24	; 0x01
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	ab 83       	std	Y+3, r26	; 0x03
    1d3a:	bc 83       	std	Y+4, r27	; 0x04
	unsigned char cAdrWork = 0;
    1d3c:	1e a6       	std	Y+46, r1	; 0x2e
	double var1 = 0;
    1d3e:	1d 82       	std	Y+5, r1	; 0x05
    1d40:	1e 82       	std	Y+6, r1	; 0x06
    1d42:	1f 82       	std	Y+7, r1	; 0x07
    1d44:	18 86       	std	Y+8, r1	; 0x08
	double var2 = 0;
    1d46:	19 86       	std	Y+9, r1	; 0x09
    1d48:	1a 86       	std	Y+10, r1	; 0x0a
    1d4a:	1b 86       	std	Y+11, r1	; 0x0b
    1d4c:	1c 86       	std	Y+12, r1	; 0x0c
	double var3 = 0;
    1d4e:	1d 86       	std	Y+13, r1	; 0x0d
    1d50:	1e 86       	std	Y+14, r1	; 0x0e
    1d52:	1f 86       	std	Y+15, r1	; 0x0f
    1d54:	18 8a       	std	Y+16, r1	; 0x10
	double var4 = 0;
    1d56:	19 8a       	std	Y+17, r1	; 0x11
    1d58:	1a 8a       	std	Y+18, r1	; 0x12
    1d5a:	1b 8a       	std	Y+19, r1	; 0x13
    1d5c:	1c 8a       	std	Y+20, r1	; 0x14
	double var5 = 0;
    1d5e:	1d 8a       	std	Y+21, r1	; 0x15
    1d60:	1e 8a       	std	Y+22, r1	; 0x16
    1d62:	1f 8a       	std	Y+23, r1	; 0x17
    1d64:	18 8e       	std	Y+24, r1	; 0x18
	double var6 = 0;
    1d66:	19 8e       	std	Y+25, r1	; 0x19
    1d68:	1a 8e       	std	Y+26, r1	; 0x1a
    1d6a:	1b 8e       	std	Y+27, r1	; 0x1b
    1d6c:	1c 8e       	std	Y+28, r1	; 0x1c
	double hum_comp = 0;
    1d6e:	1d 8e       	std	Y+29, r1	; 0x1d
    1d70:	1e 8e       	std	Y+30, r1	; 0x1e
    1d72:	1f 8e       	std	Y+31, r1	; 0x1f
    1d74:	18 a2       	std	Y+32, r1	; 0x20
	uint32_t hum_adc = 0;
    1d76:	19 a2       	std	Y+33, r1	; 0x21
    1d78:	1a a2       	std	Y+34, r1	; 0x22
    1d7a:	1b a2       	std	Y+35, r1	; 0x23
    1d7c:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t par_h1  = 0;
    1d7e:	1e a2       	std	Y+38, r1	; 0x26
    1d80:	1d a2       	std	Y+37, r1	; 0x25
	uint16_t par_h2  = 0;
    1d82:	18 a6       	std	Y+40, r1	; 0x28
    1d84:	1f a2       	std	Y+39, r1	; 0x27
	int8_t par_h3  = 0;
    1d86:	19 a6       	std	Y+41, r1	; 0x29
	int8_t par_h4  = 0;
    1d88:	1a a6       	std	Y+42, r1	; 0x2a
	int8_t par_h5  = 0;
    1d8a:	1b a6       	std	Y+43, r1	; 0x2b
	int8_t par_h6  = 0;
    1d8c:	1c a6       	std	Y+44, r1	; 0x2c
	int8_t par_h7  = 0;
    1d8e:	1d a6       	std	Y+45, r1	; 0x2d
		
	cAdrWork = REG_HUM_MSB;
    1d90:	85 e2       	ldi	r24, 0x25	; 37
    1d92:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1d94:	ce 01       	movw	r24, r28
    1d96:	8e 96       	adiw	r24, 0x2e	; 46
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	41 e0       	ldi	r20, 0x01	; 1
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	86 e7       	ldi	r24, 0x76	; 118
    1da0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    1da4:	42 e0       	ldi	r20, 0x02	; 2
    1da6:	60 e2       	ldi	r22, 0x20	; 32
    1da8:	72 e0       	ldi	r23, 0x02	; 2
    1daa:	86 e7       	ldi	r24, 0x76	; 118
    1dac:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	hum_adc = (0xFF00 & (cRecieve[0] << 8)) | (0x00FF & (cRecieve[1]));
    1db0:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1db4:	88 2f       	mov	r24, r24
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	98 2f       	mov	r25, r24
    1dba:	88 27       	eor	r24, r24
    1dbc:	9c 01       	movw	r18, r24
    1dbe:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1dc2:	88 2f       	mov	r24, r24
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	82 2b       	or	r24, r18
    1dc8:	93 2b       	or	r25, r19
    1dca:	cc 01       	movw	r24, r24
    1dcc:	a0 e0       	ldi	r26, 0x00	; 0
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	89 a3       	std	Y+33, r24	; 0x21
    1dd2:	9a a3       	std	Y+34, r25	; 0x22
    1dd4:	ab a3       	std	Y+35, r26	; 0x23
    1dd6:	bc a3       	std	Y+36, r27	; 0x24
	
	
	cAdrWork = 0xE2;
    1dd8:	82 ee       	ldi	r24, 0xE2	; 226
    1dda:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1ddc:	ce 01       	movw	r24, r28
    1dde:	8e 96       	adiw	r24, 0x2e	; 46
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	41 e0       	ldi	r20, 0x01	; 1
    1de4:	bc 01       	movw	r22, r24
    1de6:	86 e7       	ldi	r24, 0x76	; 118
    1de8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    1dec:	42 e0       	ldi	r20, 0x02	; 2
    1dee:	60 e2       	ldi	r22, 0x20	; 32
    1df0:	72 e0       	ldi	r23, 0x02	; 2
    1df2:	86 e7       	ldi	r24, 0x76	; 118
    1df4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_h1 = (0x0FF0 & (cRecieve[1] << 4)) | (0x000F & (cRecieve[0]));
    1df8:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	82 95       	swap	r24
    1e02:	92 95       	swap	r25
    1e04:	90 7f       	andi	r25, 0xF0	; 240
    1e06:	98 27       	eor	r25, r24
    1e08:	80 7f       	andi	r24, 0xF0	; 240
    1e0a:	98 27       	eor	r25, r24
    1e0c:	9c 01       	movw	r18, r24
    1e0e:	20 7f       	andi	r18, 0xF0	; 240
    1e10:	3f 70       	andi	r19, 0x0F	; 15
    1e12:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1e16:	88 2f       	mov	r24, r24
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	8f 70       	andi	r24, 0x0F	; 15
    1e1c:	99 27       	eor	r25, r25
    1e1e:	82 2b       	or	r24, r18
    1e20:	93 2b       	or	r25, r19
    1e22:	9e a3       	std	Y+38, r25	; 0x26
    1e24:	8d a3       	std	Y+37, r24	; 0x25
	
	cAdrWork = 0xE1;
    1e26:	81 ee       	ldi	r24, 0xE1	; 225
    1e28:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	8e 96       	adiw	r24, 0x2e	; 46
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	bc 01       	movw	r22, r24
    1e34:	86 e7       	ldi	r24, 0x76	; 118
    1e36:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    1e3a:	42 e0       	ldi	r20, 0x02	; 2
    1e3c:	60 e2       	ldi	r22, 0x20	; 32
    1e3e:	72 e0       	ldi	r23, 0x02	; 2
    1e40:	86 e7       	ldi	r24, 0x76	; 118
    1e42:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_h2 = (0x0FF0 & (cRecieve[0] << 4)) | (0x000F & ((cRecieve[1] & 0xF0) >> 4));
    1e46:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1e4a:	88 2f       	mov	r24, r24
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	82 95       	swap	r24
    1e50:	92 95       	swap	r25
    1e52:	90 7f       	andi	r25, 0xF0	; 240
    1e54:	98 27       	eor	r25, r24
    1e56:	80 7f       	andi	r24, 0xF0	; 240
    1e58:	98 27       	eor	r25, r24
    1e5a:	9c 01       	movw	r18, r24
    1e5c:	20 7f       	andi	r18, 0xF0	; 240
    1e5e:	3f 70       	andi	r19, 0x0F	; 15
    1e60:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1e64:	82 95       	swap	r24
    1e66:	8f 70       	andi	r24, 0x0F	; 15
    1e68:	88 2f       	mov	r24, r24
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	8f 70       	andi	r24, 0x0F	; 15
    1e6e:	99 27       	eor	r25, r25
    1e70:	82 2b       	or	r24, r18
    1e72:	93 2b       	or	r25, r19
    1e74:	98 a7       	std	Y+40, r25	; 0x28
    1e76:	8f a3       	std	Y+39, r24	; 0x27
	
	cAdrWork = 0xE4;
    1e78:	84 ee       	ldi	r24, 0xE4	; 228
    1e7a:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1e7c:	ce 01       	movw	r24, r28
    1e7e:	8e 96       	adiw	r24, 0x2e	; 46
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	bc 01       	movw	r22, r24
    1e86:	86 e7       	ldi	r24, 0x76	; 118
    1e88:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	60 e2       	ldi	r22, 0x20	; 32
    1e90:	72 e0       	ldi	r23, 0x02	; 2
    1e92:	86 e7       	ldi	r24, 0x76	; 118
    1e94:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_h3 = cRecieve[0];
    1e98:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1e9c:	89 a7       	std	Y+41, r24	; 0x29
	
	cAdrWork = 0xE5;
    1e9e:	85 ee       	ldi	r24, 0xE5	; 229
    1ea0:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1ea2:	ce 01       	movw	r24, r28
    1ea4:	8e 96       	adiw	r24, 0x2e	; 46
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	bc 01       	movw	r22, r24
    1eac:	86 e7       	ldi	r24, 0x76	; 118
    1eae:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	60 e2       	ldi	r22, 0x20	; 32
    1eb6:	72 e0       	ldi	r23, 0x02	; 2
    1eb8:	86 e7       	ldi	r24, 0x76	; 118
    1eba:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_h4 = cRecieve[0];
    1ebe:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1ec2:	8a a7       	std	Y+42, r24	; 0x2a
	
	cAdrWork = 0xE6;
    1ec4:	86 ee       	ldi	r24, 0xE6	; 230
    1ec6:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1ec8:	ce 01       	movw	r24, r28
    1eca:	8e 96       	adiw	r24, 0x2e	; 46
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	86 e7       	ldi	r24, 0x76	; 118
    1ed4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    1ed8:	41 e0       	ldi	r20, 0x01	; 1
    1eda:	60 e2       	ldi	r22, 0x20	; 32
    1edc:	72 e0       	ldi	r23, 0x02	; 2
    1ede:	86 e7       	ldi	r24, 0x76	; 118
    1ee0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_h5 = cRecieve[0];
    1ee4:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1ee8:	8b a7       	std	Y+43, r24	; 0x2b
	
	cAdrWork = 0xE7;
    1eea:	87 ee       	ldi	r24, 0xE7	; 231
    1eec:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1eee:	ce 01       	movw	r24, r28
    1ef0:	8e 96       	adiw	r24, 0x2e	; 46
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	41 e0       	ldi	r20, 0x01	; 1
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	86 e7       	ldi	r24, 0x76	; 118
    1efa:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	60 e2       	ldi	r22, 0x20	; 32
    1f02:	72 e0       	ldi	r23, 0x02	; 2
    1f04:	86 e7       	ldi	r24, 0x76	; 118
    1f06:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_h6 = cRecieve[0];
    1f0a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1f0e:	8c a7       	std	Y+44, r24	; 0x2c
	
	cAdrWork = 0xE4;
    1f10:	84 ee       	ldi	r24, 0xE4	; 228
    1f12:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1f14:	ce 01       	movw	r24, r28
    1f16:	8e 96       	adiw	r24, 0x2e	; 46
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	41 e0       	ldi	r20, 0x01	; 1
    1f1c:	bc 01       	movw	r22, r24
    1f1e:	86 e7       	ldi	r24, 0x76	; 118
    1f20:	0e 94 7d 02 	call	0x4fa	; 0x4fa <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	60 e2       	ldi	r22, 0x20	; 32
    1f28:	72 e0       	ldi	r23, 0x02	; 2
    1f2a:	86 e7       	ldi	r24, 0x76	; 118
    1f2c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <twi_master_receive>
	par_h7 = cRecieve[0];
    1f30:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1f34:	8d a7       	std	Y+45, r24	; 0x2d
		
	var1 = hum_adc - (((double)par_h1 * 16.0) + (((double)par_h3 / 2.0) * t_comp));
    1f36:	69 a1       	ldd	r22, Y+33	; 0x21
    1f38:	7a a1       	ldd	r23, Y+34	; 0x22
    1f3a:	8b a1       	ldd	r24, Y+35	; 0x23
    1f3c:	9c a1       	ldd	r25, Y+36	; 0x24
    1f3e:	40 d2       	rcall	.+1152   	; 0x23c0 <__floatunsisf>
    1f40:	6b 01       	movw	r12, r22
    1f42:	7c 01       	movw	r14, r24
    1f44:	8d a1       	ldd	r24, Y+37	; 0x25
    1f46:	9e a1       	ldd	r25, Y+38	; 0x26
    1f48:	cc 01       	movw	r24, r24
    1f4a:	a0 e0       	ldi	r26, 0x00	; 0
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	bc 01       	movw	r22, r24
    1f50:	cd 01       	movw	r24, r26
    1f52:	36 d2       	rcall	.+1132   	; 0x23c0 <__floatunsisf>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e8       	ldi	r20, 0x80	; 128
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	bc 01       	movw	r22, r24
    1f62:	cd 01       	movw	r24, r26
    1f64:	e3 d2       	rcall	.+1478   	; 0x252c <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	4c 01       	movw	r8, r24
    1f6c:	5d 01       	movw	r10, r26
    1f6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1f70:	08 2e       	mov	r0, r24
    1f72:	00 0c       	add	r0, r0
    1f74:	99 0b       	sbc	r25, r25
    1f76:	aa 0b       	sbc	r26, r26
    1f78:	bb 0b       	sbc	r27, r27
    1f7a:	bc 01       	movw	r22, r24
    1f7c:	cd 01       	movw	r24, r26
    1f7e:	22 d2       	rcall	.+1092   	; 0x23c4 <__floatsisf>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e0       	ldi	r20, 0x00	; 0
    1f8a:	50 e4       	ldi	r21, 0x40	; 64
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	7e d1       	rcall	.+764    	; 0x228e <__divsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	29 81       	ldd	r18, Y+1	; 0x01
    1f98:	3a 81       	ldd	r19, Y+2	; 0x02
    1f9a:	4b 81       	ldd	r20, Y+3	; 0x03
    1f9c:	5c 81       	ldd	r21, Y+4	; 0x04
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	c4 d2       	rcall	.+1416   	; 0x252c <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	9c 01       	movw	r18, r24
    1faa:	ad 01       	movw	r20, r26
    1fac:	c5 01       	movw	r24, r10
    1fae:	b4 01       	movw	r22, r8
    1fb0:	06 d1       	rcall	.+524    	; 0x21be <__addsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	9c 01       	movw	r18, r24
    1fb8:	ad 01       	movw	r20, r26
    1fba:	c7 01       	movw	r24, r14
    1fbc:	b6 01       	movw	r22, r12
    1fbe:	fe d0       	rcall	.+508    	; 0x21bc <__subsf3>
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	cb 01       	movw	r24, r22
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
    1fc6:	9e 83       	std	Y+6, r25	; 0x06
    1fc8:	af 83       	std	Y+7, r26	; 0x07
    1fca:	b8 87       	std	Y+8, r27	; 0x08
	var2 = var1 * (((double)par_h2 / 262144.0) * (1.0 + (((double)par_h4 / 16384.0) * t_comp) + (((double)par_h5 / 1048576.0) * t_comp * t_comp)));
    1fcc:	8f a1       	ldd	r24, Y+39	; 0x27
    1fce:	98 a5       	ldd	r25, Y+40	; 0x28
    1fd0:	cc 01       	movw	r24, r24
    1fd2:	a0 e0       	ldi	r26, 0x00	; 0
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	f2 d1       	rcall	.+996    	; 0x23c0 <__floatunsisf>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e8       	ldi	r20, 0x80	; 128
    1fe6:	58 e4       	ldi	r21, 0x48	; 72
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	50 d1       	rcall	.+672    	; 0x228e <__divsf3>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	6c 01       	movw	r12, r24
    1ff4:	7d 01       	movw	r14, r26
    1ff6:	8a a5       	ldd	r24, Y+42	; 0x2a
    1ff8:	08 2e       	mov	r0, r24
    1ffa:	00 0c       	add	r0, r0
    1ffc:	99 0b       	sbc	r25, r25
    1ffe:	aa 0b       	sbc	r26, r26
    2000:	bb 0b       	sbc	r27, r27
    2002:	bc 01       	movw	r22, r24
    2004:	cd 01       	movw	r24, r26
    2006:	de d1       	rcall	.+956    	; 0x23c4 <__floatsisf>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	56 e4       	ldi	r21, 0x46	; 70
    2014:	bc 01       	movw	r22, r24
    2016:	cd 01       	movw	r24, r26
    2018:	3a d1       	rcall	.+628    	; 0x228e <__divsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	29 81       	ldd	r18, Y+1	; 0x01
    2020:	3a 81       	ldd	r19, Y+2	; 0x02
    2022:	4b 81       	ldd	r20, Y+3	; 0x03
    2024:	5c 81       	ldd	r21, Y+4	; 0x04
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	80 d2       	rcall	.+1280   	; 0x252c <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	40 e8       	ldi	r20, 0x80	; 128
    2036:	5f e3       	ldi	r21, 0x3F	; 63
    2038:	bc 01       	movw	r22, r24
    203a:	cd 01       	movw	r24, r26
    203c:	c0 d0       	rcall	.+384    	; 0x21be <__addsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	4c 01       	movw	r8, r24
    2044:	5d 01       	movw	r10, r26
    2046:	8b a5       	ldd	r24, Y+43	; 0x2b
    2048:	08 2e       	mov	r0, r24
    204a:	00 0c       	add	r0, r0
    204c:	99 0b       	sbc	r25, r25
    204e:	aa 0b       	sbc	r26, r26
    2050:	bb 0b       	sbc	r27, r27
    2052:	bc 01       	movw	r22, r24
    2054:	cd 01       	movw	r24, r26
    2056:	b6 d1       	rcall	.+876    	; 0x23c4 <__floatsisf>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	59 e4       	ldi	r21, 0x49	; 73
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	12 d1       	rcall	.+548    	; 0x228e <__divsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	29 81       	ldd	r18, Y+1	; 0x01
    2070:	3a 81       	ldd	r19, Y+2	; 0x02
    2072:	4b 81       	ldd	r20, Y+3	; 0x03
    2074:	5c 81       	ldd	r21, Y+4	; 0x04
    2076:	bc 01       	movw	r22, r24
    2078:	cd 01       	movw	r24, r26
    207a:	58 d2       	rcall	.+1200   	; 0x252c <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	29 81       	ldd	r18, Y+1	; 0x01
    2082:	3a 81       	ldd	r19, Y+2	; 0x02
    2084:	4b 81       	ldd	r20, Y+3	; 0x03
    2086:	5c 81       	ldd	r21, Y+4	; 0x04
    2088:	bc 01       	movw	r22, r24
    208a:	cd 01       	movw	r24, r26
    208c:	4f d2       	rcall	.+1182   	; 0x252c <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9c 01       	movw	r18, r24
    2094:	ad 01       	movw	r20, r26
    2096:	c5 01       	movw	r24, r10
    2098:	b4 01       	movw	r22, r8
    209a:	91 d0       	rcall	.+290    	; 0x21be <__addsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9c 01       	movw	r18, r24
    20a2:	ad 01       	movw	r20, r26
    20a4:	c7 01       	movw	r24, r14
    20a6:	b6 01       	movw	r22, r12
    20a8:	41 d2       	rcall	.+1154   	; 0x252c <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	2d 81       	ldd	r18, Y+5	; 0x05
    20b0:	3e 81       	ldd	r19, Y+6	; 0x06
    20b2:	4f 81       	ldd	r20, Y+7	; 0x07
    20b4:	58 85       	ldd	r21, Y+8	; 0x08
    20b6:	bc 01       	movw	r22, r24
    20b8:	cd 01       	movw	r24, r26
    20ba:	38 d2       	rcall	.+1136   	; 0x252c <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	89 87       	std	Y+9, r24	; 0x09
    20c2:	9a 87       	std	Y+10, r25	; 0x0a
    20c4:	ab 87       	std	Y+11, r26	; 0x0b
    20c6:	bc 87       	std	Y+12, r27	; 0x0c
	var3 = (double)par_h6 / 16384.0;
    20c8:	8c a5       	ldd	r24, Y+44	; 0x2c
    20ca:	08 2e       	mov	r0, r24
    20cc:	00 0c       	add	r0, r0
    20ce:	99 0b       	sbc	r25, r25
    20d0:	aa 0b       	sbc	r26, r26
    20d2:	bb 0b       	sbc	r27, r27
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	75 d1       	rcall	.+746    	; 0x23c4 <__floatsisf>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e8       	ldi	r20, 0x80	; 128
    20e4:	56 e4       	ldi	r21, 0x46	; 70
    20e6:	bc 01       	movw	r22, r24
    20e8:	cd 01       	movw	r24, r26
    20ea:	d1 d0       	rcall	.+418    	; 0x228e <__divsf3>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	8d 87       	std	Y+13, r24	; 0x0d
    20f2:	9e 87       	std	Y+14, r25	; 0x0e
    20f4:	af 87       	std	Y+15, r26	; 0x0f
    20f6:	b8 8b       	std	Y+16, r27	; 0x10

	var4 = (double)par_h7 / 2097152.0;
    20f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    20fa:	08 2e       	mov	r0, r24
    20fc:	00 0c       	add	r0, r0
    20fe:	99 0b       	sbc	r25, r25
    2100:	aa 0b       	sbc	r26, r26
    2102:	bb 0b       	sbc	r27, r27
    2104:	bc 01       	movw	r22, r24
    2106:	cd 01       	movw	r24, r26
    2108:	5d d1       	rcall	.+698    	; 0x23c4 <__floatsisf>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	40 e0       	ldi	r20, 0x00	; 0
    2114:	5a e4       	ldi	r21, 0x4A	; 74
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	b9 d0       	rcall	.+370    	; 0x228e <__divsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	89 8b       	std	Y+17, r24	; 0x11
    2122:	9a 8b       	std	Y+18, r25	; 0x12
    2124:	ab 8b       	std	Y+19, r26	; 0x13
    2126:	bc 8b       	std	Y+20, r27	; 0x14
	hum_comp = var2 +((var3 + (var4 * t_comp)) * var2 * var2);
    2128:	29 81       	ldd	r18, Y+1	; 0x01
    212a:	3a 81       	ldd	r19, Y+2	; 0x02
    212c:	4b 81       	ldd	r20, Y+3	; 0x03
    212e:	5c 81       	ldd	r21, Y+4	; 0x04
    2130:	69 89       	ldd	r22, Y+17	; 0x11
    2132:	7a 89       	ldd	r23, Y+18	; 0x12
    2134:	8b 89       	ldd	r24, Y+19	; 0x13
    2136:	9c 89       	ldd	r25, Y+20	; 0x14
    2138:	f9 d1       	rcall	.+1010   	; 0x252c <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2140:	3e 85       	ldd	r19, Y+14	; 0x0e
    2142:	4f 85       	ldd	r20, Y+15	; 0x0f
    2144:	58 89       	ldd	r21, Y+16	; 0x10
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	39 d0       	rcall	.+114    	; 0x21be <__addsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	29 85       	ldd	r18, Y+9	; 0x09
    2152:	3a 85       	ldd	r19, Y+10	; 0x0a
    2154:	4b 85       	ldd	r20, Y+11	; 0x0b
    2156:	5c 85       	ldd	r21, Y+12	; 0x0c
    2158:	bc 01       	movw	r22, r24
    215a:	cd 01       	movw	r24, r26
    215c:	e7 d1       	rcall	.+974    	; 0x252c <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	29 85       	ldd	r18, Y+9	; 0x09
    2164:	3a 85       	ldd	r19, Y+10	; 0x0a
    2166:	4b 85       	ldd	r20, Y+11	; 0x0b
    2168:	5c 85       	ldd	r21, Y+12	; 0x0c
    216a:	bc 01       	movw	r22, r24
    216c:	cd 01       	movw	r24, r26
    216e:	de d1       	rcall	.+956    	; 0x252c <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	29 85       	ldd	r18, Y+9	; 0x09
    2176:	3a 85       	ldd	r19, Y+10	; 0x0a
    2178:	4b 85       	ldd	r20, Y+11	; 0x0b
    217a:	5c 85       	ldd	r21, Y+12	; 0x0c
    217c:	bc 01       	movw	r22, r24
    217e:	cd 01       	movw	r24, r26
    2180:	1e d0       	rcall	.+60     	; 0x21be <__addsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	8d 8f       	std	Y+29, r24	; 0x1d
    2188:	9e 8f       	std	Y+30, r25	; 0x1e
    218a:	af 8f       	std	Y+31, r26	; 0x1f
    218c:	b8 a3       	std	Y+32, r27	; 0x20
    218e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2190:	9e 8d       	ldd	r25, Y+30	; 0x1e
	
	
	return hum_comp;
    2192:	af 8d       	ldd	r26, Y+31	; 0x1f
    2194:	b8 a1       	ldd	r27, Y+32	; 0x20
    2196:	bc 01       	movw	r22, r24
    2198:	cd 01       	movw	r24, r26
}
    219a:	ae 96       	adiw	r28, 0x2e	; 46
    219c:	0f b6       	in	r0, 0x3f	; 63
    219e:	f8 94       	cli
    21a0:	de bf       	out	0x3e, r29	; 62
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	cd bf       	out	0x3d, r28	; 61
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	ff 90       	pop	r15
    21ac:	ef 90       	pop	r14
    21ae:	df 90       	pop	r13
    21b0:	cf 90       	pop	r12
    21b2:	bf 90       	pop	r11
    21b4:	af 90       	pop	r10
    21b6:	9f 90       	pop	r9
    21b8:	8f 90       	pop	r8
    21ba:	08 95       	ret

000021bc <__subsf3>:
    21bc:	50 58       	subi	r21, 0x80	; 128

000021be <__addsf3>:
    21be:	bb 27       	eor	r27, r27
    21c0:	aa 27       	eor	r26, r26
    21c2:	0e d0       	rcall	.+28     	; 0x21e0 <__addsf3x>
    21c4:	75 c1       	rjmp	.+746    	; 0x24b0 <__fp_round>
    21c6:	66 d1       	rcall	.+716    	; 0x2494 <__fp_pscA>
    21c8:	30 f0       	brcs	.+12     	; 0x21d6 <__addsf3+0x18>
    21ca:	6b d1       	rcall	.+726    	; 0x24a2 <__fp_pscB>
    21cc:	20 f0       	brcs	.+8      	; 0x21d6 <__addsf3+0x18>
    21ce:	31 f4       	brne	.+12     	; 0x21dc <__addsf3+0x1e>
    21d0:	9f 3f       	cpi	r25, 0xFF	; 255
    21d2:	11 f4       	brne	.+4      	; 0x21d8 <__addsf3+0x1a>
    21d4:	1e f4       	brtc	.+6      	; 0x21dc <__addsf3+0x1e>
    21d6:	5b c1       	rjmp	.+694    	; 0x248e <__fp_nan>
    21d8:	0e f4       	brtc	.+2      	; 0x21dc <__addsf3+0x1e>
    21da:	e0 95       	com	r30
    21dc:	e7 fb       	bst	r30, 7
    21de:	51 c1       	rjmp	.+674    	; 0x2482 <__fp_inf>

000021e0 <__addsf3x>:
    21e0:	e9 2f       	mov	r30, r25
    21e2:	77 d1       	rcall	.+750    	; 0x24d2 <__fp_split3>
    21e4:	80 f3       	brcs	.-32     	; 0x21c6 <__addsf3+0x8>
    21e6:	ba 17       	cp	r27, r26
    21e8:	62 07       	cpc	r22, r18
    21ea:	73 07       	cpc	r23, r19
    21ec:	84 07       	cpc	r24, r20
    21ee:	95 07       	cpc	r25, r21
    21f0:	18 f0       	brcs	.+6      	; 0x21f8 <__addsf3x+0x18>
    21f2:	71 f4       	brne	.+28     	; 0x2210 <__stack+0x11>
    21f4:	9e f5       	brtc	.+102    	; 0x225c <__stack+0x5d>
    21f6:	8f c1       	rjmp	.+798    	; 0x2516 <__fp_zero>
    21f8:	0e f4       	brtc	.+2      	; 0x21fc <__addsf3x+0x1c>
    21fa:	e0 95       	com	r30
    21fc:	0b 2e       	mov	r0, r27
    21fe:	ba 2f       	mov	r27, r26
    2200:	a0 2d       	mov	r26, r0
    2202:	0b 01       	movw	r0, r22
    2204:	b9 01       	movw	r22, r18
    2206:	90 01       	movw	r18, r0
    2208:	0c 01       	movw	r0, r24
    220a:	ca 01       	movw	r24, r20
    220c:	a0 01       	movw	r20, r0
    220e:	11 24       	eor	r1, r1
    2210:	ff 27       	eor	r31, r31
    2212:	59 1b       	sub	r21, r25
    2214:	99 f0       	breq	.+38     	; 0x223c <__stack+0x3d>
    2216:	59 3f       	cpi	r21, 0xF9	; 249
    2218:	50 f4       	brcc	.+20     	; 0x222e <__stack+0x2f>
    221a:	50 3e       	cpi	r21, 0xE0	; 224
    221c:	68 f1       	brcs	.+90     	; 0x2278 <__stack+0x79>
    221e:	1a 16       	cp	r1, r26
    2220:	f0 40       	sbci	r31, 0x00	; 0
    2222:	a2 2f       	mov	r26, r18
    2224:	23 2f       	mov	r18, r19
    2226:	34 2f       	mov	r19, r20
    2228:	44 27       	eor	r20, r20
    222a:	58 5f       	subi	r21, 0xF8	; 248
    222c:	f3 cf       	rjmp	.-26     	; 0x2214 <__stack+0x15>
    222e:	46 95       	lsr	r20
    2230:	37 95       	ror	r19
    2232:	27 95       	ror	r18
    2234:	a7 95       	ror	r26
    2236:	f0 40       	sbci	r31, 0x00	; 0
    2238:	53 95       	inc	r21
    223a:	c9 f7       	brne	.-14     	; 0x222e <__stack+0x2f>
    223c:	7e f4       	brtc	.+30     	; 0x225c <__stack+0x5d>
    223e:	1f 16       	cp	r1, r31
    2240:	ba 0b       	sbc	r27, r26
    2242:	62 0b       	sbc	r22, r18
    2244:	73 0b       	sbc	r23, r19
    2246:	84 0b       	sbc	r24, r20
    2248:	ba f0       	brmi	.+46     	; 0x2278 <__stack+0x79>
    224a:	91 50       	subi	r25, 0x01	; 1
    224c:	a1 f0       	breq	.+40     	; 0x2276 <__stack+0x77>
    224e:	ff 0f       	add	r31, r31
    2250:	bb 1f       	adc	r27, r27
    2252:	66 1f       	adc	r22, r22
    2254:	77 1f       	adc	r23, r23
    2256:	88 1f       	adc	r24, r24
    2258:	c2 f7       	brpl	.-16     	; 0x224a <__stack+0x4b>
    225a:	0e c0       	rjmp	.+28     	; 0x2278 <__stack+0x79>
    225c:	ba 0f       	add	r27, r26
    225e:	62 1f       	adc	r22, r18
    2260:	73 1f       	adc	r23, r19
    2262:	84 1f       	adc	r24, r20
    2264:	48 f4       	brcc	.+18     	; 0x2278 <__stack+0x79>
    2266:	87 95       	ror	r24
    2268:	77 95       	ror	r23
    226a:	67 95       	ror	r22
    226c:	b7 95       	ror	r27
    226e:	f7 95       	ror	r31
    2270:	9e 3f       	cpi	r25, 0xFE	; 254
    2272:	08 f0       	brcs	.+2      	; 0x2276 <__stack+0x77>
    2274:	b3 cf       	rjmp	.-154    	; 0x21dc <__addsf3+0x1e>
    2276:	93 95       	inc	r25
    2278:	88 0f       	add	r24, r24
    227a:	08 f0       	brcs	.+2      	; 0x227e <__stack+0x7f>
    227c:	99 27       	eor	r25, r25
    227e:	ee 0f       	add	r30, r30
    2280:	97 95       	ror	r25
    2282:	87 95       	ror	r24
    2284:	08 95       	ret

00002286 <__cmpsf2>:
    2286:	d9 d0       	rcall	.+434    	; 0x243a <__fp_cmp>
    2288:	08 f4       	brcc	.+2      	; 0x228c <__cmpsf2+0x6>
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	08 95       	ret

0000228e <__divsf3>:
    228e:	0c d0       	rcall	.+24     	; 0x22a8 <__divsf3x>
    2290:	0f c1       	rjmp	.+542    	; 0x24b0 <__fp_round>
    2292:	07 d1       	rcall	.+526    	; 0x24a2 <__fp_pscB>
    2294:	40 f0       	brcs	.+16     	; 0x22a6 <__divsf3+0x18>
    2296:	fe d0       	rcall	.+508    	; 0x2494 <__fp_pscA>
    2298:	30 f0       	brcs	.+12     	; 0x22a6 <__divsf3+0x18>
    229a:	21 f4       	brne	.+8      	; 0x22a4 <__divsf3+0x16>
    229c:	5f 3f       	cpi	r21, 0xFF	; 255
    229e:	19 f0       	breq	.+6      	; 0x22a6 <__divsf3+0x18>
    22a0:	f0 c0       	rjmp	.+480    	; 0x2482 <__fp_inf>
    22a2:	51 11       	cpse	r21, r1
    22a4:	39 c1       	rjmp	.+626    	; 0x2518 <__fp_szero>
    22a6:	f3 c0       	rjmp	.+486    	; 0x248e <__fp_nan>

000022a8 <__divsf3x>:
    22a8:	14 d1       	rcall	.+552    	; 0x24d2 <__fp_split3>
    22aa:	98 f3       	brcs	.-26     	; 0x2292 <__divsf3+0x4>

000022ac <__divsf3_pse>:
    22ac:	99 23       	and	r25, r25
    22ae:	c9 f3       	breq	.-14     	; 0x22a2 <__divsf3+0x14>
    22b0:	55 23       	and	r21, r21
    22b2:	b1 f3       	breq	.-20     	; 0x22a0 <__divsf3+0x12>
    22b4:	95 1b       	sub	r25, r21
    22b6:	55 0b       	sbc	r21, r21
    22b8:	bb 27       	eor	r27, r27
    22ba:	aa 27       	eor	r26, r26
    22bc:	62 17       	cp	r22, r18
    22be:	73 07       	cpc	r23, r19
    22c0:	84 07       	cpc	r24, r20
    22c2:	38 f0       	brcs	.+14     	; 0x22d2 <__divsf3_pse+0x26>
    22c4:	9f 5f       	subi	r25, 0xFF	; 255
    22c6:	5f 4f       	sbci	r21, 0xFF	; 255
    22c8:	22 0f       	add	r18, r18
    22ca:	33 1f       	adc	r19, r19
    22cc:	44 1f       	adc	r20, r20
    22ce:	aa 1f       	adc	r26, r26
    22d0:	a9 f3       	breq	.-22     	; 0x22bc <__divsf3_pse+0x10>
    22d2:	33 d0       	rcall	.+102    	; 0x233a <__divsf3_pse+0x8e>
    22d4:	0e 2e       	mov	r0, r30
    22d6:	3a f0       	brmi	.+14     	; 0x22e6 <__divsf3_pse+0x3a>
    22d8:	e0 e8       	ldi	r30, 0x80	; 128
    22da:	30 d0       	rcall	.+96     	; 0x233c <__divsf3_pse+0x90>
    22dc:	91 50       	subi	r25, 0x01	; 1
    22de:	50 40       	sbci	r21, 0x00	; 0
    22e0:	e6 95       	lsr	r30
    22e2:	00 1c       	adc	r0, r0
    22e4:	ca f7       	brpl	.-14     	; 0x22d8 <__divsf3_pse+0x2c>
    22e6:	29 d0       	rcall	.+82     	; 0x233a <__divsf3_pse+0x8e>
    22e8:	fe 2f       	mov	r31, r30
    22ea:	27 d0       	rcall	.+78     	; 0x233a <__divsf3_pse+0x8e>
    22ec:	66 0f       	add	r22, r22
    22ee:	77 1f       	adc	r23, r23
    22f0:	88 1f       	adc	r24, r24
    22f2:	bb 1f       	adc	r27, r27
    22f4:	26 17       	cp	r18, r22
    22f6:	37 07       	cpc	r19, r23
    22f8:	48 07       	cpc	r20, r24
    22fa:	ab 07       	cpc	r26, r27
    22fc:	b0 e8       	ldi	r27, 0x80	; 128
    22fe:	09 f0       	breq	.+2      	; 0x2302 <__divsf3_pse+0x56>
    2300:	bb 0b       	sbc	r27, r27
    2302:	80 2d       	mov	r24, r0
    2304:	bf 01       	movw	r22, r30
    2306:	ff 27       	eor	r31, r31
    2308:	93 58       	subi	r25, 0x83	; 131
    230a:	5f 4f       	sbci	r21, 0xFF	; 255
    230c:	2a f0       	brmi	.+10     	; 0x2318 <__divsf3_pse+0x6c>
    230e:	9e 3f       	cpi	r25, 0xFE	; 254
    2310:	51 05       	cpc	r21, r1
    2312:	68 f0       	brcs	.+26     	; 0x232e <__divsf3_pse+0x82>
    2314:	b6 c0       	rjmp	.+364    	; 0x2482 <__fp_inf>
    2316:	00 c1       	rjmp	.+512    	; 0x2518 <__fp_szero>
    2318:	5f 3f       	cpi	r21, 0xFF	; 255
    231a:	ec f3       	brlt	.-6      	; 0x2316 <__divsf3_pse+0x6a>
    231c:	98 3e       	cpi	r25, 0xE8	; 232
    231e:	dc f3       	brlt	.-10     	; 0x2316 <__divsf3_pse+0x6a>
    2320:	86 95       	lsr	r24
    2322:	77 95       	ror	r23
    2324:	67 95       	ror	r22
    2326:	b7 95       	ror	r27
    2328:	f7 95       	ror	r31
    232a:	9f 5f       	subi	r25, 0xFF	; 255
    232c:	c9 f7       	brne	.-14     	; 0x2320 <__divsf3_pse+0x74>
    232e:	88 0f       	add	r24, r24
    2330:	91 1d       	adc	r25, r1
    2332:	96 95       	lsr	r25
    2334:	87 95       	ror	r24
    2336:	97 f9       	bld	r25, 7
    2338:	08 95       	ret
    233a:	e1 e0       	ldi	r30, 0x01	; 1
    233c:	66 0f       	add	r22, r22
    233e:	77 1f       	adc	r23, r23
    2340:	88 1f       	adc	r24, r24
    2342:	bb 1f       	adc	r27, r27
    2344:	62 17       	cp	r22, r18
    2346:	73 07       	cpc	r23, r19
    2348:	84 07       	cpc	r24, r20
    234a:	ba 07       	cpc	r27, r26
    234c:	20 f0       	brcs	.+8      	; 0x2356 <__divsf3_pse+0xaa>
    234e:	62 1b       	sub	r22, r18
    2350:	73 0b       	sbc	r23, r19
    2352:	84 0b       	sbc	r24, r20
    2354:	ba 0b       	sbc	r27, r26
    2356:	ee 1f       	adc	r30, r30
    2358:	88 f7       	brcc	.-30     	; 0x233c <__divsf3_pse+0x90>
    235a:	e0 95       	com	r30
    235c:	08 95       	ret

0000235e <__fixsfsi>:
    235e:	04 d0       	rcall	.+8      	; 0x2368 <__fixunssfsi>
    2360:	68 94       	set
    2362:	b1 11       	cpse	r27, r1
    2364:	d9 c0       	rjmp	.+434    	; 0x2518 <__fp_szero>
    2366:	08 95       	ret

00002368 <__fixunssfsi>:
    2368:	bc d0       	rcall	.+376    	; 0x24e2 <__fp_splitA>
    236a:	88 f0       	brcs	.+34     	; 0x238e <__fixunssfsi+0x26>
    236c:	9f 57       	subi	r25, 0x7F	; 127
    236e:	90 f0       	brcs	.+36     	; 0x2394 <__fixunssfsi+0x2c>
    2370:	b9 2f       	mov	r27, r25
    2372:	99 27       	eor	r25, r25
    2374:	b7 51       	subi	r27, 0x17	; 23
    2376:	a0 f0       	brcs	.+40     	; 0x23a0 <__fixunssfsi+0x38>
    2378:	d1 f0       	breq	.+52     	; 0x23ae <__fixunssfsi+0x46>
    237a:	66 0f       	add	r22, r22
    237c:	77 1f       	adc	r23, r23
    237e:	88 1f       	adc	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	1a f0       	brmi	.+6      	; 0x238a <__fixunssfsi+0x22>
    2384:	ba 95       	dec	r27
    2386:	c9 f7       	brne	.-14     	; 0x237a <__fixunssfsi+0x12>
    2388:	12 c0       	rjmp	.+36     	; 0x23ae <__fixunssfsi+0x46>
    238a:	b1 30       	cpi	r27, 0x01	; 1
    238c:	81 f0       	breq	.+32     	; 0x23ae <__fixunssfsi+0x46>
    238e:	c3 d0       	rcall	.+390    	; 0x2516 <__fp_zero>
    2390:	b1 e0       	ldi	r27, 0x01	; 1
    2392:	08 95       	ret
    2394:	c0 c0       	rjmp	.+384    	; 0x2516 <__fp_zero>
    2396:	67 2f       	mov	r22, r23
    2398:	78 2f       	mov	r23, r24
    239a:	88 27       	eor	r24, r24
    239c:	b8 5f       	subi	r27, 0xF8	; 248
    239e:	39 f0       	breq	.+14     	; 0x23ae <__fixunssfsi+0x46>
    23a0:	b9 3f       	cpi	r27, 0xF9	; 249
    23a2:	cc f3       	brlt	.-14     	; 0x2396 <__fixunssfsi+0x2e>
    23a4:	86 95       	lsr	r24
    23a6:	77 95       	ror	r23
    23a8:	67 95       	ror	r22
    23aa:	b3 95       	inc	r27
    23ac:	d9 f7       	brne	.-10     	; 0x23a4 <__fixunssfsi+0x3c>
    23ae:	3e f4       	brtc	.+14     	; 0x23be <__fixunssfsi+0x56>
    23b0:	90 95       	com	r25
    23b2:	80 95       	com	r24
    23b4:	70 95       	com	r23
    23b6:	61 95       	neg	r22
    23b8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ba:	8f 4f       	sbci	r24, 0xFF	; 255
    23bc:	9f 4f       	sbci	r25, 0xFF	; 255
    23be:	08 95       	ret

000023c0 <__floatunsisf>:
    23c0:	e8 94       	clt
    23c2:	09 c0       	rjmp	.+18     	; 0x23d6 <__floatsisf+0x12>

000023c4 <__floatsisf>:
    23c4:	97 fb       	bst	r25, 7
    23c6:	3e f4       	brtc	.+14     	; 0x23d6 <__floatsisf+0x12>
    23c8:	90 95       	com	r25
    23ca:	80 95       	com	r24
    23cc:	70 95       	com	r23
    23ce:	61 95       	neg	r22
    23d0:	7f 4f       	sbci	r23, 0xFF	; 255
    23d2:	8f 4f       	sbci	r24, 0xFF	; 255
    23d4:	9f 4f       	sbci	r25, 0xFF	; 255
    23d6:	99 23       	and	r25, r25
    23d8:	a9 f0       	breq	.+42     	; 0x2404 <__floatsisf+0x40>
    23da:	f9 2f       	mov	r31, r25
    23dc:	96 e9       	ldi	r25, 0x96	; 150
    23de:	bb 27       	eor	r27, r27
    23e0:	93 95       	inc	r25
    23e2:	f6 95       	lsr	r31
    23e4:	87 95       	ror	r24
    23e6:	77 95       	ror	r23
    23e8:	67 95       	ror	r22
    23ea:	b7 95       	ror	r27
    23ec:	f1 11       	cpse	r31, r1
    23ee:	f8 cf       	rjmp	.-16     	; 0x23e0 <__floatsisf+0x1c>
    23f0:	fa f4       	brpl	.+62     	; 0x2430 <__floatsisf+0x6c>
    23f2:	bb 0f       	add	r27, r27
    23f4:	11 f4       	brne	.+4      	; 0x23fa <__floatsisf+0x36>
    23f6:	60 ff       	sbrs	r22, 0
    23f8:	1b c0       	rjmp	.+54     	; 0x2430 <__floatsisf+0x6c>
    23fa:	6f 5f       	subi	r22, 0xFF	; 255
    23fc:	7f 4f       	sbci	r23, 0xFF	; 255
    23fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2400:	9f 4f       	sbci	r25, 0xFF	; 255
    2402:	16 c0       	rjmp	.+44     	; 0x2430 <__floatsisf+0x6c>
    2404:	88 23       	and	r24, r24
    2406:	11 f0       	breq	.+4      	; 0x240c <__floatsisf+0x48>
    2408:	96 e9       	ldi	r25, 0x96	; 150
    240a:	11 c0       	rjmp	.+34     	; 0x242e <__floatsisf+0x6a>
    240c:	77 23       	and	r23, r23
    240e:	21 f0       	breq	.+8      	; 0x2418 <__floatsisf+0x54>
    2410:	9e e8       	ldi	r25, 0x8E	; 142
    2412:	87 2f       	mov	r24, r23
    2414:	76 2f       	mov	r23, r22
    2416:	05 c0       	rjmp	.+10     	; 0x2422 <__floatsisf+0x5e>
    2418:	66 23       	and	r22, r22
    241a:	71 f0       	breq	.+28     	; 0x2438 <__floatsisf+0x74>
    241c:	96 e8       	ldi	r25, 0x86	; 134
    241e:	86 2f       	mov	r24, r22
    2420:	70 e0       	ldi	r23, 0x00	; 0
    2422:	60 e0       	ldi	r22, 0x00	; 0
    2424:	2a f0       	brmi	.+10     	; 0x2430 <__floatsisf+0x6c>
    2426:	9a 95       	dec	r25
    2428:	66 0f       	add	r22, r22
    242a:	77 1f       	adc	r23, r23
    242c:	88 1f       	adc	r24, r24
    242e:	da f7       	brpl	.-10     	; 0x2426 <__floatsisf+0x62>
    2430:	88 0f       	add	r24, r24
    2432:	96 95       	lsr	r25
    2434:	87 95       	ror	r24
    2436:	97 f9       	bld	r25, 7
    2438:	08 95       	ret

0000243a <__fp_cmp>:
    243a:	99 0f       	add	r25, r25
    243c:	00 08       	sbc	r0, r0
    243e:	55 0f       	add	r21, r21
    2440:	aa 0b       	sbc	r26, r26
    2442:	e0 e8       	ldi	r30, 0x80	; 128
    2444:	fe ef       	ldi	r31, 0xFE	; 254
    2446:	16 16       	cp	r1, r22
    2448:	17 06       	cpc	r1, r23
    244a:	e8 07       	cpc	r30, r24
    244c:	f9 07       	cpc	r31, r25
    244e:	c0 f0       	brcs	.+48     	; 0x2480 <__fp_cmp+0x46>
    2450:	12 16       	cp	r1, r18
    2452:	13 06       	cpc	r1, r19
    2454:	e4 07       	cpc	r30, r20
    2456:	f5 07       	cpc	r31, r21
    2458:	98 f0       	brcs	.+38     	; 0x2480 <__fp_cmp+0x46>
    245a:	62 1b       	sub	r22, r18
    245c:	73 0b       	sbc	r23, r19
    245e:	84 0b       	sbc	r24, r20
    2460:	95 0b       	sbc	r25, r21
    2462:	39 f4       	brne	.+14     	; 0x2472 <__fp_cmp+0x38>
    2464:	0a 26       	eor	r0, r26
    2466:	61 f0       	breq	.+24     	; 0x2480 <__fp_cmp+0x46>
    2468:	23 2b       	or	r18, r19
    246a:	24 2b       	or	r18, r20
    246c:	25 2b       	or	r18, r21
    246e:	21 f4       	brne	.+8      	; 0x2478 <__fp_cmp+0x3e>
    2470:	08 95       	ret
    2472:	0a 26       	eor	r0, r26
    2474:	09 f4       	brne	.+2      	; 0x2478 <__fp_cmp+0x3e>
    2476:	a1 40       	sbci	r26, 0x01	; 1
    2478:	a6 95       	lsr	r26
    247a:	8f ef       	ldi	r24, 0xFF	; 255
    247c:	81 1d       	adc	r24, r1
    247e:	81 1d       	adc	r24, r1
    2480:	08 95       	ret

00002482 <__fp_inf>:
    2482:	97 f9       	bld	r25, 7
    2484:	9f 67       	ori	r25, 0x7F	; 127
    2486:	80 e8       	ldi	r24, 0x80	; 128
    2488:	70 e0       	ldi	r23, 0x00	; 0
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	08 95       	ret

0000248e <__fp_nan>:
    248e:	9f ef       	ldi	r25, 0xFF	; 255
    2490:	80 ec       	ldi	r24, 0xC0	; 192
    2492:	08 95       	ret

00002494 <__fp_pscA>:
    2494:	00 24       	eor	r0, r0
    2496:	0a 94       	dec	r0
    2498:	16 16       	cp	r1, r22
    249a:	17 06       	cpc	r1, r23
    249c:	18 06       	cpc	r1, r24
    249e:	09 06       	cpc	r0, r25
    24a0:	08 95       	ret

000024a2 <__fp_pscB>:
    24a2:	00 24       	eor	r0, r0
    24a4:	0a 94       	dec	r0
    24a6:	12 16       	cp	r1, r18
    24a8:	13 06       	cpc	r1, r19
    24aa:	14 06       	cpc	r1, r20
    24ac:	05 06       	cpc	r0, r21
    24ae:	08 95       	ret

000024b0 <__fp_round>:
    24b0:	09 2e       	mov	r0, r25
    24b2:	03 94       	inc	r0
    24b4:	00 0c       	add	r0, r0
    24b6:	11 f4       	brne	.+4      	; 0x24bc <__fp_round+0xc>
    24b8:	88 23       	and	r24, r24
    24ba:	52 f0       	brmi	.+20     	; 0x24d0 <__fp_round+0x20>
    24bc:	bb 0f       	add	r27, r27
    24be:	40 f4       	brcc	.+16     	; 0x24d0 <__fp_round+0x20>
    24c0:	bf 2b       	or	r27, r31
    24c2:	11 f4       	brne	.+4      	; 0x24c8 <__fp_round+0x18>
    24c4:	60 ff       	sbrs	r22, 0
    24c6:	04 c0       	rjmp	.+8      	; 0x24d0 <__fp_round+0x20>
    24c8:	6f 5f       	subi	r22, 0xFF	; 255
    24ca:	7f 4f       	sbci	r23, 0xFF	; 255
    24cc:	8f 4f       	sbci	r24, 0xFF	; 255
    24ce:	9f 4f       	sbci	r25, 0xFF	; 255
    24d0:	08 95       	ret

000024d2 <__fp_split3>:
    24d2:	57 fd       	sbrc	r21, 7
    24d4:	90 58       	subi	r25, 0x80	; 128
    24d6:	44 0f       	add	r20, r20
    24d8:	55 1f       	adc	r21, r21
    24da:	59 f0       	breq	.+22     	; 0x24f2 <__fp_splitA+0x10>
    24dc:	5f 3f       	cpi	r21, 0xFF	; 255
    24de:	71 f0       	breq	.+28     	; 0x24fc <__fp_splitA+0x1a>
    24e0:	47 95       	ror	r20

000024e2 <__fp_splitA>:
    24e2:	88 0f       	add	r24, r24
    24e4:	97 fb       	bst	r25, 7
    24e6:	99 1f       	adc	r25, r25
    24e8:	61 f0       	breq	.+24     	; 0x2502 <__fp_splitA+0x20>
    24ea:	9f 3f       	cpi	r25, 0xFF	; 255
    24ec:	79 f0       	breq	.+30     	; 0x250c <__fp_splitA+0x2a>
    24ee:	87 95       	ror	r24
    24f0:	08 95       	ret
    24f2:	12 16       	cp	r1, r18
    24f4:	13 06       	cpc	r1, r19
    24f6:	14 06       	cpc	r1, r20
    24f8:	55 1f       	adc	r21, r21
    24fa:	f2 cf       	rjmp	.-28     	; 0x24e0 <__fp_split3+0xe>
    24fc:	46 95       	lsr	r20
    24fe:	f1 df       	rcall	.-30     	; 0x24e2 <__fp_splitA>
    2500:	08 c0       	rjmp	.+16     	; 0x2512 <__fp_splitA+0x30>
    2502:	16 16       	cp	r1, r22
    2504:	17 06       	cpc	r1, r23
    2506:	18 06       	cpc	r1, r24
    2508:	99 1f       	adc	r25, r25
    250a:	f1 cf       	rjmp	.-30     	; 0x24ee <__fp_splitA+0xc>
    250c:	86 95       	lsr	r24
    250e:	71 05       	cpc	r23, r1
    2510:	61 05       	cpc	r22, r1
    2512:	08 94       	sec
    2514:	08 95       	ret

00002516 <__fp_zero>:
    2516:	e8 94       	clt

00002518 <__fp_szero>:
    2518:	bb 27       	eor	r27, r27
    251a:	66 27       	eor	r22, r22
    251c:	77 27       	eor	r23, r23
    251e:	cb 01       	movw	r24, r22
    2520:	97 f9       	bld	r25, 7
    2522:	08 95       	ret

00002524 <__gesf2>:
    2524:	8a df       	rcall	.-236    	; 0x243a <__fp_cmp>
    2526:	08 f4       	brcc	.+2      	; 0x252a <__gesf2+0x6>
    2528:	8f ef       	ldi	r24, 0xFF	; 255
    252a:	08 95       	ret

0000252c <__mulsf3>:
    252c:	0b d0       	rcall	.+22     	; 0x2544 <__mulsf3x>
    252e:	c0 cf       	rjmp	.-128    	; 0x24b0 <__fp_round>
    2530:	b1 df       	rcall	.-158    	; 0x2494 <__fp_pscA>
    2532:	28 f0       	brcs	.+10     	; 0x253e <__mulsf3+0x12>
    2534:	b6 df       	rcall	.-148    	; 0x24a2 <__fp_pscB>
    2536:	18 f0       	brcs	.+6      	; 0x253e <__mulsf3+0x12>
    2538:	95 23       	and	r25, r21
    253a:	09 f0       	breq	.+2      	; 0x253e <__mulsf3+0x12>
    253c:	a2 cf       	rjmp	.-188    	; 0x2482 <__fp_inf>
    253e:	a7 cf       	rjmp	.-178    	; 0x248e <__fp_nan>
    2540:	11 24       	eor	r1, r1
    2542:	ea cf       	rjmp	.-44     	; 0x2518 <__fp_szero>

00002544 <__mulsf3x>:
    2544:	c6 df       	rcall	.-116    	; 0x24d2 <__fp_split3>
    2546:	a0 f3       	brcs	.-24     	; 0x2530 <__mulsf3+0x4>

00002548 <__mulsf3_pse>:
    2548:	95 9f       	mul	r25, r21
    254a:	d1 f3       	breq	.-12     	; 0x2540 <__mulsf3+0x14>
    254c:	95 0f       	add	r25, r21
    254e:	50 e0       	ldi	r21, 0x00	; 0
    2550:	55 1f       	adc	r21, r21
    2552:	62 9f       	mul	r22, r18
    2554:	f0 01       	movw	r30, r0
    2556:	72 9f       	mul	r23, r18
    2558:	bb 27       	eor	r27, r27
    255a:	f0 0d       	add	r31, r0
    255c:	b1 1d       	adc	r27, r1
    255e:	63 9f       	mul	r22, r19
    2560:	aa 27       	eor	r26, r26
    2562:	f0 0d       	add	r31, r0
    2564:	b1 1d       	adc	r27, r1
    2566:	aa 1f       	adc	r26, r26
    2568:	64 9f       	mul	r22, r20
    256a:	66 27       	eor	r22, r22
    256c:	b0 0d       	add	r27, r0
    256e:	a1 1d       	adc	r26, r1
    2570:	66 1f       	adc	r22, r22
    2572:	82 9f       	mul	r24, r18
    2574:	22 27       	eor	r18, r18
    2576:	b0 0d       	add	r27, r0
    2578:	a1 1d       	adc	r26, r1
    257a:	62 1f       	adc	r22, r18
    257c:	73 9f       	mul	r23, r19
    257e:	b0 0d       	add	r27, r0
    2580:	a1 1d       	adc	r26, r1
    2582:	62 1f       	adc	r22, r18
    2584:	83 9f       	mul	r24, r19
    2586:	a0 0d       	add	r26, r0
    2588:	61 1d       	adc	r22, r1
    258a:	22 1f       	adc	r18, r18
    258c:	74 9f       	mul	r23, r20
    258e:	33 27       	eor	r19, r19
    2590:	a0 0d       	add	r26, r0
    2592:	61 1d       	adc	r22, r1
    2594:	23 1f       	adc	r18, r19
    2596:	84 9f       	mul	r24, r20
    2598:	60 0d       	add	r22, r0
    259a:	21 1d       	adc	r18, r1
    259c:	82 2f       	mov	r24, r18
    259e:	76 2f       	mov	r23, r22
    25a0:	6a 2f       	mov	r22, r26
    25a2:	11 24       	eor	r1, r1
    25a4:	9f 57       	subi	r25, 0x7F	; 127
    25a6:	50 40       	sbci	r21, 0x00	; 0
    25a8:	8a f0       	brmi	.+34     	; 0x25cc <__mulsf3_pse+0x84>
    25aa:	e1 f0       	breq	.+56     	; 0x25e4 <__mulsf3_pse+0x9c>
    25ac:	88 23       	and	r24, r24
    25ae:	4a f0       	brmi	.+18     	; 0x25c2 <__mulsf3_pse+0x7a>
    25b0:	ee 0f       	add	r30, r30
    25b2:	ff 1f       	adc	r31, r31
    25b4:	bb 1f       	adc	r27, r27
    25b6:	66 1f       	adc	r22, r22
    25b8:	77 1f       	adc	r23, r23
    25ba:	88 1f       	adc	r24, r24
    25bc:	91 50       	subi	r25, 0x01	; 1
    25be:	50 40       	sbci	r21, 0x00	; 0
    25c0:	a9 f7       	brne	.-22     	; 0x25ac <__mulsf3_pse+0x64>
    25c2:	9e 3f       	cpi	r25, 0xFE	; 254
    25c4:	51 05       	cpc	r21, r1
    25c6:	70 f0       	brcs	.+28     	; 0x25e4 <__mulsf3_pse+0x9c>
    25c8:	5c cf       	rjmp	.-328    	; 0x2482 <__fp_inf>
    25ca:	a6 cf       	rjmp	.-180    	; 0x2518 <__fp_szero>
    25cc:	5f 3f       	cpi	r21, 0xFF	; 255
    25ce:	ec f3       	brlt	.-6      	; 0x25ca <__mulsf3_pse+0x82>
    25d0:	98 3e       	cpi	r25, 0xE8	; 232
    25d2:	dc f3       	brlt	.-10     	; 0x25ca <__mulsf3_pse+0x82>
    25d4:	86 95       	lsr	r24
    25d6:	77 95       	ror	r23
    25d8:	67 95       	ror	r22
    25da:	b7 95       	ror	r27
    25dc:	f7 95       	ror	r31
    25de:	e7 95       	ror	r30
    25e0:	9f 5f       	subi	r25, 0xFF	; 255
    25e2:	c1 f7       	brne	.-16     	; 0x25d4 <__mulsf3_pse+0x8c>
    25e4:	fe 2b       	or	r31, r30
    25e6:	88 0f       	add	r24, r24
    25e8:	91 1d       	adc	r25, r1
    25ea:	96 95       	lsr	r25
    25ec:	87 95       	ror	r24
    25ee:	97 f9       	bld	r25, 7
    25f0:	08 95       	ret

000025f2 <__tablejump2__>:
    25f2:	ee 0f       	add	r30, r30
    25f4:	ff 1f       	adc	r31, r31
    25f6:	88 1f       	adc	r24, r24
    25f8:	8b bf       	out	0x3b, r24	; 59
    25fa:	07 90       	elpm	r0, Z+
    25fc:	f6 91       	elpm	r31, Z
    25fe:	e0 2d       	mov	r30, r0
    2600:	19 94       	eijmp

00002602 <_exit>:
    2602:	f8 94       	cli

00002604 <__stop_program>:
    2604:	ff cf       	rjmp	.-2      	; 0x2604 <__stop_program>
