
BME680.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  00002704  00002798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002704  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800220  00800220  000027b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000027b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000027e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00002828  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ce3  00000000  00000000  00002968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eb5  00000000  00000000  0000464b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016d2  00000000  00000000  00005500  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000480  00000000  00000000  00006bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000add  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000969  00000000  00000000  00007b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000849a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	70 c0       	rjmp	.+224    	; 0xe2 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	34 02       	muls	r19, r20
      ce:	3a 02       	muls	r19, r26
      d0:	40 02       	muls	r20, r16
      d2:	46 02       	muls	r20, r22
      d4:	4c 02       	muls	r20, r28
      d6:	52 02       	muls	r21, r18
      d8:	58 02       	muls	r21, r24
      da:	5e 02       	muls	r21, r30
      dc:	64 02       	muls	r22, r20
      de:	6a 02       	muls	r22, r26
      e0:	6f 02       	muls	r22, r31

000000e2 <__ctors_end>:
      e2:	11 24       	eor	r1, r1
      e4:	1f be       	out	0x3f, r1	; 63
      e6:	cf ef       	ldi	r28, 0xFF	; 255
      e8:	d1 e2       	ldi	r29, 0x21	; 33
      ea:	de bf       	out	0x3e, r29	; 62
      ec:	cd bf       	out	0x3d, r28	; 61
      ee:	00 e0       	ldi	r16, 0x00	; 0
      f0:	0c bf       	out	0x3c, r16	; 60

000000f2 <__do_copy_data>:
      f2:	12 e0       	ldi	r17, 0x02	; 2
      f4:	a0 e0       	ldi	r26, 0x00	; 0
      f6:	b2 e0       	ldi	r27, 0x02	; 2
      f8:	e4 e0       	ldi	r30, 0x04	; 4
      fa:	f7 e2       	ldi	r31, 0x27	; 39
      fc:	00 e0       	ldi	r16, 0x00	; 0
      fe:	0b bf       	out	0x3b, r16	; 59
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x14>
     102:	07 90       	elpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a0 32       	cpi	r26, 0x20	; 32
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0x10>

0000010c <__do_clear_bss>:
     10c:	22 e0       	ldi	r18, 0x02	; 2
     10e:	a0 e2       	ldi	r26, 0x20	; 32
     110:	b2 e0       	ldi	r27, 0x02	; 2
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	a5 32       	cpi	r26, 0x25	; 37
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 89 0c 	call	0x1912	; 0x1912 <main>
     120:	0c 94 80 13 	jmp	0x2700	; 0x2700 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <USART0Init>:
	UBRR1H = (uiUbrr >> 8);		// Baudrate High Register setzen
	UBRR1L = uiUbrr;			// Baudrate Low Register  setzen
	UCSR1A = INIT_UCSR1A;		// UCSRA0 setzen
	UCSR1C = INIT_UCSR1C;		// UCSRC0 setzen
	UCSR1B = INIT_UCSR1B;		// UCSRB0 setzen
}
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	1f 92       	push	r1
     12c:	1f 92       	push	r1
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
     132:	9a 83       	std	Y+2, r25	; 0x02
     134:	89 83       	std	Y+1, r24	; 0x01
     136:	84 e6       	ldi	r24, 0x64	; 100
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	24 e6       	ldi	r18, 0x64	; 100
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	f9 01       	movw	r30, r18
     140:	20 81       	ld	r18, Z
     142:	21 70       	andi	r18, 0x01	; 1
     144:	fc 01       	movw	r30, r24
     146:	20 83       	st	Z, r18
     148:	85 ec       	ldi	r24, 0xC5	; 197
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	29 81       	ldd	r18, Y+1	; 0x01
     14e:	3a 81       	ldd	r19, Y+2	; 0x02
     150:	23 2f       	mov	r18, r19
     152:	33 27       	eor	r19, r19
     154:	fc 01       	movw	r30, r24
     156:	20 83       	st	Z, r18
     158:	84 ec       	ldi	r24, 0xC4	; 196
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	29 81       	ldd	r18, Y+1	; 0x01
     15e:	fc 01       	movw	r30, r24
     160:	20 83       	st	Z, r18
     162:	80 ec       	ldi	r24, 0xC0	; 192
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	22 e0       	ldi	r18, 0x02	; 2
     168:	fc 01       	movw	r30, r24
     16a:	20 83       	st	Z, r18
     16c:	82 ec       	ldi	r24, 0xC2	; 194
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	2e e0       	ldi	r18, 0x0E	; 14
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
     176:	81 ec       	ldi	r24, 0xC1	; 193
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	28 e9       	ldi	r18, 0x98	; 152
     17c:	fc 01       	movw	r30, r24
     17e:	20 83       	st	Z, r18
     180:	00 00       	nop
     182:	0f 90       	pop	r0
     184:	0f 90       	pop	r0
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	08 95       	ret

0000018c <USART0SendByte>:

void USART0SendByte(unsigned char ucData)
{
     18c:	cf 93       	push	r28
     18e:	df 93       	push	r29
     190:	1f 92       	push	r1
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
     196:	89 83       	std	Y+1, r24	; 0x01
	while(!( UCSR0A & 0x20))
     198:	00 00       	nop
     19a:	80 ec       	ldi	r24, 0xC0	; 192
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	fc 01       	movw	r30, r24
     1a0:	80 81       	ld	r24, Z
     1a2:	88 2f       	mov	r24, r24
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	80 72       	andi	r24, 0x20	; 32
     1a8:	99 27       	eor	r25, r25
     1aa:	89 2b       	or	r24, r25
     1ac:	b1 f3       	breq	.-20     	; 0x19a <USART0SendByte+0xe>
	{
		// UDRE0 = 1: Buffer Leer, UDRE0 = 0: Buffer voll
		// Warten bis TX buffer leer ist
	}
	UDR0 = ucData;	// Daten senden
     1ae:	86 ec       	ldi	r24, 0xC6	; 198
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	29 81       	ldd	r18, Y+1	; 0x01
     1b4:	fc 01       	movw	r30, r24
     1b6:	20 83       	st	Z, r18
}
     1b8:	00 00       	nop
     1ba:	0f 90       	pop	r0
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	08 95       	ret

000001c2 <twi_send_start>:

#include "avr-twi-lib.h"

// Send start condition
static ret_code_t twi_send_start(void)
{
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
	// Send start condition
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
     1ca:	8c eb       	ldi	r24, 0xBC	; 188
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	24 ea       	ldi	r18, 0xA4	; 164
     1d0:	fc 01       	movw	r30, r24
     1d2:	20 83       	st	Z, r18

	// Wait for operation to finish
	while(!(TWCR & (1 << TWINT)));
     1d4:	00 00       	nop
     1d6:	8c eb       	ldi	r24, 0xBC	; 188
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	fc 01       	movw	r30, r24
     1dc:	80 81       	ld	r24, Z
     1de:	88 23       	and	r24, r24
     1e0:	d4 f7       	brge	.-12     	; 0x1d6 <twi_send_start+0x14>

	// Check TWSR Status register
	if(TWI_STATUS != 0x08)
     1e2:	89 eb       	ldi	r24, 0xB9	; 185
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	fc 01       	movw	r30, r24
     1e8:	80 81       	ld	r24, Z
     1ea:	88 2f       	mov	r24, r24
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	88 7f       	andi	r24, 0xF8	; 248
     1f0:	99 27       	eor	r25, r25
     1f2:	08 97       	sbiw	r24, 0x08	; 8
     1f4:	19 f0       	breq	.+6      	; 0x1fc <twi_send_start+0x3a>
	{
		return TWI_ERR_START;
     1f6:	83 e0       	ldi	r24, 0x03	; 3
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <twi_send_start+0x3e>
	}
	return TWI_SUCCESS;
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
}
     200:	df 91       	pop	r29
     202:	cf 91       	pop	r28
     204:	08 95       	ret

00000206 <twi_send_sla_w>:

// Transmit slave address with write flag
static ret_code_t twi_send_sla_w(uint8_t slave_addr)
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	1f 92       	push	r1
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	89 83       	std	Y+1, r24	; 0x01
	// Write slave address
	TWDR = TWI_SLA_W(slave_addr);
     212:	8b eb       	ldi	r24, 0xBB	; 187
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	29 81       	ldd	r18, Y+1	; 0x01
     218:	22 0f       	add	r18, r18
     21a:	fc 01       	movw	r30, r24
     21c:	20 83       	st	Z, r18
	// Write TWINT bit
	TWCR = (1 << TWINT) | (1 << TWEN);
     21e:	8c eb       	ldi	r24, 0xBC	; 188
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	24 e8       	ldi	r18, 0x84	; 132
     224:	fc 01       	movw	r30, r24
     226:	20 83       	st	Z, r18

	// Wait for operation to finish
	while(!(TWCR & (1 << TWINT)));
     228:	00 00       	nop
     22a:	8c eb       	ldi	r24, 0xBC	; 188
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	fc 01       	movw	r30, r24
     230:	80 81       	ld	r24, Z
     232:	88 23       	and	r24, r24
     234:	d4 f7       	brge	.-12     	; 0x22a <twi_send_sla_w+0x24>

	if(TWI_STATUS != 0x18)
     236:	89 eb       	ldi	r24, 0xB9	; 185
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	fc 01       	movw	r30, r24
     23c:	80 81       	ld	r24, Z
     23e:	88 2f       	mov	r24, r24
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	88 7f       	andi	r24, 0xF8	; 248
     244:	99 27       	eor	r25, r25
     246:	48 97       	sbiw	r24, 0x18	; 24
     248:	81 f0       	breq	.+32     	; 0x26a <twi_send_sla_w+0x64>
	{
		if(TWI_STATUS == 0x20)
     24a:	89 eb       	ldi	r24, 0xB9	; 185
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	fc 01       	movw	r30, r24
     250:	80 81       	ld	r24, Z
     252:	88 2f       	mov	r24, r24
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	88 7f       	andi	r24, 0xF8	; 248
     258:	99 27       	eor	r25, r25
     25a:	80 97       	sbiw	r24, 0x20	; 32
     25c:	19 f4       	brne	.+6      	; 0x264 <twi_send_sla_w+0x5e>
		{
			// Received NACK
			return TWI_ERR_NACK;
     25e:	84 e0       	ldi	r24, 0x04	; 4
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	05 c0       	rjmp	.+10     	; 0x26e <twi_send_sla_w+0x68>
		}
		// unknow error code in TWSR
		return TWI_ERROR;
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	02 c0       	rjmp	.+4      	; 0x26e <twi_send_sla_w+0x68>
	}
	return TWI_SUCCESS;
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
}
     26e:	0f 90       	pop	r0
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <twi_send_sla_r>:

// Transmit slave address with read flag
static ret_code_t twi_send_sla_r(uint8_t slave_addr)
{
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	1f 92       	push	r1
     27c:	cd b7       	in	r28, 0x3d	; 61
     27e:	de b7       	in	r29, 0x3e	; 62
     280:	89 83       	std	Y+1, r24	; 0x01
	// Write slave address
	TWDR = TWI_SLA_R(slave_addr);
     282:	8b eb       	ldi	r24, 0xBB	; 187
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	29 81       	ldd	r18, Y+1	; 0x01
     288:	22 2f       	mov	r18, r18
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	22 0f       	add	r18, r18
     28e:	33 1f       	adc	r19, r19
     290:	21 60       	ori	r18, 0x01	; 1
     292:	fc 01       	movw	r30, r24
     294:	20 83       	st	Z, r18
	// Write TWINT bit
	TWCR = (1 << TWINT) | (1 << TWEN);
     296:	8c eb       	ldi	r24, 0xBC	; 188
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	24 e8       	ldi	r18, 0x84	; 132
     29c:	fc 01       	movw	r30, r24
     29e:	20 83       	st	Z, r18

	// Wait for operation to finish
	while(!(TWCR & (1 << TWINT)));
     2a0:	00 00       	nop
     2a2:	8c eb       	ldi	r24, 0xBC	; 188
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	fc 01       	movw	r30, r24
     2a8:	80 81       	ld	r24, Z
     2aa:	88 23       	and	r24, r24
     2ac:	d4 f7       	brge	.-12     	; 0x2a2 <twi_send_sla_r+0x2c>

	if(TWI_STATUS != 0x40)
     2ae:	89 eb       	ldi	r24, 0xB9	; 185
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	fc 01       	movw	r30, r24
     2b4:	80 81       	ld	r24, Z
     2b6:	88 2f       	mov	r24, r24
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	88 7f       	andi	r24, 0xF8	; 248
     2bc:	99 27       	eor	r25, r25
     2be:	80 34       	cpi	r24, 0x40	; 64
     2c0:	91 05       	cpc	r25, r1
     2c2:	89 f0       	breq	.+34     	; 0x2e6 <twi_send_sla_r+0x70>
	{
		if(TWI_STATUS == 0x48)
     2c4:	89 eb       	ldi	r24, 0xB9	; 185
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	fc 01       	movw	r30, r24
     2ca:	80 81       	ld	r24, Z
     2cc:	88 2f       	mov	r24, r24
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	88 7f       	andi	r24, 0xF8	; 248
     2d2:	99 27       	eor	r25, r25
     2d4:	88 34       	cpi	r24, 0x48	; 72
     2d6:	91 05       	cpc	r25, r1
     2d8:	19 f4       	brne	.+6      	; 0x2e0 <twi_send_sla_r+0x6a>
		{
			// Received NACK
			return TWI_ERR_NACK;
     2da:	84 e0       	ldi	r24, 0x04	; 4
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	05 c0       	rjmp	.+10     	; 0x2ea <twi_send_sla_r+0x74>
		}
		// unknow error code in TWSR
		return TWI_ERROR;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	02 c0       	rjmp	.+4      	; 0x2ea <twi_send_sla_r+0x74>
	}
	return TWI_SUCCESS;
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	90 e0       	ldi	r25, 0x00	; 0
}
     2ea:	0f 90       	pop	r0
     2ec:	df 91       	pop	r29
     2ee:	cf 91       	pop	r28
     2f0:	08 95       	ret

000002f2 <twi_send_data>:

// Send data byte
static ret_code_t twi_send_data(uint8_t data)
{
     2f2:	cf 93       	push	r28
     2f4:	df 93       	push	r29
     2f6:	1f 92       	push	r1
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
     2fc:	89 83       	std	Y+1, r24	; 0x01
	// Write data byte
	TWDR = data;
     2fe:	8b eb       	ldi	r24, 0xBB	; 187
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	29 81       	ldd	r18, Y+1	; 0x01
     304:	fc 01       	movw	r30, r24
     306:	20 83       	st	Z, r18
	// Write TWINT bit
	TWCR = (1 << TWINT) | (1 << TWEN);
     308:	8c eb       	ldi	r24, 0xBC	; 188
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	24 e8       	ldi	r18, 0x84	; 132
     30e:	fc 01       	movw	r30, r24
     310:	20 83       	st	Z, r18

	// Wait for operation to finish
	while(!(TWCR & (1 << TWINT)));
     312:	00 00       	nop
     314:	8c eb       	ldi	r24, 0xBC	; 188
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	fc 01       	movw	r30, r24
     31a:	80 81       	ld	r24, Z
     31c:	88 23       	and	r24, r24
     31e:	d4 f7       	brge	.-12     	; 0x314 <twi_send_data+0x22>

	if(TWI_STATUS != 0x28)
     320:	89 eb       	ldi	r24, 0xB9	; 185
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	fc 01       	movw	r30, r24
     326:	80 81       	ld	r24, Z
     328:	88 2f       	mov	r24, r24
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	88 7f       	andi	r24, 0xF8	; 248
     32e:	99 27       	eor	r25, r25
     330:	88 97       	sbiw	r24, 0x28	; 40
     332:	81 f0       	breq	.+32     	; 0x354 <twi_send_data+0x62>
	{
		if(TWI_STATUS == 0x30)
     334:	89 eb       	ldi	r24, 0xB9	; 185
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	fc 01       	movw	r30, r24
     33a:	80 81       	ld	r24, Z
     33c:	88 2f       	mov	r24, r24
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	88 7f       	andi	r24, 0xF8	; 248
     342:	99 27       	eor	r25, r25
     344:	c0 97       	sbiw	r24, 0x30	; 48
     346:	19 f4       	brne	.+6      	; 0x34e <twi_send_data+0x5c>
		{
			// Received NACK
			return TWI_ERR_NACK;
     348:	84 e0       	ldi	r24, 0x04	; 4
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	05 c0       	rjmp	.+10     	; 0x358 <twi_send_data+0x66>
		}
		// unknow error code in TWSR
		return TWI_ERROR;
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	02 c0       	rjmp	.+4      	; 0x358 <twi_send_data+0x66>
	}

	return TWI_SUCCESS;
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	90 e0       	ldi	r25, 0x00	; 0
}
     358:	0f 90       	pop	r0
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <twi_read_data>:

// Read data byte
static uint8_t twi_read_data(char read_ack)
{
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	1f 92       	push	r1
     366:	1f 92       	push	r1
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	8a 83       	std	Y+2, r24	; 0x02
	if(read_ack)
     36e:	8a 81       	ldd	r24, Y+2	; 0x02
     370:	88 23       	and	r24, r24
     372:	e9 f0       	breq	.+58     	; 0x3ae <twi_read_data+0x4e>
	{
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     374:	8c eb       	ldi	r24, 0xBC	; 188
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	24 ec       	ldi	r18, 0xC4	; 196
     37a:	fc 01       	movw	r30, r24
     37c:	20 83       	st	Z, r18
		while(!(TWCR & (1 << TWINT)));
     37e:	00 00       	nop
     380:	8c eb       	ldi	r24, 0xBC	; 188
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	fc 01       	movw	r30, r24
     386:	80 81       	ld	r24, Z
     388:	88 23       	and	r24, r24
     38a:	d4 f7       	brge	.-12     	; 0x380 <twi_read_data+0x20>
		if(TWI_STATUS != 0x50)
     38c:	89 eb       	ldi	r24, 0xB9	; 185
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	fc 01       	movw	r30, r24
     392:	80 81       	ld	r24, Z
     394:	88 2f       	mov	r24, r24
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	88 7f       	andi	r24, 0xF8	; 248
     39a:	99 27       	eor	r25, r25
     39c:	80 35       	cpi	r24, 0x50	; 80
     39e:	91 05       	cpc	r25, r1
     3a0:	19 f1       	breq	.+70     	; 0x3e8 <twi_read_data+0x88>
		{
			return TWI_STATUS;
     3a2:	89 eb       	ldi	r24, 0xB9	; 185
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	fc 01       	movw	r30, r24
     3a8:	80 81       	ld	r24, Z
     3aa:	88 7f       	andi	r24, 0xF8	; 248
     3ac:	23 c0       	rjmp	.+70     	; 0x3f4 <twi_read_data+0x94>
		}
	}
	else
	{
		TWCR = (1 << TWINT) | (1 << TWEN);
     3ae:	8c eb       	ldi	r24, 0xBC	; 188
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	24 e8       	ldi	r18, 0x84	; 132
     3b4:	fc 01       	movw	r30, r24
     3b6:	20 83       	st	Z, r18
		while(!(TWCR & (1 << TWINT)));
     3b8:	00 00       	nop
     3ba:	8c eb       	ldi	r24, 0xBC	; 188
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	fc 01       	movw	r30, r24
     3c0:	80 81       	ld	r24, Z
     3c2:	88 23       	and	r24, r24
     3c4:	d4 f7       	brge	.-12     	; 0x3ba <twi_read_data+0x5a>
		if(TWI_STATUS != 0x58)
     3c6:	89 eb       	ldi	r24, 0xB9	; 185
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	fc 01       	movw	r30, r24
     3cc:	80 81       	ld	r24, Z
     3ce:	88 2f       	mov	r24, r24
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	88 7f       	andi	r24, 0xF8	; 248
     3d4:	99 27       	eor	r25, r25
     3d6:	88 35       	cpi	r24, 0x58	; 88
     3d8:	91 05       	cpc	r25, r1
     3da:	31 f0       	breq	.+12     	; 0x3e8 <twi_read_data+0x88>
		{
			return TWI_STATUS;
     3dc:	89 eb       	ldi	r24, 0xB9	; 185
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	fc 01       	movw	r30, r24
     3e2:	80 81       	ld	r24, Z
     3e4:	88 7f       	andi	r24, 0xF8	; 248
     3e6:	06 c0       	rjmp	.+12     	; 0x3f4 <twi_read_data+0x94>
		}
	}
	uint8_t data = TWDR;
     3e8:	8b eb       	ldi	r24, 0xBB	; 187
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	fc 01       	movw	r30, r24
     3ee:	80 81       	ld	r24, Z
     3f0:	89 83       	std	Y+1, r24	; 0x01

	return data;
     3f2:	89 81       	ldd	r24, Y+1	; 0x01
}
     3f4:	0f 90       	pop	r0
     3f6:	0f 90       	pop	r0
     3f8:	df 91       	pop	r29
     3fa:	cf 91       	pop	r28
     3fc:	08 95       	ret

000003fe <twi_send_stop>:

// Send stop condition
ret_code_t twi_send_stop(void)
{
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	cd b7       	in	r28, 0x3d	; 61
     404:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     406:	8c eb       	ldi	r24, 0xBC	; 188
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	24 e9       	ldi	r18, 0x94	; 148
     40c:	fc 01       	movw	r30, r24
     40e:	20 83       	st	Z, r18

	return TWI_SUCCESS;
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
}
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	08 95       	ret

0000041a <twi_init>:

// Initialise TWI interface
ret_code_t twi_init(twi_freq_t twi_freq)
{
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	1f 92       	push	r1
     420:	cd b7       	in	r28, 0x3d	; 61
     422:	de b7       	in	r29, 0x3e	; 62
     424:	89 83       	std	Y+1, r24	; 0x01
	// Set power reduction register
#if defined (__AVR_ATmega2561__)
	PRR0 &= ~(1 << PRTWI);
     426:	84 e6       	ldi	r24, 0x64	; 100
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	24 e6       	ldi	r18, 0x64	; 100
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	f9 01       	movw	r30, r18
     430:	20 81       	ld	r18, Z
     432:	2f 77       	andi	r18, 0x7F	; 127
     434:	fc 01       	movw	r30, r24
     436:	20 83       	st	Z, r18
#elif defined (__AVR_ATmega328P__) || defined (__AVR_ATmega328__)
	PRR &= ~(1 << PRTWI);
#endif

	// Set frequency
	switch(twi_freq)
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	88 2f       	mov	r24, r24
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	09 2e       	mov	r0, r25
     440:	00 0c       	add	r0, r0
     442:	aa 0b       	sbc	r26, r26
     444:	bb 0b       	sbc	r27, r27
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	2a e0       	ldi	r18, 0x0A	; 10
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	84 1b       	sub	r24, r20
     450:	95 0b       	sbc	r25, r21
     452:	28 17       	cp	r18, r24
     454:	39 07       	cpc	r19, r25
     456:	08 f4       	brcc	.+2      	; 0x45a <twi_init+0x40>
     458:	48 c0       	rjmp	.+144    	; 0x4ea <twi_init+0xd0>
     45a:	fc 01       	movw	r30, r24
     45c:	88 27       	eor	r24, r24
     45e:	ea 59       	subi	r30, 0x9A	; 154
     460:	ff 4f       	sbci	r31, 0xFF	; 255
     462:	8f 4f       	sbci	r24, 0xFF	; 255
     464:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__tablejump2__>
	{
		case TWI_FREQ_100K_8M:
			// Set TWBR 32 and Prescaler 1 -> 8MHz / (16 + 2 * 32 * 1) = 100kHz
			TWBR = 32;
     468:	88 eb       	ldi	r24, 0xB8	; 184
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	20 e2       	ldi	r18, 0x20	; 32
     46e:	fc 01       	movw	r30, r24
     470:	20 83       	st	Z, r18
			break;
     472:	3e c0       	rjmp	.+124    	; 0x4f0 <twi_init+0xd6>
		case TWI_FREQ_100K_16M:
			// Set TWBR 32 and Prescaler 1 -> 16MHz / (16 + 2 * 72 * 1) = 100kHz
			TWBR = 72;
     474:	88 eb       	ldi	r24, 0xB8	; 184
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	28 e4       	ldi	r18, 0x48	; 72
     47a:	fc 01       	movw	r30, r24
     47c:	20 83       	st	Z, r18
			break;
     47e:	38 c0       	rjmp	.+112    	; 0x4f0 <twi_init+0xd6>
		case TWI_FREQ_100K_20M:
			// Set TWBR 32 and Prescaler 1 -> 20MHz / (16 + 2 * 92 * 1) = 100kHz
			TWBR = 92;
     480:	88 eb       	ldi	r24, 0xB8	; 184
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	2c e5       	ldi	r18, 0x5C	; 92
     486:	fc 01       	movw	r30, r24
     488:	20 83       	st	Z, r18
			break;
     48a:	32 c0       	rjmp	.+100    	; 0x4f0 <twi_init+0xd6>
		case TWI_FREQ_250K_8M:
			// Set TWBR 8 and Prescaler 1 -> 8MHz / (16 + 2 * 8 * 1) = 250kHz
			TWBR = 8;
     48c:	88 eb       	ldi	r24, 0xB8	; 184
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	28 e0       	ldi	r18, 0x08	; 8
     492:	fc 01       	movw	r30, r24
     494:	20 83       	st	Z, r18
			break;
     496:	2c c0       	rjmp	.+88     	; 0x4f0 <twi_init+0xd6>
		case TWI_FREQ_250K_16M:
			// Set TWBR 32 and Prescaler 1 -> 16MHz / (16 + 2 * 24 * 1) = 100kHz
			TWBR = 24;
     498:	88 eb       	ldi	r24, 0xB8	; 184
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	28 e1       	ldi	r18, 0x18	; 24
     49e:	fc 01       	movw	r30, r24
     4a0:	20 83       	st	Z, r18
			break;
     4a2:	26 c0       	rjmp	.+76     	; 0x4f0 <twi_init+0xd6>
		case TWI_FREQ_250K_20M:
			// Set TWBR 32 and Prescaler 1 -> 20MHz / (16 + 2 * 32 * 1) = 100kHz
			TWBR = 32;
     4a4:	88 eb       	ldi	r24, 0xB8	; 184
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	20 e2       	ldi	r18, 0x20	; 32
     4aa:	fc 01       	movw	r30, r24
     4ac:	20 83       	st	Z, r18
			break;
     4ae:	20 c0       	rjmp	.+64     	; 0x4f0 <twi_init+0xd6>
		case TWI_FREQ_400K_8M:
			// Set TWBR 2 and Prescaler 1 -> 8MHz / (16 + 2 * 2 * 1) = 400kHz
			TWBR = 2;
     4b0:	88 eb       	ldi	r24, 0xB8	; 184
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	22 e0       	ldi	r18, 0x02	; 2
     4b6:	fc 01       	movw	r30, r24
     4b8:	20 83       	st	Z, r18
			break;
     4ba:	1a c0       	rjmp	.+52     	; 0x4f0 <twi_init+0xd6>
		case TWI_FREQ_400K_16M:
			// Set TWBR 32 and Prescaler 1 -> 16MHz / (16 + 2 * 12 * 1) = 100kHz
			TWBR = 12;
     4bc:	88 eb       	ldi	r24, 0xB8	; 184
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	2c e0       	ldi	r18, 0x0C	; 12
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 83       	st	Z, r18
			break;
     4c6:	14 c0       	rjmp	.+40     	; 0x4f0 <twi_init+0xd6>
		case TWI_FREQ_400K_20M:
			// Set TWBR 32 and Prescaler 1 -> 20MHz / (16 + 2 * 17 * 1) = 100kHz
			TWBR = 17;
     4c8:	88 eb       	ldi	r24, 0xB8	; 184
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	21 e1       	ldi	r18, 0x11	; 17
     4ce:	fc 01       	movw	r30, r24
     4d0:	20 83       	st	Z, r18
			break;
     4d2:	0e c0       	rjmp	.+28     	; 0x4f0 <twi_init+0xd6>
		case TWI_FREQ_1M_16M:
			// Set TWBR 2 and Prescaler 1 -> 16MHz / (16 + 2 * 0 * 1) = 1MHz
			TWBR = 0;
     4d4:	88 eb       	ldi	r24, 0xB8	; 184
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	fc 01       	movw	r30, r24
     4da:	10 82       	st	Z, r1
			break;
     4dc:	09 c0       	rjmp	.+18     	; 0x4f0 <twi_init+0xd6>
		case TWI_FREQ_1M_20M:
			// Set TWBR 32 and Prescaler 1 -> 20MHz / (16 + 2 * 2 * 1) = 100kHz
			TWBR = 2;
     4de:	88 eb       	ldi	r24, 0xB8	; 184
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	22 e0       	ldi	r18, 0x02	; 2
     4e4:	fc 01       	movw	r30, r24
     4e6:	20 83       	st	Z, r18
			break;
     4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <twi_init+0xd6>
		default:
			return TWI_ERR_FREQ;
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <twi_init+0xda>
			break;
	}
	return TWI_SUCCESS;
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
}
     4f4:	0f 90       	pop	r0
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <twi_master_transmit>:

// Transmit on the TWI Interface as a master
ret_code_t twi_master_transmit(uint8_t slave_addr, uint8_t* pData, uint8_t len, char repeat_start)
{
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	29 97       	sbiw	r28, 0x09	; 9
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
     510:	8d 83       	std	Y+5, r24	; 0x05
     512:	7f 83       	std	Y+7, r23	; 0x07
     514:	6e 83       	std	Y+6, r22	; 0x06
     516:	48 87       	std	Y+8, r20	; 0x08
     518:	29 87       	std	Y+9, r18	; 0x09
	// Send start condition
	ret_code_t error_code = twi_send_start();
     51a:	53 de       	rcall	.-858    	; 0x1c2 <twi_send_start>
     51c:	9c 83       	std	Y+4, r25	; 0x04
     51e:	8b 83       	std	Y+3, r24	; 0x03
	if(error_code != TWI_SUCCESS)
     520:	8b 81       	ldd	r24, Y+3	; 0x03
     522:	9c 81       	ldd	r25, Y+4	; 0x04
     524:	89 2b       	or	r24, r25
     526:	19 f0       	breq	.+6      	; 0x52e <twi_master_transmit+0x32>
	{
		return error_code;
     528:	8b 81       	ldd	r24, Y+3	; 0x03
     52a:	9c 81       	ldd	r25, Y+4	; 0x04
     52c:	33 c0       	rjmp	.+102    	; 0x594 <twi_master_transmit+0x98>
	}

	// Send slave address with write flag
	error_code = twi_send_sla_w(slave_addr);
     52e:	8d 81       	ldd	r24, Y+5	; 0x05
     530:	6a de       	rcall	.-812    	; 0x206 <twi_send_sla_w>
     532:	9c 83       	std	Y+4, r25	; 0x04
     534:	8b 83       	std	Y+3, r24	; 0x03
	if(error_code != TWI_SUCCESS)
     536:	8b 81       	ldd	r24, Y+3	; 0x03
     538:	9c 81       	ldd	r25, Y+4	; 0x04
     53a:	89 2b       	or	r24, r25
     53c:	19 f0       	breq	.+6      	; 0x544 <twi_master_transmit+0x48>
	{
		return error_code;
     53e:	8b 81       	ldd	r24, Y+3	; 0x03
     540:	9c 81       	ldd	r25, Y+4	; 0x04
     542:	28 c0       	rjmp	.+80     	; 0x594 <twi_master_transmit+0x98>
	}

	// Send data byte or bytes
	for(int i = 0; i < len; i++)
     544:	1a 82       	std	Y+2, r1	; 0x02
     546:	19 82       	std	Y+1, r1	; 0x01
     548:	17 c0       	rjmp	.+46     	; 0x578 <twi_master_transmit+0x7c>
	{
		error_code = twi_send_data(pData[i]);
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	9a 81       	ldd	r25, Y+2	; 0x02
     54e:	2e 81       	ldd	r18, Y+6	; 0x06
     550:	3f 81       	ldd	r19, Y+7	; 0x07
     552:	82 0f       	add	r24, r18
     554:	93 1f       	adc	r25, r19
     556:	fc 01       	movw	r30, r24
     558:	80 81       	ld	r24, Z
     55a:	cb de       	rcall	.-618    	; 0x2f2 <twi_send_data>
     55c:	9c 83       	std	Y+4, r25	; 0x04
     55e:	8b 83       	std	Y+3, r24	; 0x03
		if(error_code != TWI_SUCCESS)
     560:	8b 81       	ldd	r24, Y+3	; 0x03
     562:	9c 81       	ldd	r25, Y+4	; 0x04
     564:	89 2b       	or	r24, r25
     566:	19 f0       	breq	.+6      	; 0x56e <twi_master_transmit+0x72>
		{
			return error_code;
     568:	8b 81       	ldd	r24, Y+3	; 0x03
     56a:	9c 81       	ldd	r25, Y+4	; 0x04
     56c:	13 c0       	rjmp	.+38     	; 0x594 <twi_master_transmit+0x98>
	{
		return error_code;
	}

	// Send data byte or bytes
	for(int i = 0; i < len; i++)
     56e:	89 81       	ldd	r24, Y+1	; 0x01
     570:	9a 81       	ldd	r25, Y+2	; 0x02
     572:	01 96       	adiw	r24, 0x01	; 1
     574:	9a 83       	std	Y+2, r25	; 0x02
     576:	89 83       	std	Y+1, r24	; 0x01
     578:	88 85       	ldd	r24, Y+8	; 0x08
     57a:	28 2f       	mov	r18, r24
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	89 81       	ldd	r24, Y+1	; 0x01
     580:	9a 81       	ldd	r25, Y+2	; 0x02
     582:	82 17       	cp	r24, r18
     584:	93 07       	cpc	r25, r19
     586:	0c f3       	brlt	.-62     	; 0x54a <twi_master_transmit+0x4e>
			return error_code;
		}
	}

	// Send stop condition
	if(!repeat_start)
     588:	89 85       	ldd	r24, Y+9	; 0x09
     58a:	88 23       	and	r24, r24
	{
		twi_send_stop();
     58c:	09 f4       	brne	.+2      	; 0x590 <twi_master_transmit+0x94>
     58e:	37 df       	rcall	.-402    	; 0x3fe <twi_send_stop>
	}

	return TWI_SUCCESS;
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
}
     594:	29 96       	adiw	r28, 0x09	; 9
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	08 95       	ret

000005a6 <twi_master_receive>:

ret_code_t twi_master_receive(uint8_t slave_addr, uint8_t* pData, uint8_t len)
{
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	28 97       	sbiw	r28, 0x08	; 8
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	8d 83       	std	Y+5, r24	; 0x05
     5c0:	7f 83       	std	Y+7, r23	; 0x07
     5c2:	6e 83       	std	Y+6, r22	; 0x06
     5c4:	48 87       	std	Y+8, r20	; 0x08
	// Send start condition
	ret_code_t error_code = twi_send_start();
     5c6:	fd dd       	rcall	.-1030   	; 0x1c2 <twi_send_start>
     5c8:	9c 83       	std	Y+4, r25	; 0x04
     5ca:	8b 83       	std	Y+3, r24	; 0x03
	if(error_code != TWI_SUCCESS)
     5cc:	8b 81       	ldd	r24, Y+3	; 0x03
     5ce:	9c 81       	ldd	r25, Y+4	; 0x04
     5d0:	89 2b       	or	r24, r25
     5d2:	19 f0       	breq	.+6      	; 0x5da <twi_master_receive+0x34>
	{
		return error_code;
     5d4:	8b 81       	ldd	r24, Y+3	; 0x03
     5d6:	9c 81       	ldd	r25, Y+4	; 0x04
     5d8:	39 c0       	rjmp	.+114    	; 0x64c <twi_master_receive+0xa6>
	}

	// Send slave address with write flag
	error_code = twi_send_sla_r(slave_addr);
     5da:	8d 81       	ldd	r24, Y+5	; 0x05
     5dc:	4c de       	rcall	.-872    	; 0x276 <twi_send_sla_r>
     5de:	9c 83       	std	Y+4, r25	; 0x04
     5e0:	8b 83       	std	Y+3, r24	; 0x03
	if(error_code != TWI_SUCCESS)
     5e2:	8b 81       	ldd	r24, Y+3	; 0x03
     5e4:	9c 81       	ldd	r25, Y+4	; 0x04
     5e6:	89 2b       	or	r24, r25
     5e8:	19 f0       	breq	.+6      	; 0x5f0 <twi_master_receive+0x4a>
	{
		return error_code;
     5ea:	8b 81       	ldd	r24, Y+3	; 0x03
     5ec:	9c 81       	ldd	r25, Y+4	; 0x04
     5ee:	2e c0       	rjmp	.+92     	; 0x64c <twi_master_receive+0xa6>
	}

	/* Read single or multiple data byte and send ack */
	for(int i = 0; i < len-1; i++)
     5f0:	1a 82       	std	Y+2, r1	; 0x02
     5f2:	19 82       	std	Y+1, r1	; 0x01
     5f4:	10 c0       	rjmp	.+32     	; 0x616 <twi_master_receive+0x70>
	{
		pData[i] = twi_read_data(TWI_READ_ACK);
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	9a 81       	ldd	r25, Y+2	; 0x02
     5fa:	2e 81       	ldd	r18, Y+6	; 0x06
     5fc:	3f 81       	ldd	r19, Y+7	; 0x07
     5fe:	89 01       	movw	r16, r18
     600:	08 0f       	add	r16, r24
     602:	19 1f       	adc	r17, r25
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	ac de       	rcall	.-680    	; 0x360 <twi_read_data>
     608:	f8 01       	movw	r30, r16
     60a:	80 83       	st	Z, r24
	{
		return error_code;
	}

	/* Read single or multiple data byte and send ack */
	for(int i = 0; i < len-1; i++)
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	9a 81       	ldd	r25, Y+2	; 0x02
     610:	01 96       	adiw	r24, 0x01	; 1
     612:	9a 83       	std	Y+2, r25	; 0x02
     614:	89 83       	std	Y+1, r24	; 0x01
     616:	88 85       	ldd	r24, Y+8	; 0x08
     618:	88 2f       	mov	r24, r24
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	9c 01       	movw	r18, r24
     61e:	21 50       	subi	r18, 0x01	; 1
     620:	31 09       	sbc	r19, r1
     622:	89 81       	ldd	r24, Y+1	; 0x01
     624:	9a 81       	ldd	r25, Y+2	; 0x02
     626:	82 17       	cp	r24, r18
     628:	93 07       	cpc	r25, r19
     62a:	2c f3       	brlt	.-54     	; 0x5f6 <twi_master_receive+0x50>
	{
		pData[i] = twi_read_data(TWI_READ_ACK);
	}
	pData[len-1] = twi_read_data(TWI_READ_NACK);
     62c:	88 85       	ldd	r24, Y+8	; 0x08
     62e:	88 2f       	mov	r24, r24
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	2e 81       	ldd	r18, Y+6	; 0x06
     636:	3f 81       	ldd	r19, Y+7	; 0x07
     638:	89 01       	movw	r16, r18
     63a:	08 0f       	add	r16, r24
     63c:	19 1f       	adc	r17, r25
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	8f de       	rcall	.-738    	; 0x360 <twi_read_data>
     642:	f8 01       	movw	r30, r16

	/* Send STOP condition */
	twi_send_stop();
     644:	80 83       	st	Z, r24
     646:	db de       	rcall	.-586    	; 0x3fe <twi_send_stop>

	return TWI_SUCCESS;
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
}
     64c:	28 96       	adiw	r28, 0x08	; 8
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	08 95       	ret

00000662 <INIT_BME>:

#include "BME680.h"
volatile unsigned char cRecieve[5];

char INIT_BME ( void )
{
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	00 d0       	rcall	.+0      	; 0x668 <INIT_BME+0x6>
     668:	1f 92       	push	r1
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
	unsigned char ucInitValues[2];
	unsigned char ucIdRegister = REG_ID;
     66e:	80 ed       	ldi	r24, 0xD0	; 208
     670:	8b 83       	std	Y+3, r24	; 0x03
	unsigned char cID = 0;
     672:	1c 82       	std	Y+4, r1	; 0x04
	
	twi_master_transmit(SLAVE_ADR_LOW, &ucIdRegister, 1, 0);
     674:	ce 01       	movw	r24, r28
     676:	03 96       	adiw	r24, 0x03	; 3
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	41 e0       	ldi	r20, 0x01	; 1
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	bc 01       	movw	r22, r24
     682:	86 e7       	ldi	r24, 0x76	; 118
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	3a df       	rcall	.-396    	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, &cID , 1);
     688:	ce 01       	movw	r24, r28
     68a:	04 96       	adiw	r24, 0x04	; 4
     68c:	41 e0       	ldi	r20, 0x01	; 1
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	bc 01       	movw	r22, r24
     692:	86 e7       	ldi	r24, 0x76	; 118
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	87 df       	rcall	.-242    	; 0x5a6 <twi_master_receive>
	
	if (!cID)
     698:	8c 81       	ldd	r24, Y+4	; 0x04
     69a:	88 23       	and	r24, r24
     69c:	11 f4       	brne	.+4      	; 0x6a2 <INIT_BME+0x40>
	{
		return 1;
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	53 c0       	rjmp	.+166    	; 0x748 <INIT_BME+0xe6>
	}
	
	/*** WRITE RESET REGISTER ***/
	ucInitValues[0] = REG_RESET;
     6a2:	80 ee       	ldi	r24, 0xE0	; 224
     6a4:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = VAL_RESET;
     6a6:	86 eb       	ldi	r24, 0xB6	; 182
     6a8:	8a 83       	std	Y+2, r24	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	42 e0       	ldi	r20, 0x02	; 2
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	ce 01       	movw	r24, r28
     6b4:	01 96       	adiw	r24, 0x01	; 1
     6b6:	bc 01       	movw	r22, r24
     6b8:	86 e7       	ldi	r24, 0x76	; 118
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	1f df       	rcall	.-450    	; 0x4fc <twi_master_transmit>
	
	/*** WRITE CTRL_HUM REGISTER ***/
	ucInitValues[0] = REG_CTRL_HUM;
     6be:	82 e7       	ldi	r24, 0x72	; 114
     6c0:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = (0xBF & (0b00000111 & VAL_OSRS_1));
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	8a 83       	std	Y+2, r24	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	42 e0       	ldi	r20, 0x02	; 2
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	ce 01       	movw	r24, r28
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	bc 01       	movw	r22, r24
     6d4:	86 e7       	ldi	r24, 0x76	; 118
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	11 df       	rcall	.-478    	; 0x4fc <twi_master_transmit>
	
	/*** WRITE CONFIG REGISTER ***/
	ucInitValues[0] = REG_CONFIG;
     6da:	85 e7       	ldi	r24, 0x75	; 117
     6dc:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = (0xFE & (0b00011100 & (VAL_FILTER_0 << 2)));
     6de:	1a 82       	std	Y+2, r1	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	42 e0       	ldi	r20, 0x02	; 2
     6e6:	50 e0       	ldi	r21, 0x00	; 0
     6e8:	ce 01       	movw	r24, r28
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	bc 01       	movw	r22, r24
     6ee:	86 e7       	ldi	r24, 0x76	; 118
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	04 df       	rcall	.-504    	; 0x4fc <twi_master_transmit>
	
	/*** WRITE CTRL_MEAS REGISTER ***/
	ucInitValues[0] = REG_CTRL_MEAS;
     6f4:	84 e7       	ldi	r24, 0x74	; 116
     6f6:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = ((0b00000011 & VAL_MODE_FORCED) | (0b00011100 & (VAL_OSRS_1 << 2)) | (0b11100000 & (VAL_OSRS_1 << 5)));
     6f8:	85 e2       	ldi	r24, 0x25	; 37
     6fa:	8a 83       	std	Y+2, r24	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	42 e0       	ldi	r20, 0x02	; 2
     702:	50 e0       	ldi	r21, 0x00	; 0
     704:	ce 01       	movw	r24, r28
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	bc 01       	movw	r22, r24
     70a:	86 e7       	ldi	r24, 0x76	; 118
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	f6 de       	rcall	.-532    	; 0x4fc <twi_master_transmit>
	
	/*** WRITE CTRL_GAS REGISTER ***/
	ucInitValues[0] = REG_CTRL_GAS_0;
     710:	80 e7       	ldi	r24, 0x70	; 112
     712:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = (0b00001000 & (VAL_HEAT_OFF << 3));
     714:	88 e0       	ldi	r24, 0x08	; 8
     716:	8a 83       	std	Y+2, r24	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	42 e0       	ldi	r20, 0x02	; 2
     71e:	50 e0       	ldi	r21, 0x00	; 0
     720:	ce 01       	movw	r24, r28
     722:	01 96       	adiw	r24, 0x01	; 1
     724:	bc 01       	movw	r22, r24
     726:	86 e7       	ldi	r24, 0x76	; 118
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	e8 de       	rcall	.-560    	; 0x4fc <twi_master_transmit>
	
	/*** WRITE CTRL_HUM REGISTER ***/
	ucInitValues[0] = REG_CTRL_GAS_1;
     72c:	81 e7       	ldi	r24, 0x71	; 113
     72e:	89 83       	std	Y+1, r24	; 0x01
	ucInitValues[1] = (0b00010000 & (VAL_HEAT_ON << 4));
     730:	1a 82       	std	Y+2, r1	; 0x02
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	42 e0       	ldi	r20, 0x02	; 2
     738:	50 e0       	ldi	r21, 0x00	; 0
     73a:	ce 01       	movw	r24, r28
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	bc 01       	movw	r22, r24
     740:	86 e7       	ldi	r24, 0x76	; 118
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	db de       	rcall	.-586    	; 0x4fc <twi_master_transmit>
	
	return 0;
     746:	80 e0       	ldi	r24, 0x00	; 0
}
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <START_CONVERSION>:

void START_CONVERSION ( void )
{
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	00 d0       	rcall	.+0      	; 0x75c <START_CONVERSION+0x6>
     75c:	1f 92       	push	r1
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
	unsigned char ucInitValues[2];
	
	ucInitValues[0] = REG_CTRL_MEAS;
     762:	84 e7       	ldi	r24, 0x74	; 116
     764:	8b 83       	std	Y+3, r24	; 0x03
	ucInitValues[1] = ((0b00000011 & VAL_MODE_FORCED) | (0b00011100 & (VAL_OSRS_1 << 2)) | (0b11100000 & (VAL_OSRS_1 << 5)));
     766:	85 e2       	ldi	r24, 0x25	; 37
     768:	8c 83       	std	Y+4, r24	; 0x04
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
     76a:	ce 01       	movw	r24, r28
     76c:	03 96       	adiw	r24, 0x03	; 3
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	42 e0       	ldi	r20, 0x02	; 2
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	bc 01       	movw	r22, r24
     778:	86 e7       	ldi	r24, 0x76	; 118
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	bf de       	rcall	.-642    	; 0x4fc <twi_master_transmit>
	for(int i = 0; i < 50; i++)
     77e:	1a 82       	std	Y+2, r1	; 0x02
     780:	19 82       	std	Y+1, r1	; 0x01
     782:	06 c0       	rjmp	.+12     	; 0x790 <START_CONVERSION+0x3a>
	{
		asm("nop");
     784:	00 00       	nop
	unsigned char ucInitValues[2];
	
	ucInitValues[0] = REG_CTRL_MEAS;
	ucInitValues[1] = ((0b00000011 & VAL_MODE_FORCED) | (0b00011100 & (VAL_OSRS_1 << 2)) | (0b11100000 & (VAL_OSRS_1 << 5)));
	twi_master_transmit(SLAVE_ADR_LOW, ucInitValues, 2, 0);
	for(int i = 0; i < 50; i++)
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	9a 81       	ldd	r25, Y+2	; 0x02
     78a:	01 96       	adiw	r24, 0x01	; 1
     78c:	9a 83       	std	Y+2, r25	; 0x02
     78e:	89 83       	std	Y+1, r24	; 0x01
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	9a 81       	ldd	r25, Y+2	; 0x02
     794:	c2 97       	sbiw	r24, 0x32	; 50
     796:	b4 f3       	brlt	.-20     	; 0x784 <START_CONVERSION+0x2e>
	{
		asm("nop");
	}
}
     798:	00 00       	nop
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <READ_TEMP_F>:

float READ_TEMP_F ( void )
{
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	00 d0       	rcall	.+0      	; 0x7ae <READ_TEMP_F+0x6>
     7ae:	1f 92       	push	r1
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
	int32_t t_fine = READ_TEMP_I();
     7b4:	21 d0       	rcall	.+66     	; 0x7f8 <READ_TEMP_I>
     7b6:	dc 01       	movw	r26, r24
     7b8:	cb 01       	movw	r24, r22
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	9a 83       	std	Y+2, r25	; 0x02
     7be:	ab 83       	std	Y+3, r26	; 0x03
     7c0:	bc 83       	std	Y+4, r27	; 0x04
	return t_fine / 5120.0;
     7c2:	69 81       	ldd	r22, Y+1	; 0x01
     7c4:	7a 81       	ldd	r23, Y+2	; 0x02
     7c6:	8b 81       	ldd	r24, Y+3	; 0x03
     7c8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ca:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__floatsisf>
     7ce:	dc 01       	movw	r26, r24
     7d0:	cb 01       	movw	r24, r22
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 ea       	ldi	r20, 0xA0	; 160
     7d8:	55 e4       	ldi	r21, 0x45	; 69
     7da:	bc 01       	movw	r22, r24
     7dc:	cd 01       	movw	r24, r26
     7de:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
     7e2:	dc 01       	movw	r26, r24
     7e4:	cb 01       	movw	r24, r22
}
     7e6:	bc 01       	movw	r22, r24
     7e8:	cd 01       	movw	r24, r26
     7ea:	0f 90       	pop	r0
     7ec:	0f 90       	pop	r0
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	df 91       	pop	r29
     7f4:	cf 91       	pop	r28
     7f6:	08 95       	ret

000007f8 <READ_TEMP_I>:

int32_t READ_TEMP_I ( void )
{
     7f8:	8f 92       	push	r8
     7fa:	9f 92       	push	r9
     7fc:	af 92       	push	r10
     7fe:	bf 92       	push	r11
     800:	cf 92       	push	r12
     802:	df 92       	push	r13
     804:	ef 92       	push	r14
     806:	ff 92       	push	r15
     808:	cf 93       	push	r28
     80a:	df 93       	push	r29
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	66 97       	sbiw	r28, 0x16	; 22
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
	unsigned char cAdrWork = 0;
     81c:	1e 8a       	std	Y+22, r1	; 0x16
	uint32_t temp_adc = 0;
     81e:	19 82       	std	Y+1, r1	; 0x01
     820:	1a 82       	std	Y+2, r1	; 0x02
     822:	1b 82       	std	Y+3, r1	; 0x03
     824:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t par_t1 = 0;
     826:	1e 82       	std	Y+6, r1	; 0x06
     828:	1d 82       	std	Y+5, r1	; 0x05
	int16_t par_t2 = 0;
     82a:	18 86       	std	Y+8, r1	; 0x08
     82c:	1f 82       	std	Y+7, r1	; 0x07
	int8_t par_t3 = 0;
     82e:	19 86       	std	Y+9, r1	; 0x09
	double var1 = 0;
     830:	1a 86       	std	Y+10, r1	; 0x0a
     832:	1b 86       	std	Y+11, r1	; 0x0b
     834:	1c 86       	std	Y+12, r1	; 0x0c
     836:	1d 86       	std	Y+13, r1	; 0x0d
	double var2 = 0;
     838:	1e 86       	std	Y+14, r1	; 0x0e
     83a:	1f 86       	std	Y+15, r1	; 0x0f
     83c:	18 8a       	std	Y+16, r1	; 0x10
     83e:	19 8a       	std	Y+17, r1	; 0x11
	int32_t t_fine = 0;
     840:	1a 8a       	std	Y+18, r1	; 0x12
     842:	1b 8a       	std	Y+19, r1	; 0x13
     844:	1c 8a       	std	Y+20, r1	; 0x14
     846:	1d 8a       	std	Y+21, r1	; 0x15
	
	cAdrWork = REG_TEMP_MSB;
     848:	82 e2       	ldi	r24, 0x22	; 34
     84a:	8e 8b       	std	Y+22, r24	; 0x16
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     84c:	ce 01       	movw	r24, r28
     84e:	46 96       	adiw	r24, 0x16	; 22
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	41 e0       	ldi	r20, 0x01	; 1
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	bc 01       	movw	r22, r24
     85a:	86 e7       	ldi	r24, 0x76	; 118
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	4e de       	rcall	.-868    	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 3);
     860:	43 e0       	ldi	r20, 0x03	; 3
     862:	50 e0       	ldi	r21, 0x00	; 0
     864:	60 e2       	ldi	r22, 0x20	; 32
     866:	72 e0       	ldi	r23, 0x02	; 2
     868:	86 e7       	ldi	r24, 0x76	; 118
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	9c de       	rcall	.-712    	; 0x5a6 <twi_master_receive>
	temp_adc = (0xFF000 & (((uint32_t)cRecieve[0]) << 12)) | (0x00FF0 & (cRecieve[1] << 4)) | (0x0000F & (cRecieve[2] >> 4));
     86e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     872:	88 2f       	mov	r24, r24
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	a0 e0       	ldi	r26, 0x00	; 0
     878:	b0 e0       	ldi	r27, 0x00	; 0
     87a:	07 2e       	mov	r0, r23
     87c:	7c e0       	ldi	r23, 0x0C	; 12
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	7a 95       	dec	r23
     888:	d1 f7       	brne	.-12     	; 0x87e <READ_TEMP_I+0x86>
     88a:	70 2d       	mov	r23, r0
     88c:	9c 01       	movw	r18, r24
     88e:	ad 01       	movw	r20, r26
     890:	22 27       	eor	r18, r18
     892:	30 7f       	andi	r19, 0xF0	; 240
     894:	4f 70       	andi	r20, 0x0F	; 15
     896:	55 27       	eor	r21, r21
     898:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
     89c:	88 2f       	mov	r24, r24
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	82 95       	swap	r24
     8a2:	92 95       	swap	r25
     8a4:	90 7f       	andi	r25, 0xF0	; 240
     8a6:	98 27       	eor	r25, r24
     8a8:	80 7f       	andi	r24, 0xF0	; 240
     8aa:	98 27       	eor	r25, r24
     8ac:	09 2e       	mov	r0, r25
     8ae:	00 0c       	add	r0, r0
     8b0:	aa 0b       	sbc	r26, r26
     8b2:	bb 0b       	sbc	r27, r27
     8b4:	80 7f       	andi	r24, 0xF0	; 240
     8b6:	9f 70       	andi	r25, 0x0F	; 15
     8b8:	aa 27       	eor	r26, r26
     8ba:	bb 27       	eor	r27, r27
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <__data_end+0x2>
     8c8:	82 95       	swap	r24
     8ca:	8f 70       	andi	r24, 0x0F	; 15
     8cc:	88 2f       	mov	r24, r24
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	a0 e0       	ldi	r26, 0x00	; 0
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	82 2b       	or	r24, r18
     8d6:	93 2b       	or	r25, r19
     8d8:	a4 2b       	or	r26, r20
     8da:	b5 2b       	or	r27, r21
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	9a 83       	std	Y+2, r25	; 0x02
     8e0:	ab 83       	std	Y+3, r26	; 0x03
     8e2:	bc 83       	std	Y+4, r27	; 0x04
	
	cAdrWork = 0xE9;
     8e4:	89 ee       	ldi	r24, 0xE9	; 233
     8e6:	8e 8b       	std	Y+22, r24	; 0x16
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     8e8:	ce 01       	movw	r24, r28
     8ea:	46 96       	adiw	r24, 0x16	; 22
     8ec:	20 e0       	ldi	r18, 0x00	; 0
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	bc 01       	movw	r22, r24
     8f6:	86 e7       	ldi	r24, 0x76	; 118
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	00 de       	rcall	.-1024   	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
     8fc:	42 e0       	ldi	r20, 0x02	; 2
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	60 e2       	ldi	r22, 0x20	; 32
     902:	72 e0       	ldi	r23, 0x02	; 2
     904:	86 e7       	ldi	r24, 0x76	; 118
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	4e de       	rcall	.-868    	; 0x5a6 <twi_master_receive>
	par_t1 = (0xFF00 & (cRecieve[1] << 8)) | (0x00FF & (cRecieve[0]));
     90a:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
     90e:	88 2f       	mov	r24, r24
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	98 2f       	mov	r25, r24
     914:	88 27       	eor	r24, r24
     916:	9c 01       	movw	r18, r24
     918:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	82 2b       	or	r24, r18
     922:	93 2b       	or	r25, r19
     924:	9e 83       	std	Y+6, r25	; 0x06
     926:	8d 83       	std	Y+5, r24	; 0x05
	
	cAdrWork = 0x8A;
     928:	8a e8       	ldi	r24, 0x8A	; 138
     92a:	8e 8b       	std	Y+22, r24	; 0x16
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     92c:	ce 01       	movw	r24, r28
     92e:	46 96       	adiw	r24, 0x16	; 22
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	41 e0       	ldi	r20, 0x01	; 1
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	bc 01       	movw	r22, r24
     93a:	86 e7       	ldi	r24, 0x76	; 118
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	de dd       	rcall	.-1092   	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
     940:	42 e0       	ldi	r20, 0x02	; 2
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	60 e2       	ldi	r22, 0x20	; 32
     946:	72 e0       	ldi	r23, 0x02	; 2
     948:	86 e7       	ldi	r24, 0x76	; 118
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	2c de       	rcall	.-936    	; 0x5a6 <twi_master_receive>
	par_t2 = (0xFF00 & (cRecieve[1] << 8)) | (0x00FF & (cRecieve[0]));
     94e:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
     952:	88 2f       	mov	r24, r24
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	98 2f       	mov	r25, r24
     958:	88 27       	eor	r24, r24
     95a:	9c 01       	movw	r18, r24
     95c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     960:	88 2f       	mov	r24, r24
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	82 2b       	or	r24, r18
     966:	93 2b       	or	r25, r19
     968:	98 87       	std	Y+8, r25	; 0x08
     96a:	8f 83       	std	Y+7, r24	; 0x07
	
	cAdrWork = 0x8C;
     96c:	8c e8       	ldi	r24, 0x8C	; 140
     96e:	8e 8b       	std	Y+22, r24	; 0x16
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     970:	ce 01       	movw	r24, r28
     972:	46 96       	adiw	r24, 0x16	; 22
     974:	20 e0       	ldi	r18, 0x00	; 0
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	41 e0       	ldi	r20, 0x01	; 1
     97a:	50 e0       	ldi	r21, 0x00	; 0
     97c:	bc 01       	movw	r22, r24
     97e:	86 e7       	ldi	r24, 0x76	; 118
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	bc dd       	rcall	.-1160   	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
     984:	42 e0       	ldi	r20, 0x02	; 2
     986:	50 e0       	ldi	r21, 0x00	; 0
     988:	60 e2       	ldi	r22, 0x20	; 32
     98a:	72 e0       	ldi	r23, 0x02	; 2
     98c:	86 e7       	ldi	r24, 0x76	; 118
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0a de       	rcall	.-1004   	; 0x5a6 <twi_master_receive>
     992:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
	par_t3 = (cRecieve[0]);
     996:	89 87       	std	Y+9, r24	; 0x09
     998:	69 81       	ldd	r22, Y+1	; 0x01
	
	var1 = (((double)temp_adc / 16384.0) - ((double)par_t1 / 1024.0)) * (double)par_t2;
     99a:	7a 81       	ldd	r23, Y+2	; 0x02
     99c:	8b 81       	ldd	r24, Y+3	; 0x03
     99e:	9c 81       	ldd	r25, Y+4	; 0x04
     9a0:	0e 94 5f 12 	call	0x24be	; 0x24be <__floatunsisf>
     9a4:	dc 01       	movw	r26, r24
     9a6:	cb 01       	movw	r24, r22
     9a8:	20 e0       	ldi	r18, 0x00	; 0
     9aa:	30 e0       	ldi	r19, 0x00	; 0
     9ac:	40 e8       	ldi	r20, 0x80	; 128
     9ae:	56 e4       	ldi	r21, 0x46	; 70
     9b0:	bc 01       	movw	r22, r24
     9b2:	cd 01       	movw	r24, r26
     9b4:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
     9b8:	dc 01       	movw	r26, r24
     9ba:	cb 01       	movw	r24, r22
     9bc:	6c 01       	movw	r12, r24
     9be:	7d 01       	movw	r14, r26
     9c0:	8d 81       	ldd	r24, Y+5	; 0x05
     9c2:	9e 81       	ldd	r25, Y+6	; 0x06
     9c4:	cc 01       	movw	r24, r24
     9c6:	a0 e0       	ldi	r26, 0x00	; 0
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	bc 01       	movw	r22, r24
     9cc:	cd 01       	movw	r24, r26
     9ce:	0e 94 5f 12 	call	0x24be	; 0x24be <__floatunsisf>
     9d2:	dc 01       	movw	r26, r24
     9d4:	cb 01       	movw	r24, r22
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	40 e8       	ldi	r20, 0x80	; 128
     9dc:	54 e4       	ldi	r21, 0x44	; 68
     9de:	bc 01       	movw	r22, r24
     9e0:	cd 01       	movw	r24, r26
     9e2:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
     9e6:	dc 01       	movw	r26, r24
     9e8:	cb 01       	movw	r24, r22
     9ea:	9c 01       	movw	r18, r24
     9ec:	ad 01       	movw	r20, r26
     9ee:	c7 01       	movw	r24, r14
     9f0:	b6 01       	movw	r22, r12
     9f2:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__subsf3>
     9f6:	dc 01       	movw	r26, r24
     9f8:	cb 01       	movw	r24, r22
     9fa:	6c 01       	movw	r12, r24
     9fc:	7d 01       	movw	r14, r26
     9fe:	8f 81       	ldd	r24, Y+7	; 0x07
     a00:	98 85       	ldd	r25, Y+8	; 0x08
     a02:	09 2e       	mov	r0, r25
     a04:	00 0c       	add	r0, r0
     a06:	aa 0b       	sbc	r26, r26
     a08:	bb 0b       	sbc	r27, r27
     a0a:	bc 01       	movw	r22, r24
     a0c:	cd 01       	movw	r24, r26
     a0e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__floatsisf>
     a12:	dc 01       	movw	r26, r24
     a14:	cb 01       	movw	r24, r22
     a16:	9c 01       	movw	r18, r24
     a18:	ad 01       	movw	r20, r26
     a1a:	c7 01       	movw	r24, r14
     a1c:	b6 01       	movw	r22, r12
     a1e:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     a22:	dc 01       	movw	r26, r24
     a24:	cb 01       	movw	r24, r22
     a26:	8a 87       	std	Y+10, r24	; 0x0a
     a28:	9b 87       	std	Y+11, r25	; 0x0b
     a2a:	ac 87       	std	Y+12, r26	; 0x0c
     a2c:	bd 87       	std	Y+13, r27	; 0x0d
     a2e:	69 81       	ldd	r22, Y+1	; 0x01
	var2 = ((((double)temp_adc / 131072.0) - ((double)par_t1 / 8192.0)) * (((double)temp_adc / 131072.0) - ((double)par_t1 / 8192.0))) * ((double)par_t3 * 16.0);
     a30:	7a 81       	ldd	r23, Y+2	; 0x02
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	9c 81       	ldd	r25, Y+4	; 0x04
     a36:	0e 94 5f 12 	call	0x24be	; 0x24be <__floatunsisf>
     a3a:	dc 01       	movw	r26, r24
     a3c:	cb 01       	movw	r24, r22
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	58 e4       	ldi	r21, 0x48	; 72
     a46:	bc 01       	movw	r22, r24
     a48:	cd 01       	movw	r24, r26
     a4a:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
     a4e:	dc 01       	movw	r26, r24
     a50:	cb 01       	movw	r24, r22
     a52:	6c 01       	movw	r12, r24
     a54:	7d 01       	movw	r14, r26
     a56:	8d 81       	ldd	r24, Y+5	; 0x05
     a58:	9e 81       	ldd	r25, Y+6	; 0x06
     a5a:	cc 01       	movw	r24, r24
     a5c:	a0 e0       	ldi	r26, 0x00	; 0
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	bc 01       	movw	r22, r24
     a62:	cd 01       	movw	r24, r26
     a64:	0e 94 5f 12 	call	0x24be	; 0x24be <__floatunsisf>
     a68:	dc 01       	movw	r26, r24
     a6a:	cb 01       	movw	r24, r22
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	56 e4       	ldi	r21, 0x46	; 70
     a74:	bc 01       	movw	r22, r24
     a76:	cd 01       	movw	r24, r26
     a78:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
     a7c:	dc 01       	movw	r26, r24
     a7e:	cb 01       	movw	r24, r22
     a80:	9c 01       	movw	r18, r24
     a82:	ad 01       	movw	r20, r26
     a84:	c7 01       	movw	r24, r14
     a86:	b6 01       	movw	r22, r12
     a88:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__subsf3>
     a8c:	dc 01       	movw	r26, r24
     a8e:	cb 01       	movw	r24, r22
     a90:	6c 01       	movw	r12, r24
     a92:	7d 01       	movw	r14, r26
     a94:	69 81       	ldd	r22, Y+1	; 0x01
     a96:	7a 81       	ldd	r23, Y+2	; 0x02
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	9c 81       	ldd	r25, Y+4	; 0x04
     a9c:	0e 94 5f 12 	call	0x24be	; 0x24be <__floatunsisf>
     aa0:	dc 01       	movw	r26, r24
     aa2:	cb 01       	movw	r24, r22
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	58 e4       	ldi	r21, 0x48	; 72
     aac:	bc 01       	movw	r22, r24
     aae:	cd 01       	movw	r24, r26
     ab0:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
     ab4:	dc 01       	movw	r26, r24
     ab6:	cb 01       	movw	r24, r22
     ab8:	4c 01       	movw	r8, r24
     aba:	5d 01       	movw	r10, r26
     abc:	8d 81       	ldd	r24, Y+5	; 0x05
     abe:	9e 81       	ldd	r25, Y+6	; 0x06
     ac0:	cc 01       	movw	r24, r24
     ac2:	a0 e0       	ldi	r26, 0x00	; 0
     ac4:	b0 e0       	ldi	r27, 0x00	; 0
     ac6:	bc 01       	movw	r22, r24
     ac8:	cd 01       	movw	r24, r26
     aca:	0e 94 5f 12 	call	0x24be	; 0x24be <__floatunsisf>
     ace:	dc 01       	movw	r26, r24
     ad0:	cb 01       	movw	r24, r22
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	56 e4       	ldi	r21, 0x46	; 70
     ada:	bc 01       	movw	r22, r24
     adc:	cd 01       	movw	r24, r26
     ade:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
     ae2:	dc 01       	movw	r26, r24
     ae4:	cb 01       	movw	r24, r22
     ae6:	9c 01       	movw	r18, r24
     ae8:	ad 01       	movw	r20, r26
     aea:	c5 01       	movw	r24, r10
     aec:	b4 01       	movw	r22, r8
     aee:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__subsf3>
     af2:	dc 01       	movw	r26, r24
     af4:	cb 01       	movw	r24, r22
     af6:	9c 01       	movw	r18, r24
     af8:	ad 01       	movw	r20, r26
     afa:	c7 01       	movw	r24, r14
     afc:	b6 01       	movw	r22, r12
     afe:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     b02:	dc 01       	movw	r26, r24
     b04:	cb 01       	movw	r24, r22
     b06:	6c 01       	movw	r12, r24
     b08:	7d 01       	movw	r14, r26
     b0a:	89 85       	ldd	r24, Y+9	; 0x09
     b0c:	08 2e       	mov	r0, r24
     b0e:	00 0c       	add	r0, r0
     b10:	99 0b       	sbc	r25, r25
     b12:	aa 0b       	sbc	r26, r26
     b14:	bb 0b       	sbc	r27, r27
     b16:	bc 01       	movw	r22, r24
     b18:	cd 01       	movw	r24, r26
     b1a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__floatsisf>
     b1e:	dc 01       	movw	r26, r24
     b20:	cb 01       	movw	r24, r22
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	40 e8       	ldi	r20, 0x80	; 128
     b28:	51 e4       	ldi	r21, 0x41	; 65
     b2a:	bc 01       	movw	r22, r24
     b2c:	cd 01       	movw	r24, r26
     b2e:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     b32:	dc 01       	movw	r26, r24
     b34:	cb 01       	movw	r24, r22
     b36:	9c 01       	movw	r18, r24
     b38:	ad 01       	movw	r20, r26
     b3a:	c7 01       	movw	r24, r14
     b3c:	b6 01       	movw	r22, r12
     b3e:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     b42:	dc 01       	movw	r26, r24
     b44:	cb 01       	movw	r24, r22
     b46:	8e 87       	std	Y+14, r24	; 0x0e
     b48:	9f 87       	std	Y+15, r25	; 0x0f
     b4a:	a8 8b       	std	Y+16, r26	; 0x10
     b4c:	b9 8b       	std	Y+17, r27	; 0x11
     b4e:	2e 85       	ldd	r18, Y+14	; 0x0e
	t_fine = var1 + var2;
     b50:	3f 85       	ldd	r19, Y+15	; 0x0f
     b52:	48 89       	ldd	r20, Y+16	; 0x10
     b54:	59 89       	ldd	r21, Y+17	; 0x11
     b56:	6a 85       	ldd	r22, Y+10	; 0x0a
     b58:	7b 85       	ldd	r23, Y+11	; 0x0b
     b5a:	8c 85       	ldd	r24, Y+12	; 0x0c
     b5c:	9d 85       	ldd	r25, Y+13	; 0x0d
     b5e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__addsf3>
     b62:	dc 01       	movw	r26, r24
     b64:	cb 01       	movw	r24, r22
     b66:	bc 01       	movw	r22, r24
     b68:	cd 01       	movw	r24, r26
     b6a:	0e 94 2e 12 	call	0x245c	; 0x245c <__fixsfsi>
     b6e:	dc 01       	movw	r26, r24
     b70:	cb 01       	movw	r24, r22
     b72:	8a 8b       	std	Y+18, r24	; 0x12
     b74:	9b 8b       	std	Y+19, r25	; 0x13
     b76:	ac 8b       	std	Y+20, r26	; 0x14
     b78:	bd 8b       	std	Y+21, r27	; 0x15
     b7a:	8a 89       	ldd	r24, Y+18	; 0x12

	
	return t_fine;
     b7c:	9b 89       	ldd	r25, Y+19	; 0x13
     b7e:	ac 89       	ldd	r26, Y+20	; 0x14
     b80:	bd 89       	ldd	r27, Y+21	; 0x15
     b82:	bc 01       	movw	r22, r24
}
     b84:	cd 01       	movw	r24, r26
     b86:	66 96       	adiw	r28, 0x16	; 22
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	f8 94       	cli
     b8c:	de bf       	out	0x3e, r29	; 62
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	cd bf       	out	0x3d, r28	; 61
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	9f 90       	pop	r9
     ba4:	8f 90       	pop	r8
     ba6:	08 95       	ret

00000ba8 <READ_PRESS>:
     ba8:	cf 92       	push	r12

float READ_PRESS ( void )
{
     baa:	df 92       	push	r13
     bac:	ef 92       	push	r14
     bae:	ff 92       	push	r15
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	a9 97       	sbiw	r28, 0x29	; 41
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
	int32_t t_fine = READ_TEMP_I();
     bc4:	19 de       	rcall	.-974    	; 0x7f8 <READ_TEMP_I>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	89 83       	std	Y+1, r24	; 0x01
     bcc:	9a 83       	std	Y+2, r25	; 0x02
     bce:	ab 83       	std	Y+3, r26	; 0x03
     bd0:	bc 83       	std	Y+4, r27	; 0x04
	unsigned char cAdrWork = 0;
     bd2:	19 a6       	std	Y+41, r1	; 0x29
	double var1 = 0;
     bd4:	1d 82       	std	Y+5, r1	; 0x05
     bd6:	1e 82       	std	Y+6, r1	; 0x06
     bd8:	1f 82       	std	Y+7, r1	; 0x07
     bda:	18 86       	std	Y+8, r1	; 0x08
	double var2 = 0;
     bdc:	19 86       	std	Y+9, r1	; 0x09
     bde:	1a 86       	std	Y+10, r1	; 0x0a
     be0:	1b 86       	std	Y+11, r1	; 0x0b
     be2:	1c 86       	std	Y+12, r1	; 0x0c
	double var3 = 0;
     be4:	1d 86       	std	Y+13, r1	; 0x0d
     be6:	1e 86       	std	Y+14, r1	; 0x0e
     be8:	1f 86       	std	Y+15, r1	; 0x0f
     bea:	18 8a       	std	Y+16, r1	; 0x10
	double press_comp = 0;
     bec:	19 8a       	std	Y+17, r1	; 0x11
     bee:	1a 8a       	std	Y+18, r1	; 0x12
     bf0:	1b 8a       	std	Y+19, r1	; 0x13
     bf2:	1c 8a       	std	Y+20, r1	; 0x14
	uint32_t press_adc = 0;
     bf4:	1d 8a       	std	Y+21, r1	; 0x15
     bf6:	1e 8a       	std	Y+22, r1	; 0x16
     bf8:	1f 8a       	std	Y+23, r1	; 0x17
     bfa:	18 8e       	std	Y+24, r1	; 0x18
	uint16_t par_p1  = 0;
     bfc:	1a 8e       	std	Y+26, r1	; 0x1a
     bfe:	19 8e       	std	Y+25, r1	; 0x19
	int16_t par_p2  = 0;
     c00:	1c 8e       	std	Y+28, r1	; 0x1c
     c02:	1b 8e       	std	Y+27, r1	; 0x1b
	int8_t par_p3  = 0;
     c04:	1d 8e       	std	Y+29, r1	; 0x1d
	int16_t par_p4  = 0;
     c06:	1f 8e       	std	Y+31, r1	; 0x1f
     c08:	1e 8e       	std	Y+30, r1	; 0x1e
	int16_t par_p5  = 0;
     c0a:	19 a2       	std	Y+33, r1	; 0x21
     c0c:	18 a2       	std	Y+32, r1	; 0x20
	int8_t par_p6  = 0;
     c0e:	1a a2       	std	Y+34, r1	; 0x22
	int8_t par_p7  = 0;
     c10:	1b a2       	std	Y+35, r1	; 0x23
	int16_t par_p8  = 0;
     c12:	1d a2       	std	Y+37, r1	; 0x25
     c14:	1c a2       	std	Y+36, r1	; 0x24
	int16_t par_p9  = 0;
     c16:	1f a2       	std	Y+39, r1	; 0x27
     c18:	1e a2       	std	Y+38, r1	; 0x26
	int8_t par_p10  = 0;
     c1a:	18 a6       	std	Y+40, r1	; 0x28
	
	cAdrWork = REG_PRESS_MSB;
     c1c:	8f e1       	ldi	r24, 0x1F	; 31
     c1e:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     c20:	ce 01       	movw	r24, r28
     c22:	89 96       	adiw	r24, 0x29	; 41
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	41 e0       	ldi	r20, 0x01	; 1
     c2a:	50 e0       	ldi	r21, 0x00	; 0
     c2c:	bc 01       	movw	r22, r24
     c2e:	86 e7       	ldi	r24, 0x76	; 118
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	64 dc       	rcall	.-1848   	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
     c34:	41 e0       	ldi	r20, 0x01	; 1
     c36:	50 e0       	ldi	r21, 0x00	; 0
     c38:	60 e2       	ldi	r22, 0x20	; 32
     c3a:	72 e0       	ldi	r23, 0x02	; 2
     c3c:	86 e7       	ldi	r24, 0x76	; 118
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	b2 dc       	rcall	.-1692   	; 0x5a6 <twi_master_receive>
	press_adc = (0xFF000 & (((uint32_t)cRecieve[0]) << 12));
     c42:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	07 2e       	mov	r0, r23
     c50:	7c e0       	ldi	r23, 0x0C	; 12
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	aa 1f       	adc	r26, r26
     c58:	bb 1f       	adc	r27, r27
     c5a:	7a 95       	dec	r23
     c5c:	d1 f7       	brne	.-12     	; 0xc52 <READ_PRESS+0xaa>
     c5e:	70 2d       	mov	r23, r0
     c60:	88 27       	eor	r24, r24
     c62:	90 7f       	andi	r25, 0xF0	; 240
     c64:	af 70       	andi	r26, 0x0F	; 15
     c66:	bb 27       	eor	r27, r27
     c68:	8d 8b       	std	Y+21, r24	; 0x15
     c6a:	9e 8b       	std	Y+22, r25	; 0x16
     c6c:	af 8b       	std	Y+23, r26	; 0x17
     c6e:	b8 8f       	std	Y+24, r27	; 0x18
	
	cAdrWork = REG_PRESS_LSB;
     c70:	80 e2       	ldi	r24, 0x20	; 32
     c72:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     c74:	ce 01       	movw	r24, r28
     c76:	89 96       	adiw	r24, 0x29	; 41
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	41 e0       	ldi	r20, 0x01	; 1
     c7e:	50 e0       	ldi	r21, 0x00	; 0
     c80:	bc 01       	movw	r22, r24
     c82:	86 e7       	ldi	r24, 0x76	; 118
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	3a dc       	rcall	.-1932   	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
     c88:	42 e0       	ldi	r20, 0x02	; 2
     c8a:	50 e0       	ldi	r21, 0x00	; 0
     c8c:	60 e2       	ldi	r22, 0x20	; 32
     c8e:	72 e0       	ldi	r23, 0x02	; 2
     c90:	86 e7       	ldi	r24, 0x76	; 118
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	88 dc       	rcall	.-1776   	; 0x5a6 <twi_master_receive>
	press_adc = press_adc | (0x00FF0 & (cRecieve[0] << 4)) | (0x0000F & (cRecieve[1] >> 4));
     c96:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     c9a:	88 2f       	mov	r24, r24
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	82 95       	swap	r24
     ca0:	92 95       	swap	r25
     ca2:	90 7f       	andi	r25, 0xF0	; 240
     ca4:	98 27       	eor	r25, r24
     ca6:	80 7f       	andi	r24, 0xF0	; 240
     ca8:	98 27       	eor	r25, r24
     caa:	09 2e       	mov	r0, r25
     cac:	00 0c       	add	r0, r0
     cae:	aa 0b       	sbc	r26, r26
     cb0:	bb 0b       	sbc	r27, r27
     cb2:	9c 01       	movw	r18, r24
     cb4:	ad 01       	movw	r20, r26
     cb6:	20 7f       	andi	r18, 0xF0	; 240
     cb8:	3f 70       	andi	r19, 0x0F	; 15
     cba:	44 27       	eor	r20, r20
     cbc:	55 27       	eor	r21, r21
     cbe:	8d 89       	ldd	r24, Y+21	; 0x15
     cc0:	9e 89       	ldd	r25, Y+22	; 0x16
     cc2:	af 89       	ldd	r26, Y+23	; 0x17
     cc4:	b8 8d       	ldd	r27, Y+24	; 0x18
     cc6:	28 2b       	or	r18, r24
     cc8:	39 2b       	or	r19, r25
     cca:	4a 2b       	or	r20, r26
     ccc:	5b 2b       	or	r21, r27
     cce:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
     cd2:	82 95       	swap	r24
     cd4:	8f 70       	andi	r24, 0x0F	; 15
     cd6:	88 2f       	mov	r24, r24
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	a0 e0       	ldi	r26, 0x00	; 0
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	82 2b       	or	r24, r18
     ce0:	93 2b       	or	r25, r19
     ce2:	a4 2b       	or	r26, r20
     ce4:	b5 2b       	or	r27, r21
     ce6:	8d 8b       	std	Y+21, r24	; 0x15
     ce8:	9e 8b       	std	Y+22, r25	; 0x16
     cea:	af 8b       	std	Y+23, r26	; 0x17
     cec:	b8 8f       	std	Y+24, r27	; 0x18
	
	cAdrWork = 0x8E;
     cee:	8e e8       	ldi	r24, 0x8E	; 142
     cf0:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     cf2:	ce 01       	movw	r24, r28
     cf4:	89 96       	adiw	r24, 0x29	; 41
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	41 e0       	ldi	r20, 0x01	; 1
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	bc 01       	movw	r22, r24
     d00:	86 e7       	ldi	r24, 0x76	; 118
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	fb db       	rcall	.-2058   	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
     d06:	42 e0       	ldi	r20, 0x02	; 2
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	60 e2       	ldi	r22, 0x20	; 32
     d0c:	72 e0       	ldi	r23, 0x02	; 2
     d0e:	86 e7       	ldi	r24, 0x76	; 118
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	49 dc       	rcall	.-1902   	; 0x5a6 <twi_master_receive>
	par_p1 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
     d14:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
     d18:	88 2f       	mov	r24, r24
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	38 2f       	mov	r19, r24
     d1e:	22 27       	eor	r18, r18
     d20:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     d24:	88 2f       	mov	r24, r24
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	82 2b       	or	r24, r18
     d2a:	93 2b       	or	r25, r19
     d2c:	9a 8f       	std	Y+26, r25	; 0x1a
     d2e:	89 8f       	std	Y+25, r24	; 0x19
	
	cAdrWork = 0x90;
     d30:	80 e9       	ldi	r24, 0x90	; 144
     d32:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     d34:	ce 01       	movw	r24, r28
     d36:	89 96       	adiw	r24, 0x29	; 41
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	41 e0       	ldi	r20, 0x01	; 1
     d3e:	50 e0       	ldi	r21, 0x00	; 0
     d40:	bc 01       	movw	r22, r24
     d42:	86 e7       	ldi	r24, 0x76	; 118
     d44:	90 e0       	ldi	r25, 0x00	; 0
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
     d46:	da db       	rcall	.-2124   	; 0x4fc <twi_master_transmit>
     d48:	42 e0       	ldi	r20, 0x02	; 2
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	60 e2       	ldi	r22, 0x20	; 32
     d4e:	72 e0       	ldi	r23, 0x02	; 2
     d50:	86 e7       	ldi	r24, 0x76	; 118
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	28 dc       	rcall	.-1968   	; 0x5a6 <twi_master_receive>
	par_p2 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
     d56:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
     d5a:	88 2f       	mov	r24, r24
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	38 2f       	mov	r19, r24
     d60:	22 27       	eor	r18, r18
     d62:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	82 2b       	or	r24, r18
     d6c:	93 2b       	or	r25, r19
     d6e:	9c 8f       	std	Y+28, r25	; 0x1c
     d70:	8b 8f       	std	Y+27, r24	; 0x1b
	
	cAdrWork = 0x92;
     d72:	82 e9       	ldi	r24, 0x92	; 146
     d74:	89 a7       	std	Y+41, r24	; 0x29
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     d76:	ce 01       	movw	r24, r28
     d78:	89 96       	adiw	r24, 0x29	; 41
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	41 e0       	ldi	r20, 0x01	; 1
     d80:	50 e0       	ldi	r21, 0x00	; 0
     d82:	bc 01       	movw	r22, r24
     d84:	86 e7       	ldi	r24, 0x76	; 118
     d86:	90 e0       	ldi	r25, 0x00	; 0
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
     d88:	b9 db       	rcall	.-2190   	; 0x4fc <twi_master_transmit>
     d8a:	41 e0       	ldi	r20, 0x01	; 1
     d8c:	50 e0       	ldi	r21, 0x00	; 0
     d8e:	60 e2       	ldi	r22, 0x20	; 32
     d90:	72 e0       	ldi	r23, 0x02	; 2
     d92:	86 e7       	ldi	r24, 0x76	; 118
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	07 dc       	rcall	.-2034   	; 0x5a6 <twi_master_receive>
	par_p3 = cRecieve[0];
     d98:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     d9c:	8d 8f       	std	Y+29, r24	; 0x1d
	
	cAdrWork = 0x94;
     d9e:	84 e9       	ldi	r24, 0x94	; 148
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     da0:	89 a7       	std	Y+41, r24	; 0x29
     da2:	ce 01       	movw	r24, r28
     da4:	89 96       	adiw	r24, 0x29	; 41
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	41 e0       	ldi	r20, 0x01	; 1
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	bc 01       	movw	r22, r24
     db0:	86 e7       	ldi	r24, 0x76	; 118
     db2:	90 e0       	ldi	r25, 0x00	; 0
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
     db4:	a3 db       	rcall	.-2234   	; 0x4fc <twi_master_transmit>
     db6:	42 e0       	ldi	r20, 0x02	; 2
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	60 e2       	ldi	r22, 0x20	; 32
     dbc:	72 e0       	ldi	r23, 0x02	; 2
     dbe:	86 e7       	ldi	r24, 0x76	; 118
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	f1 db       	rcall	.-2078   	; 0x5a6 <twi_master_receive>
	par_p4 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
     dc4:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
     dc8:	88 2f       	mov	r24, r24
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	38 2f       	mov	r19, r24
     dce:	22 27       	eor	r18, r18
     dd0:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	82 2b       	or	r24, r18
     dda:	93 2b       	or	r25, r19
     ddc:	9f 8f       	std	Y+31, r25	; 0x1f
	
	cAdrWork = 0x96;
     dde:	8e 8f       	std	Y+30, r24	; 0x1e
     de0:	86 e9       	ldi	r24, 0x96	; 150
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     de2:	89 a7       	std	Y+41, r24	; 0x29
     de4:	ce 01       	movw	r24, r28
     de6:	89 96       	adiw	r24, 0x29	; 41
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	41 e0       	ldi	r20, 0x01	; 1
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	bc 01       	movw	r22, r24
     df2:	86 e7       	ldi	r24, 0x76	; 118
     df4:	90 e0       	ldi	r25, 0x00	; 0
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
     df6:	82 db       	rcall	.-2300   	; 0x4fc <twi_master_transmit>
     df8:	42 e0       	ldi	r20, 0x02	; 2
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	60 e2       	ldi	r22, 0x20	; 32
     dfe:	72 e0       	ldi	r23, 0x02	; 2
     e00:	86 e7       	ldi	r24, 0x76	; 118
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	d0 db       	rcall	.-2144   	; 0x5a6 <twi_master_receive>
	par_p5 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
     e06:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
     e0a:	88 2f       	mov	r24, r24
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	38 2f       	mov	r19, r24
     e10:	22 27       	eor	r18, r18
     e12:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     e16:	88 2f       	mov	r24, r24
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	82 2b       	or	r24, r18
     e1c:	93 2b       	or	r25, r19
     e1e:	99 a3       	std	Y+33, r25	; 0x21
	
	cAdrWork = 0x99;
     e20:	88 a3       	std	Y+32, r24	; 0x20
     e22:	89 e9       	ldi	r24, 0x99	; 153
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     e24:	89 a7       	std	Y+41, r24	; 0x29
     e26:	ce 01       	movw	r24, r28
     e28:	89 96       	adiw	r24, 0x29	; 41
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	41 e0       	ldi	r20, 0x01	; 1
     e30:	50 e0       	ldi	r21, 0x00	; 0
     e32:	bc 01       	movw	r22, r24
     e34:	86 e7       	ldi	r24, 0x76	; 118
     e36:	90 e0       	ldi	r25, 0x00	; 0
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
     e38:	61 db       	rcall	.-2366   	; 0x4fc <twi_master_transmit>
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	60 e2       	ldi	r22, 0x20	; 32
     e40:	72 e0       	ldi	r23, 0x02	; 2
     e42:	86 e7       	ldi	r24, 0x76	; 118
     e44:	90 e0       	ldi	r25, 0x00	; 0
	par_p6 = cRecieve[0];
     e46:	af db       	rcall	.-2210   	; 0x5a6 <twi_master_receive>
     e48:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
	
	cAdrWork = 0x98;
     e4c:	8a a3       	std	Y+34, r24	; 0x22
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     e4e:	88 e9       	ldi	r24, 0x98	; 152
     e50:	89 a7       	std	Y+41, r24	; 0x29
     e52:	ce 01       	movw	r24, r28
     e54:	89 96       	adiw	r24, 0x29	; 41
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	41 e0       	ldi	r20, 0x01	; 1
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	bc 01       	movw	r22, r24
     e60:	86 e7       	ldi	r24, 0x76	; 118
     e62:	90 e0       	ldi	r25, 0x00	; 0
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
     e64:	4b db       	rcall	.-2410   	; 0x4fc <twi_master_transmit>
     e66:	42 e0       	ldi	r20, 0x02	; 2
     e68:	50 e0       	ldi	r21, 0x00	; 0
     e6a:	60 e2       	ldi	r22, 0x20	; 32
     e6c:	72 e0       	ldi	r23, 0x02	; 2
     e6e:	86 e7       	ldi	r24, 0x76	; 118
     e70:	90 e0       	ldi	r25, 0x00	; 0
	par_p7 = cRecieve[0];
     e72:	99 db       	rcall	.-2254   	; 0x5a6 <twi_master_receive>
     e74:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
	
	cAdrWork = 0x9C;
     e78:	8b a3       	std	Y+35, r24	; 0x23
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     e7a:	8c e9       	ldi	r24, 0x9C	; 156
     e7c:	89 a7       	std	Y+41, r24	; 0x29
     e7e:	ce 01       	movw	r24, r28
     e80:	89 96       	adiw	r24, 0x29	; 41
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	50 e0       	ldi	r21, 0x00	; 0
     e8a:	bc 01       	movw	r22, r24
     e8c:	86 e7       	ldi	r24, 0x76	; 118
     e8e:	90 e0       	ldi	r25, 0x00	; 0
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
     e90:	35 db       	rcall	.-2454   	; 0x4fc <twi_master_transmit>
     e92:	42 e0       	ldi	r20, 0x02	; 2
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	60 e2       	ldi	r22, 0x20	; 32
     e98:	72 e0       	ldi	r23, 0x02	; 2
     e9a:	86 e7       	ldi	r24, 0x76	; 118
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	83 db       	rcall	.-2298   	; 0x5a6 <twi_master_receive>
	par_p8 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
     ea0:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
     ea4:	88 2f       	mov	r24, r24
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	38 2f       	mov	r19, r24
     eaa:	22 27       	eor	r18, r18
     eac:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     eb0:	88 2f       	mov	r24, r24
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	82 2b       	or	r24, r18
     eb6:	93 2b       	or	r25, r19
	
	cAdrWork = 0x9E;
     eb8:	9d a3       	std	Y+37, r25	; 0x25
     eba:	8c a3       	std	Y+36, r24	; 0x24
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     ebc:	8e e9       	ldi	r24, 0x9E	; 158
     ebe:	89 a7       	std	Y+41, r24	; 0x29
     ec0:	ce 01       	movw	r24, r28
     ec2:	89 96       	adiw	r24, 0x29	; 41
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	41 e0       	ldi	r20, 0x01	; 1
     eca:	50 e0       	ldi	r21, 0x00	; 0
     ecc:	bc 01       	movw	r22, r24
     ece:	86 e7       	ldi	r24, 0x76	; 118
     ed0:	90 e0       	ldi	r25, 0x00	; 0
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
     ed2:	14 db       	rcall	.-2520   	; 0x4fc <twi_master_transmit>
     ed4:	42 e0       	ldi	r20, 0x02	; 2
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	60 e2       	ldi	r22, 0x20	; 32
     eda:	72 e0       	ldi	r23, 0x02	; 2
     edc:	86 e7       	ldi	r24, 0x76	; 118
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	62 db       	rcall	.-2364   	; 0x5a6 <twi_master_receive>
	par_p9 = (0xFF00 & (((uint32_t)cRecieve[1]) << 8)) | (0x00FFF & (cRecieve[0]));
     ee2:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
     ee6:	88 2f       	mov	r24, r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	38 2f       	mov	r19, r24
     eec:	22 27       	eor	r18, r18
     eee:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	82 2b       	or	r24, r18
     ef8:	93 2b       	or	r25, r19
	
	cAdrWork = 0xA0;
     efa:	9f a3       	std	Y+39, r25	; 0x27
     efc:	8e a3       	std	Y+38, r24	; 0x26
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
     efe:	80 ea       	ldi	r24, 0xA0	; 160
     f00:	89 a7       	std	Y+41, r24	; 0x29
     f02:	ce 01       	movw	r24, r28
     f04:	89 96       	adiw	r24, 0x29	; 41
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	41 e0       	ldi	r20, 0x01	; 1
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	bc 01       	movw	r22, r24
     f10:	86 e7       	ldi	r24, 0x76	; 118
     f12:	90 e0       	ldi	r25, 0x00	; 0
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
     f14:	f3 da       	rcall	.-2586   	; 0x4fc <twi_master_transmit>
     f16:	42 e0       	ldi	r20, 0x02	; 2
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	60 e2       	ldi	r22, 0x20	; 32
     f1c:	72 e0       	ldi	r23, 0x02	; 2
     f1e:	86 e7       	ldi	r24, 0x76	; 118
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	41 db       	rcall	.-2430   	; 0x5a6 <twi_master_receive>
	par_p10 = cRecieve[0];
     f24:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
     f28:	88 a7       	std	Y+40, r24	; 0x28
	
	
	var1 = ((double)t_fine / 2) - 64000.0;
     f2a:	69 81       	ldd	r22, Y+1	; 0x01
     f2c:	7a 81       	ldd	r23, Y+2	; 0x02
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__floatsisf>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	20 e0       	ldi	r18, 0x00	; 0
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	50 e4       	ldi	r21, 0x40	; 64
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	4a e7       	ldi	r20, 0x7A	; 122
     f54:	57 e4       	ldi	r21, 0x47	; 71
     f56:	bc 01       	movw	r22, r24
     f58:	cd 01       	movw	r24, r26
     f5a:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__subsf3>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	8d 83       	std	Y+5, r24	; 0x05
     f64:	9e 83       	std	Y+6, r25	; 0x06
     f66:	af 83       	std	Y+7, r26	; 0x07
     f68:	b8 87       	std	Y+8, r27	; 0x08
	var2 = var1 * var1 * ((double)par_p6 / 131072);
     f6a:	2d 81       	ldd	r18, Y+5	; 0x05
     f6c:	3e 81       	ldd	r19, Y+6	; 0x06
     f6e:	4f 81       	ldd	r20, Y+7	; 0x07
     f70:	58 85       	ldd	r21, Y+8	; 0x08
     f72:	6d 81       	ldd	r22, Y+5	; 0x05
     f74:	7e 81       	ldd	r23, Y+6	; 0x06
     f76:	8f 81       	ldd	r24, Y+7	; 0x07
     f78:	98 85       	ldd	r25, Y+8	; 0x08
     f7a:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	6c 01       	movw	r12, r24
     f84:	7d 01       	movw	r14, r26
     f86:	8a a1       	ldd	r24, Y+34	; 0x22
     f88:	08 2e       	mov	r0, r24
     f8a:	00 0c       	add	r0, r0
     f8c:	99 0b       	sbc	r25, r25
     f8e:	aa 0b       	sbc	r26, r26
     f90:	bb 0b       	sbc	r27, r27
     f92:	bc 01       	movw	r22, r24
     f94:	cd 01       	movw	r24, r26
     f96:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__floatsisf>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	58 e4       	ldi	r21, 0x48	; 72
     fa6:	bc 01       	movw	r22, r24
     fa8:	cd 01       	movw	r24, r26
     faa:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	9c 01       	movw	r18, r24
     fb4:	ad 01       	movw	r20, r26
     fb6:	c7 01       	movw	r24, r14
     fb8:	b6 01       	movw	r22, r12
     fba:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	89 87       	std	Y+9, r24	; 0x09
     fc4:	9a 87       	std	Y+10, r25	; 0x0a
     fc6:	ab 87       	std	Y+11, r26	; 0x0b
     fc8:	bc 87       	std	Y+12, r27	; 0x0c
	var2 = var2 + (var1 * (double)par_p5 * 2.0);
     fca:	88 a1       	ldd	r24, Y+32	; 0x20
     fcc:	99 a1       	ldd	r25, Y+33	; 0x21
     fce:	09 2e       	mov	r0, r25
     fd0:	00 0c       	add	r0, r0
     fd2:	aa 0b       	sbc	r26, r26
     fd4:	bb 0b       	sbc	r27, r27
     fd6:	bc 01       	movw	r22, r24
     fd8:	cd 01       	movw	r24, r26
     fda:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__floatsisf>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	2d 81       	ldd	r18, Y+5	; 0x05
     fe4:	3e 81       	ldd	r19, Y+6	; 0x06
     fe6:	4f 81       	ldd	r20, Y+7	; 0x07
     fe8:	58 85       	ldd	r21, Y+8	; 0x08
     fea:	bc 01       	movw	r22, r24
     fec:	cd 01       	movw	r24, r26
     fee:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	9c 01       	movw	r18, r24
     ff8:	ad 01       	movw	r20, r26
     ffa:	bc 01       	movw	r22, r24
     ffc:	cd 01       	movw	r24, r26
     ffe:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__addsf3>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	9c 01       	movw	r18, r24
    1008:	ad 01       	movw	r20, r26
    100a:	69 85       	ldd	r22, Y+9	; 0x09
    100c:	7a 85       	ldd	r23, Y+10	; 0x0a
    100e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1010:	9c 85       	ldd	r25, Y+12	; 0x0c
    1012:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__addsf3>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	89 87       	std	Y+9, r24	; 0x09
    101c:	9a 87       	std	Y+10, r25	; 0x0a
    101e:	ab 87       	std	Y+11, r26	; 0x0b
    1020:	bc 87       	std	Y+12, r27	; 0x0c
	var2 = (var2 / 4.0) + ((double)par_p4 * 65536.0);
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e8       	ldi	r20, 0x80	; 128
    1028:	50 e4       	ldi	r21, 0x40	; 64
    102a:	69 85       	ldd	r22, Y+9	; 0x09
    102c:	7a 85       	ldd	r23, Y+10	; 0x0a
    102e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1030:	9c 85       	ldd	r25, Y+12	; 0x0c
    1032:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
    1036:	dc 01       	movw	r26, r24
    1038:	cb 01       	movw	r24, r22
    103a:	6c 01       	movw	r12, r24
    103c:	7d 01       	movw	r14, r26
    103e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1040:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1042:	09 2e       	mov	r0, r25
    1044:	00 0c       	add	r0, r0
    1046:	aa 0b       	sbc	r26, r26
    1048:	bb 0b       	sbc	r27, r27
    104a:	bc 01       	movw	r22, r24
    104c:	cd 01       	movw	r24, r26
    104e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__floatsisf>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e8       	ldi	r20, 0x80	; 128
    105c:	57 e4       	ldi	r21, 0x47	; 71
    105e:	bc 01       	movw	r22, r24
    1060:	cd 01       	movw	r24, r26
    1062:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	9c 01       	movw	r18, r24
    106c:	ad 01       	movw	r20, r26
    106e:	c7 01       	movw	r24, r14
    1070:	b6 01       	movw	r22, r12
    1072:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__addsf3>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	89 87       	std	Y+9, r24	; 0x09
    107c:	9a 87       	std	Y+10, r25	; 0x0a
    107e:	ab 87       	std	Y+11, r26	; 0x0b
    1080:	bc 87       	std	Y+12, r27	; 0x0c
	var1 = ((((double)par_p3 * var1 * var1) / 16384.0) + ((double)par_p2 * var1)) / 524288.0;
    1082:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1084:	08 2e       	mov	r0, r24
    1086:	00 0c       	add	r0, r0
    1088:	99 0b       	sbc	r25, r25
    108a:	aa 0b       	sbc	r26, r26
    108c:	bb 0b       	sbc	r27, r27
    108e:	bc 01       	movw	r22, r24
    1090:	cd 01       	movw	r24, r26
    1092:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__floatsisf>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	2d 81       	ldd	r18, Y+5	; 0x05
    109c:	3e 81       	ldd	r19, Y+6	; 0x06
    109e:	4f 81       	ldd	r20, Y+7	; 0x07
    10a0:	58 85       	ldd	r21, Y+8	; 0x08
    10a2:	bc 01       	movw	r22, r24
    10a4:	cd 01       	movw	r24, r26
    10a6:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	2d 81       	ldd	r18, Y+5	; 0x05
    10b0:	3e 81       	ldd	r19, Y+6	; 0x06
    10b2:	4f 81       	ldd	r20, Y+7	; 0x07
    10b4:	58 85       	ldd	r21, Y+8	; 0x08
    10b6:	bc 01       	movw	r22, r24
    10b8:	cd 01       	movw	r24, r26
    10ba:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e8       	ldi	r20, 0x80	; 128
    10c8:	56 e4       	ldi	r21, 0x46	; 70
    10ca:	bc 01       	movw	r22, r24
    10cc:	cd 01       	movw	r24, r26
    10ce:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	6c 01       	movw	r12, r24
    10d8:	7d 01       	movw	r14, r26
    10da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10de:	09 2e       	mov	r0, r25
    10e0:	00 0c       	add	r0, r0
    10e2:	aa 0b       	sbc	r26, r26
    10e4:	bb 0b       	sbc	r27, r27
    10e6:	bc 01       	movw	r22, r24
    10e8:	cd 01       	movw	r24, r26
    10ea:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__floatsisf>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	2d 81       	ldd	r18, Y+5	; 0x05
    10f4:	3e 81       	ldd	r19, Y+6	; 0x06
    10f6:	4f 81       	ldd	r20, Y+7	; 0x07
    10f8:	58 85       	ldd	r21, Y+8	; 0x08
    10fa:	bc 01       	movw	r22, r24
    10fc:	cd 01       	movw	r24, r26
    10fe:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	9c 01       	movw	r18, r24
    1108:	ad 01       	movw	r20, r26
    110a:	c7 01       	movw	r24, r14
    110c:	b6 01       	movw	r22, r12
    110e:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__addsf3>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	59 e4       	ldi	r21, 0x49	; 73
    111e:	bc 01       	movw	r22, r24
    1120:	cd 01       	movw	r24, r26
    1122:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	8d 83       	std	Y+5, r24	; 0x05
    112c:	9e 83       	std	Y+6, r25	; 0x06
    112e:	af 83       	std	Y+7, r26	; 0x07
    1130:	b8 87       	std	Y+8, r27	; 0x08
	var1 = (1.0 + (var1 / 32768.0)) * (double)par_p1;
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e0       	ldi	r20, 0x00	; 0
    1138:	57 e4       	ldi	r21, 0x47	; 71
    113a:	6d 81       	ldd	r22, Y+5	; 0x05
    113c:	7e 81       	ldd	r23, Y+6	; 0x06
    113e:	8f 81       	ldd	r24, Y+7	; 0x07
    1140:	98 85       	ldd	r25, Y+8	; 0x08
    1142:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	40 e8       	ldi	r20, 0x80	; 128
    1150:	5f e3       	ldi	r21, 0x3F	; 63
    1152:	bc 01       	movw	r22, r24
    1154:	cd 01       	movw	r24, r26
    1156:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__addsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	6c 01       	movw	r12, r24
    1160:	7d 01       	movw	r14, r26
    1162:	89 8d       	ldd	r24, Y+25	; 0x19
    1164:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1166:	cc 01       	movw	r24, r24
    1168:	a0 e0       	ldi	r26, 0x00	; 0
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	bc 01       	movw	r22, r24
    116e:	cd 01       	movw	r24, r26
    1170:	0e 94 5f 12 	call	0x24be	; 0x24be <__floatunsisf>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	9c 01       	movw	r18, r24
    117a:	ad 01       	movw	r20, r26
    117c:	c7 01       	movw	r24, r14
    117e:	b6 01       	movw	r22, r12
    1180:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	8d 83       	std	Y+5, r24	; 0x05
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	af 83       	std	Y+7, r26	; 0x07
    118e:	b8 87       	std	Y+8, r27	; 0x08
	press_comp = 1048576.0 - (double)press_adc;
    1190:	6d 89       	ldd	r22, Y+21	; 0x15
    1192:	7e 89       	ldd	r23, Y+22	; 0x16
    1194:	8f 89       	ldd	r24, Y+23	; 0x17
    1196:	98 8d       	ldd	r25, Y+24	; 0x18
    1198:	0e 94 5f 12 	call	0x24be	; 0x24be <__floatunsisf>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	9c 01       	movw	r18, r24
    11a2:	ad 01       	movw	r20, r26
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	70 e0       	ldi	r23, 0x00	; 0
    11a8:	80 e8       	ldi	r24, 0x80	; 128
    11aa:	99 e4       	ldi	r25, 0x49	; 73
    11ac:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__subsf3>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	89 8b       	std	Y+17, r24	; 0x11
    11b6:	9a 8b       	std	Y+18, r25	; 0x12
    11b8:	ab 8b       	std	Y+19, r26	; 0x13
    11ba:	bc 8b       	std	Y+20, r27	; 0x14
	press_comp = ((press_comp - (var2 / 4096.0)) * 6250.0) / var1;
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e8       	ldi	r20, 0x80	; 128
    11c2:	55 e4       	ldi	r21, 0x45	; 69
    11c4:	69 85       	ldd	r22, Y+9	; 0x09
    11c6:	7a 85       	ldd	r23, Y+10	; 0x0a
    11c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    11cc:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9c 01       	movw	r18, r24
    11d6:	ad 01       	movw	r20, r26
    11d8:	69 89       	ldd	r22, Y+17	; 0x11
    11da:	7a 89       	ldd	r23, Y+18	; 0x12
    11dc:	8b 89       	ldd	r24, Y+19	; 0x13
    11de:	9c 89       	ldd	r25, Y+20	; 0x14
    11e0:	0e 94 5d 11 	call	0x22ba	; 0x22ba <__subsf3>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e5       	ldi	r19, 0x50	; 80
    11ec:	43 ec       	ldi	r20, 0xC3	; 195
    11ee:	55 e4       	ldi	r21, 0x45	; 69
    11f0:	bc 01       	movw	r22, r24
    11f2:	cd 01       	movw	r24, r26
    11f4:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	2d 81       	ldd	r18, Y+5	; 0x05
    11fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1200:	4f 81       	ldd	r20, Y+7	; 0x07
    1202:	58 85       	ldd	r21, Y+8	; 0x08
    1204:	bc 01       	movw	r22, r24
    1206:	cd 01       	movw	r24, r26
    1208:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	89 8b       	std	Y+17, r24	; 0x11
    1212:	9a 8b       	std	Y+18, r25	; 0x12
    1214:	ab 8b       	std	Y+19, r26	; 0x13
    1216:	bc 8b       	std	Y+20, r27	; 0x14
	var1 = ((double)par_p9 * press_comp) / 2147483648.0;
    1218:	8e a1       	ldd	r24, Y+38	; 0x26
    121a:	9f a1       	ldd	r25, Y+39	; 0x27
    121c:	09 2e       	mov	r0, r25
    121e:	00 0c       	add	r0, r0
    1220:	aa 0b       	sbc	r26, r26
    1222:	bb 0b       	sbc	r27, r27
    1224:	bc 01       	movw	r22, r24
    1226:	cd 01       	movw	r24, r26
    1228:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__floatsisf>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	29 89       	ldd	r18, Y+17	; 0x11
    1232:	3a 89       	ldd	r19, Y+18	; 0x12
    1234:	4b 89       	ldd	r20, Y+19	; 0x13
    1236:	5c 89       	ldd	r21, Y+20	; 0x14
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	5f e4       	ldi	r21, 0x4F	; 79
    124c:	bc 01       	movw	r22, r24
    124e:	cd 01       	movw	r24, r26
    1250:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	8d 83       	std	Y+5, r24	; 0x05
    125a:	9e 83       	std	Y+6, r25	; 0x06
    125c:	af 83       	std	Y+7, r26	; 0x07
    125e:	b8 87       	std	Y+8, r27	; 0x08
	var2 = press_comp * ((double)par_p8 / 32768);
    1260:	8c a1       	ldd	r24, Y+36	; 0x24
    1262:	9d a1       	ldd	r25, Y+37	; 0x25
    1264:	09 2e       	mov	r0, r25
    1266:	00 0c       	add	r0, r0
    1268:	aa 0b       	sbc	r26, r26
    126a:	bb 0b       	sbc	r27, r27
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__floatsisf>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	57 e4       	ldi	r21, 0x47	; 71
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	29 89       	ldd	r18, Y+17	; 0x11
    128e:	3a 89       	ldd	r19, Y+18	; 0x12
    1290:	4b 89       	ldd	r20, Y+19	; 0x13
    1292:	5c 89       	ldd	r21, Y+20	; 0x14
    1294:	bc 01       	movw	r22, r24
    1296:	cd 01       	movw	r24, r26
    1298:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	89 87       	std	Y+9, r24	; 0x09
    12a2:	9a 87       	std	Y+10, r25	; 0x0a
    12a4:	ab 87       	std	Y+11, r26	; 0x0b
    12a6:	bc 87       	std	Y+12, r27	; 0x0c
	var3 = (press_comp / 256.0) * (press_comp / 256.0) * (press_comp / 256.0) * (par_p10 / 131072.0);
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	40 e8       	ldi	r20, 0x80	; 128
    12ae:	53 e4       	ldi	r21, 0x43	; 67
    12b0:	69 89       	ldd	r22, Y+17	; 0x11
    12b2:	7a 89       	ldd	r23, Y+18	; 0x12
    12b4:	8b 89       	ldd	r24, Y+19	; 0x13
    12b6:	9c 89       	ldd	r25, Y+20	; 0x14
    12b8:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	6c 01       	movw	r12, r24
    12c2:	7d 01       	movw	r14, r26
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e8       	ldi	r20, 0x80	; 128
    12ca:	53 e4       	ldi	r21, 0x43	; 67
    12cc:	69 89       	ldd	r22, Y+17	; 0x11
    12ce:	7a 89       	ldd	r23, Y+18	; 0x12
    12d0:	8b 89       	ldd	r24, Y+19	; 0x13
    12d2:	9c 89       	ldd	r25, Y+20	; 0x14
    12d4:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	9c 01       	movw	r18, r24
    12de:	ad 01       	movw	r20, r26
    12e0:	c7 01       	movw	r24, r14
    12e2:	b6 01       	movw	r22, r12
    12e4:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	6c 01       	movw	r12, r24
    12ee:	7d 01       	movw	r14, r26
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	40 e8       	ldi	r20, 0x80	; 128
    12f6:	53 e4       	ldi	r21, 0x43	; 67
    12f8:	69 89       	ldd	r22, Y+17	; 0x11
    12fa:	7a 89       	ldd	r23, Y+18	; 0x12
    12fc:	8b 89       	ldd	r24, Y+19	; 0x13
    12fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1300:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	9c 01       	movw	r18, r24
    130a:	ad 01       	movw	r20, r26
    130c:	c7 01       	movw	r24, r14
    130e:	b6 01       	movw	r22, r12
    1310:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	6c 01       	movw	r12, r24
    131a:	7d 01       	movw	r14, r26
    131c:	88 a5       	ldd	r24, Y+40	; 0x28
    131e:	08 2e       	mov	r0, r24
    1320:	00 0c       	add	r0, r0
    1322:	99 0b       	sbc	r25, r25
    1324:	aa 0b       	sbc	r26, r26
    1326:	bb 0b       	sbc	r27, r27
    1328:	bc 01       	movw	r22, r24
    132a:	cd 01       	movw	r24, r26
    132c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__floatsisf>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	58 e4       	ldi	r21, 0x48	; 72
    133c:	bc 01       	movw	r22, r24
    133e:	cd 01       	movw	r24, r26
    1340:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	9c 01       	movw	r18, r24
    134a:	ad 01       	movw	r20, r26
    134c:	c7 01       	movw	r24, r14
    134e:	b6 01       	movw	r22, r12
    1350:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	8d 87       	std	Y+13, r24	; 0x0d
    135a:	9e 87       	std	Y+14, r25	; 0x0e
	press_comp = press_comp + (var1 + var2 + var3 + ((double)par_p7 * 128.0)) / 16.0;
    135c:	af 87       	std	Y+15, r26	; 0x0f
    135e:	b8 8b       	std	Y+16, r27	; 0x10
    1360:	29 85       	ldd	r18, Y+9	; 0x09
    1362:	3a 85       	ldd	r19, Y+10	; 0x0a
    1364:	4b 85       	ldd	r20, Y+11	; 0x0b
    1366:	5c 85       	ldd	r21, Y+12	; 0x0c
    1368:	6d 81       	ldd	r22, Y+5	; 0x05
    136a:	7e 81       	ldd	r23, Y+6	; 0x06
    136c:	8f 81       	ldd	r24, Y+7	; 0x07
    136e:	98 85       	ldd	r25, Y+8	; 0x08
    1370:	a5 d7       	rcall	.+3914   	; 0x22bc <__addsf3>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	2d 85       	ldd	r18, Y+13	; 0x0d
    1378:	3e 85       	ldd	r19, Y+14	; 0x0e
    137a:	4f 85       	ldd	r20, Y+15	; 0x0f
    137c:	58 89       	ldd	r21, Y+16	; 0x10
    137e:	bc 01       	movw	r22, r24
    1380:	cd 01       	movw	r24, r26
    1382:	9c d7       	rcall	.+3896   	; 0x22bc <__addsf3>
    1384:	dc 01       	movw	r26, r24
    1386:	cb 01       	movw	r24, r22
    1388:	6c 01       	movw	r12, r24
    138a:	7d 01       	movw	r14, r26
    138c:	8b a1       	ldd	r24, Y+35	; 0x23
    138e:	08 2e       	mov	r0, r24
    1390:	00 0c       	add	r0, r0
    1392:	99 0b       	sbc	r25, r25
    1394:	aa 0b       	sbc	r26, r26
    1396:	bb 0b       	sbc	r27, r27
    1398:	bc 01       	movw	r22, r24
    139a:	cd 01       	movw	r24, r26
    139c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__floatsisf>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	40 e0       	ldi	r20, 0x00	; 0
    13aa:	53 e4       	ldi	r21, 0x43	; 67
    13ac:	bc 01       	movw	r22, r24
    13ae:	cd 01       	movw	r24, r26
    13b0:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	9c 01       	movw	r18, r24
    13ba:	ad 01       	movw	r20, r26
    13bc:	c7 01       	movw	r24, r14
    13be:	b6 01       	movw	r22, r12
    13c0:	7d d7       	rcall	.+3834   	; 0x22bc <__addsf3>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e8       	ldi	r20, 0x80	; 128
    13cc:	51 e4       	ldi	r21, 0x41	; 65
    13ce:	bc 01       	movw	r22, r24
    13d0:	cd 01       	movw	r24, r26
    13d2:	dc d7       	rcall	.+4024   	; 0x238c <__divsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	9c 01       	movw	r18, r24
    13da:	ad 01       	movw	r20, r26
    13dc:	69 89       	ldd	r22, Y+17	; 0x11
    13de:	7a 89       	ldd	r23, Y+18	; 0x12
    13e0:	8b 89       	ldd	r24, Y+19	; 0x13
    13e2:	9c 89       	ldd	r25, Y+20	; 0x14
    13e4:	6b d7       	rcall	.+3798   	; 0x22bc <__addsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	89 8b       	std	Y+17, r24	; 0x11
    13ec:	9a 8b       	std	Y+18, r25	; 0x12
    13ee:	ab 8b       	std	Y+19, r26	; 0x13
    13f0:	bc 8b       	std	Y+20, r27	; 0x14
	
	return press_comp;
    13f2:	89 89       	ldd	r24, Y+17	; 0x11
    13f4:	9a 89       	ldd	r25, Y+18	; 0x12
    13f6:	ab 89       	ldd	r26, Y+19	; 0x13
    13f8:	bc 89       	ldd	r27, Y+20	; 0x14
}
    13fa:	bc 01       	movw	r22, r24
    13fc:	cd 01       	movw	r24, r26
    13fe:	a9 96       	adiw	r28, 0x29	; 41
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	df 91       	pop	r29
    140c:	cf 91       	pop	r28
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	df 90       	pop	r13
    1414:	cf 90       	pop	r12
    1416:	08 95       	ret

00001418 <READ_HUM>:

float READ_HUM ( void )
{
    1418:	8f 92       	push	r8
    141a:	9f 92       	push	r9
    141c:	af 92       	push	r10
    141e:	bf 92       	push	r11
    1420:	cf 92       	push	r12
    1422:	df 92       	push	r13
    1424:	ef 92       	push	r14
    1426:	ff 92       	push	r15
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	ae 97       	sbiw	r28, 0x2e	; 46
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
	double t_comp = READ_TEMP_F();
    143c:	b5 d9       	rcall	.-3222   	; 0x7a8 <READ_TEMP_F>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	9a 83       	std	Y+2, r25	; 0x02
    1446:	ab 83       	std	Y+3, r26	; 0x03
    1448:	bc 83       	std	Y+4, r27	; 0x04
	unsigned char cAdrWork = 0;
    144a:	1e a6       	std	Y+46, r1	; 0x2e
	double var1 = 0;
    144c:	1d 82       	std	Y+5, r1	; 0x05
    144e:	1e 82       	std	Y+6, r1	; 0x06
    1450:	1f 82       	std	Y+7, r1	; 0x07
    1452:	18 86       	std	Y+8, r1	; 0x08
	double var2 = 0;
    1454:	19 86       	std	Y+9, r1	; 0x09
    1456:	1a 86       	std	Y+10, r1	; 0x0a
    1458:	1b 86       	std	Y+11, r1	; 0x0b
    145a:	1c 86       	std	Y+12, r1	; 0x0c
	double var3 = 0;
    145c:	1d 86       	std	Y+13, r1	; 0x0d
    145e:	1e 86       	std	Y+14, r1	; 0x0e
    1460:	1f 86       	std	Y+15, r1	; 0x0f
    1462:	18 8a       	std	Y+16, r1	; 0x10
	double var4 = 0;
    1464:	19 8a       	std	Y+17, r1	; 0x11
    1466:	1a 8a       	std	Y+18, r1	; 0x12
    1468:	1b 8a       	std	Y+19, r1	; 0x13
    146a:	1c 8a       	std	Y+20, r1	; 0x14
	double var5 = 0;
    146c:	1d 8a       	std	Y+21, r1	; 0x15
    146e:	1e 8a       	std	Y+22, r1	; 0x16
    1470:	1f 8a       	std	Y+23, r1	; 0x17
    1472:	18 8e       	std	Y+24, r1	; 0x18
	double var6 = 0;
    1474:	19 8e       	std	Y+25, r1	; 0x19
    1476:	1a 8e       	std	Y+26, r1	; 0x1a
    1478:	1b 8e       	std	Y+27, r1	; 0x1b
    147a:	1c 8e       	std	Y+28, r1	; 0x1c
	double hum_comp = 0;
    147c:	1d 8e       	std	Y+29, r1	; 0x1d
    147e:	1e 8e       	std	Y+30, r1	; 0x1e
    1480:	1f 8e       	std	Y+31, r1	; 0x1f
    1482:	18 a2       	std	Y+32, r1	; 0x20
	uint32_t hum_adc = 0;
    1484:	19 a2       	std	Y+33, r1	; 0x21
    1486:	1a a2       	std	Y+34, r1	; 0x22
    1488:	1b a2       	std	Y+35, r1	; 0x23
    148a:	1c a2       	std	Y+36, r1	; 0x24
	uint16_t par_h1  = 0;
    148c:	1e a2       	std	Y+38, r1	; 0x26
    148e:	1d a2       	std	Y+37, r1	; 0x25
	uint16_t par_h2  = 0;
    1490:	18 a6       	std	Y+40, r1	; 0x28
    1492:	1f a2       	std	Y+39, r1	; 0x27
	int8_t par_h3  = 0;
    1494:	19 a6       	std	Y+41, r1	; 0x29
	int8_t par_h4  = 0;
    1496:	1a a6       	std	Y+42, r1	; 0x2a
	int8_t par_h5  = 0;
    1498:	1b a6       	std	Y+43, r1	; 0x2b
	int8_t par_h6  = 0;
    149a:	1c a6       	std	Y+44, r1	; 0x2c
	int8_t par_h7  = 0;
    149c:	1d a6       	std	Y+45, r1	; 0x2d
	
	cAdrWork = REG_HUM_MSB;
    149e:	85 e2       	ldi	r24, 0x25	; 37
    14a0:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    14a2:	ce 01       	movw	r24, r28
    14a4:	8e 96       	adiw	r24, 0x2e	; 46
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	41 e0       	ldi	r20, 0x01	; 1
    14ac:	50 e0       	ldi	r21, 0x00	; 0
    14ae:	bc 01       	movw	r22, r24
    14b0:	86 e7       	ldi	r24, 0x76	; 118
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	23 d8       	rcall	.-4026   	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    14b6:	42 e0       	ldi	r20, 0x02	; 2
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	60 e2       	ldi	r22, 0x20	; 32
    14bc:	72 e0       	ldi	r23, 0x02	; 2
    14be:	86 e7       	ldi	r24, 0x76	; 118
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	71 d8       	rcall	.-3870   	; 0x5a6 <twi_master_receive>
	hum_adc = (0xFF00 & (cRecieve[0] << 8)) | (0x00FF & (cRecieve[1]));
    14c4:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    14c8:	88 2f       	mov	r24, r24
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	98 2f       	mov	r25, r24
    14ce:	88 27       	eor	r24, r24
    14d0:	9c 01       	movw	r18, r24
    14d2:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    14d6:	88 2f       	mov	r24, r24
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	82 2b       	or	r24, r18
    14dc:	93 2b       	or	r25, r19
    14de:	cc 01       	movw	r24, r24
    14e0:	a0 e0       	ldi	r26, 0x00	; 0
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	89 a3       	std	Y+33, r24	; 0x21
    14e6:	9a a3       	std	Y+34, r25	; 0x22
    14e8:	ab a3       	std	Y+35, r26	; 0x23
    14ea:	bc a3       	std	Y+36, r27	; 0x24
	
	
	cAdrWork = 0xE2;
    14ec:	82 ee       	ldi	r24, 0xE2	; 226
    14ee:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    14f0:	ce 01       	movw	r24, r28
    14f2:	8e 96       	adiw	r24, 0x2e	; 46
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	41 e0       	ldi	r20, 0x01	; 1
    14fa:	50 e0       	ldi	r21, 0x00	; 0
    14fc:	bc 01       	movw	r22, r24
    14fe:	86 e7       	ldi	r24, 0x76	; 118
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 7e 02 	call	0x4fc	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    1506:	42 e0       	ldi	r20, 0x02	; 2
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	60 e2       	ldi	r22, 0x20	; 32
    150c:	72 e0       	ldi	r23, 0x02	; 2
    150e:	86 e7       	ldi	r24, 0x76	; 118
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	49 d8       	rcall	.-3950   	; 0x5a6 <twi_master_receive>
	par_h1 = (0x0FF0 & (cRecieve[1] << 4)) | (0x000F & (cRecieve[0]));
    1514:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1518:	88 2f       	mov	r24, r24
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	82 95       	swap	r24
    151e:	92 95       	swap	r25
    1520:	90 7f       	andi	r25, 0xF0	; 240
    1522:	98 27       	eor	r25, r24
    1524:	80 7f       	andi	r24, 0xF0	; 240
    1526:	98 27       	eor	r25, r24
    1528:	9c 01       	movw	r18, r24
    152a:	20 7f       	andi	r18, 0xF0	; 240
    152c:	3f 70       	andi	r19, 0x0F	; 15
    152e:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    1532:	88 2f       	mov	r24, r24
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	8f 70       	andi	r24, 0x0F	; 15
    1538:	99 27       	eor	r25, r25
    153a:	82 2b       	or	r24, r18
    153c:	93 2b       	or	r25, r19
    153e:	9e a3       	std	Y+38, r25	; 0x26
    1540:	8d a3       	std	Y+37, r24	; 0x25
	
	cAdrWork = 0xE1;
    1542:	81 ee       	ldi	r24, 0xE1	; 225
    1544:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1546:	ce 01       	movw	r24, r28
    1548:	8e 96       	adiw	r24, 0x2e	; 46
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	41 e0       	ldi	r20, 0x01	; 1
    1550:	50 e0       	ldi	r21, 0x00	; 0
    1552:	bc 01       	movw	r22, r24
    1554:	86 e7       	ldi	r24, 0x76	; 118
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	0e 94 7e 02 	call	0x4fc	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 2);
    155c:	42 e0       	ldi	r20, 0x02	; 2
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	60 e2       	ldi	r22, 0x20	; 32
    1562:	72 e0       	ldi	r23, 0x02	; 2
    1564:	86 e7       	ldi	r24, 0x76	; 118
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	1e d8       	rcall	.-4036   	; 0x5a6 <twi_master_receive>
	par_h2 = (0x0FF0 & (cRecieve[0] << 4)) | (0x000F & ((cRecieve[1] & 0xF0) >> 4));
    156a:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	82 95       	swap	r24
    1574:	92 95       	swap	r25
    1576:	90 7f       	andi	r25, 0xF0	; 240
    1578:	98 27       	eor	r25, r24
    157a:	80 7f       	andi	r24, 0xF0	; 240
    157c:	98 27       	eor	r25, r24
    157e:	9c 01       	movw	r18, r24
    1580:	20 7f       	andi	r18, 0xF0	; 240
    1582:	3f 70       	andi	r19, 0x0F	; 15
    1584:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <__data_end+0x1>
    1588:	82 95       	swap	r24
    158a:	8f 70       	andi	r24, 0x0F	; 15
    158c:	88 2f       	mov	r24, r24
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	8f 70       	andi	r24, 0x0F	; 15
    1592:	99 27       	eor	r25, r25
    1594:	82 2b       	or	r24, r18
    1596:	93 2b       	or	r25, r19
    1598:	98 a7       	std	Y+40, r25	; 0x28
    159a:	8f a3       	std	Y+39, r24	; 0x27
	
	cAdrWork = 0xE4;
    159c:	84 ee       	ldi	r24, 0xE4	; 228
    159e:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    15a0:	ce 01       	movw	r24, r28
    15a2:	8e 96       	adiw	r24, 0x2e	; 46
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	41 e0       	ldi	r20, 0x01	; 1
    15aa:	50 e0       	ldi	r21, 0x00	; 0
    15ac:	bc 01       	movw	r22, r24
    15ae:	86 e7       	ldi	r24, 0x76	; 118
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    15b6:	41 e0       	ldi	r20, 0x01	; 1
    15b8:	50 e0       	ldi	r21, 0x00	; 0
    15ba:	60 e2       	ldi	r22, 0x20	; 32
    15bc:	72 e0       	ldi	r23, 0x02	; 2
    15be:	86 e7       	ldi	r24, 0x76	; 118
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <twi_master_receive>
	par_h3 = cRecieve[0];
    15c6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    15ca:	89 a7       	std	Y+41, r24	; 0x29
	
	cAdrWork = 0xE5;
    15cc:	85 ee       	ldi	r24, 0xE5	; 229
    15ce:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    15d0:	ce 01       	movw	r24, r28
    15d2:	8e 96       	adiw	r24, 0x2e	; 46
    15d4:	20 e0       	ldi	r18, 0x00	; 0
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    15da:	50 e0       	ldi	r21, 0x00	; 0
    15dc:	bc 01       	movw	r22, r24
    15de:	86 e7       	ldi	r24, 0x76	; 118
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    15e6:	41 e0       	ldi	r20, 0x01	; 1
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	60 e2       	ldi	r22, 0x20	; 32
    15ec:	72 e0       	ldi	r23, 0x02	; 2
    15ee:	86 e7       	ldi	r24, 0x76	; 118
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <twi_master_receive>
	par_h4 = cRecieve[0];
    15f6:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    15fa:	8a a7       	std	Y+42, r24	; 0x2a
	
	cAdrWork = 0xE6;
    15fc:	86 ee       	ldi	r24, 0xE6	; 230
    15fe:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1600:	ce 01       	movw	r24, r28
    1602:	8e 96       	adiw	r24, 0x2e	; 46
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	41 e0       	ldi	r20, 0x01	; 1
    160a:	50 e0       	ldi	r21, 0x00	; 0
    160c:	bc 01       	movw	r22, r24
    160e:	86 e7       	ldi	r24, 0x76	; 118
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 7e 02 	call	0x4fc	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    1616:	41 e0       	ldi	r20, 0x01	; 1
    1618:	50 e0       	ldi	r21, 0x00	; 0
    161a:	60 e2       	ldi	r22, 0x20	; 32
    161c:	72 e0       	ldi	r23, 0x02	; 2
    161e:	86 e7       	ldi	r24, 0x76	; 118
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <twi_master_receive>
	par_h5 = cRecieve[0];
    1626:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    162a:	8b a7       	std	Y+43, r24	; 0x2b
	
	cAdrWork = 0xE7;
    162c:	87 ee       	ldi	r24, 0xE7	; 231
    162e:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1630:	ce 01       	movw	r24, r28
    1632:	8e 96       	adiw	r24, 0x2e	; 46
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	41 e0       	ldi	r20, 0x01	; 1
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	bc 01       	movw	r22, r24
    163e:	86 e7       	ldi	r24, 0x76	; 118
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0e 94 7e 02 	call	0x4fc	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    1646:	41 e0       	ldi	r20, 0x01	; 1
    1648:	50 e0       	ldi	r21, 0x00	; 0
    164a:	60 e2       	ldi	r22, 0x20	; 32
    164c:	72 e0       	ldi	r23, 0x02	; 2
    164e:	86 e7       	ldi	r24, 0x76	; 118
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <twi_master_receive>
	par_h6 = cRecieve[0];
    1656:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    165a:	8c a7       	std	Y+44, r24	; 0x2c
	
	cAdrWork = 0xE4;
    165c:	84 ee       	ldi	r24, 0xE4	; 228
    165e:	8e a7       	std	Y+46, r24	; 0x2e
	twi_master_transmit(SLAVE_ADR_LOW, &cAdrWork, 1, 0);
    1660:	ce 01       	movw	r24, r28
    1662:	8e 96       	adiw	r24, 0x2e	; 46
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	41 e0       	ldi	r20, 0x01	; 1
    166a:	50 e0       	ldi	r21, 0x00	; 0
    166c:	bc 01       	movw	r22, r24
    166e:	86 e7       	ldi	r24, 0x76	; 118
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	0e 94 7e 02 	call	0x4fc	; 0x4fc <twi_master_transmit>
	twi_master_receive(SLAVE_ADR_LOW, cRecieve, 1);
    1676:	41 e0       	ldi	r20, 0x01	; 1
    1678:	50 e0       	ldi	r21, 0x00	; 0
    167a:	60 e2       	ldi	r22, 0x20	; 32
    167c:	72 e0       	ldi	r23, 0x02	; 2
    167e:	86 e7       	ldi	r24, 0x76	; 118
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <twi_master_receive>
	par_h7 = cRecieve[0];
    1686:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <__data_end>
    168a:	8d a7       	std	Y+45, r24	; 0x2d
	
	var1 = hum_adc - (((double)par_h1 * 16.0) + (((double)par_h3 / 2.0) * t_comp));
    168c:	69 a1       	ldd	r22, Y+33	; 0x21
    168e:	7a a1       	ldd	r23, Y+34	; 0x22
    1690:	8b a1       	ldd	r24, Y+35	; 0x23
    1692:	9c a1       	ldd	r25, Y+36	; 0x24
    1694:	14 d7       	rcall	.+3624   	; 0x24be <__floatunsisf>
    1696:	6b 01       	movw	r12, r22
    1698:	7c 01       	movw	r14, r24
    169a:	8d a1       	ldd	r24, Y+37	; 0x25
    169c:	9e a1       	ldd	r25, Y+38	; 0x26
    169e:	cc 01       	movw	r24, r24
    16a0:	a0 e0       	ldi	r26, 0x00	; 0
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	bc 01       	movw	r22, r24
    16a6:	cd 01       	movw	r24, r26
    16a8:	0a d7       	rcall	.+3604   	; 0x24be <__floatunsisf>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e8       	ldi	r20, 0x80	; 128
    16b4:	51 e4       	ldi	r21, 0x41	; 65
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	b7 d7       	rcall	.+3950   	; 0x262a <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	4c 01       	movw	r8, r24
    16c2:	5d 01       	movw	r10, r26
    16c4:	89 a5       	ldd	r24, Y+41	; 0x29
    16c6:	08 2e       	mov	r0, r24
    16c8:	00 0c       	add	r0, r0
    16ca:	99 0b       	sbc	r25, r25
    16cc:	aa 0b       	sbc	r26, r26
    16ce:	bb 0b       	sbc	r27, r27
    16d0:	bc 01       	movw	r22, r24
    16d2:	cd 01       	movw	r24, r26
    16d4:	f6 d6       	rcall	.+3564   	; 0x24c2 <__floatsisf>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	50 e4       	ldi	r21, 0x40	; 64
    16e2:	bc 01       	movw	r22, r24
    16e4:	cd 01       	movw	r24, r26
    16e6:	52 d6       	rcall	.+3236   	; 0x238c <__divsf3>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	29 81       	ldd	r18, Y+1	; 0x01
    16ee:	3a 81       	ldd	r19, Y+2	; 0x02
    16f0:	4b 81       	ldd	r20, Y+3	; 0x03
    16f2:	5c 81       	ldd	r21, Y+4	; 0x04
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	98 d7       	rcall	.+3888   	; 0x262a <__mulsf3>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9c 01       	movw	r18, r24
    1700:	ad 01       	movw	r20, r26
    1702:	c5 01       	movw	r24, r10
    1704:	b4 01       	movw	r22, r8
    1706:	da d5       	rcall	.+2996   	; 0x22bc <__addsf3>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	9c 01       	movw	r18, r24
    170e:	ad 01       	movw	r20, r26
    1710:	c7 01       	movw	r24, r14
    1712:	b6 01       	movw	r22, r12
    1714:	d2 d5       	rcall	.+2980   	; 0x22ba <__subsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	8d 83       	std	Y+5, r24	; 0x05
    171c:	9e 83       	std	Y+6, r25	; 0x06
    171e:	af 83       	std	Y+7, r26	; 0x07
    1720:	b8 87       	std	Y+8, r27	; 0x08
	var2 = var1 * (((double)par_h2 / 262144.0) * (1.0 + (((double)par_h4 / 16384.0) * t_comp) + (((double)par_h5 / 1048576.0) * t_comp * t_comp)));
    1722:	8f a1       	ldd	r24, Y+39	; 0x27
    1724:	98 a5       	ldd	r25, Y+40	; 0x28
    1726:	cc 01       	movw	r24, r24
    1728:	a0 e0       	ldi	r26, 0x00	; 0
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	bc 01       	movw	r22, r24
    172e:	cd 01       	movw	r24, r26
    1730:	c6 d6       	rcall	.+3468   	; 0x24be <__floatunsisf>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e8       	ldi	r20, 0x80	; 128
    173c:	58 e4       	ldi	r21, 0x48	; 72
    173e:	bc 01       	movw	r22, r24
    1740:	cd 01       	movw	r24, r26
    1742:	24 d6       	rcall	.+3144   	; 0x238c <__divsf3>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	6c 01       	movw	r12, r24
    174a:	7d 01       	movw	r14, r26
    174c:	8a a5       	ldd	r24, Y+42	; 0x2a
    174e:	08 2e       	mov	r0, r24
    1750:	00 0c       	add	r0, r0
    1752:	99 0b       	sbc	r25, r25
    1754:	aa 0b       	sbc	r26, r26
    1756:	bb 0b       	sbc	r27, r27
    1758:	bc 01       	movw	r22, r24
    175a:	cd 01       	movw	r24, r26
    175c:	b2 d6       	rcall	.+3428   	; 0x24c2 <__floatsisf>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e8       	ldi	r20, 0x80	; 128
    1768:	56 e4       	ldi	r21, 0x46	; 70
    176a:	bc 01       	movw	r22, r24
    176c:	cd 01       	movw	r24, r26
    176e:	0e d6       	rcall	.+3100   	; 0x238c <__divsf3>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	29 81       	ldd	r18, Y+1	; 0x01
    1776:	3a 81       	ldd	r19, Y+2	; 0x02
    1778:	4b 81       	ldd	r20, Y+3	; 0x03
    177a:	5c 81       	ldd	r21, Y+4	; 0x04
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	54 d7       	rcall	.+3752   	; 0x262a <__mulsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e8       	ldi	r20, 0x80	; 128
    178c:	5f e3       	ldi	r21, 0x3F	; 63
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	94 d5       	rcall	.+2856   	; 0x22bc <__addsf3>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	4c 01       	movw	r8, r24
    179a:	5d 01       	movw	r10, r26
    179c:	8b a5       	ldd	r24, Y+43	; 0x2b
    179e:	08 2e       	mov	r0, r24
    17a0:	00 0c       	add	r0, r0
    17a2:	99 0b       	sbc	r25, r25
    17a4:	aa 0b       	sbc	r26, r26
    17a6:	bb 0b       	sbc	r27, r27
    17a8:	bc 01       	movw	r22, r24
    17aa:	cd 01       	movw	r24, r26
    17ac:	8a d6       	rcall	.+3348   	; 0x24c2 <__floatsisf>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e8       	ldi	r20, 0x80	; 128
    17b8:	59 e4       	ldi	r21, 0x49	; 73
    17ba:	bc 01       	movw	r22, r24
    17bc:	cd 01       	movw	r24, r26
    17be:	e6 d5       	rcall	.+3020   	; 0x238c <__divsf3>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	29 81       	ldd	r18, Y+1	; 0x01
    17c6:	3a 81       	ldd	r19, Y+2	; 0x02
    17c8:	4b 81       	ldd	r20, Y+3	; 0x03
    17ca:	5c 81       	ldd	r21, Y+4	; 0x04
    17cc:	bc 01       	movw	r22, r24
    17ce:	cd 01       	movw	r24, r26
    17d0:	2c d7       	rcall	.+3672   	; 0x262a <__mulsf3>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	29 81       	ldd	r18, Y+1	; 0x01
    17d8:	3a 81       	ldd	r19, Y+2	; 0x02
    17da:	4b 81       	ldd	r20, Y+3	; 0x03
    17dc:	5c 81       	ldd	r21, Y+4	; 0x04
    17de:	bc 01       	movw	r22, r24
    17e0:	cd 01       	movw	r24, r26
    17e2:	23 d7       	rcall	.+3654   	; 0x262a <__mulsf3>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	9c 01       	movw	r18, r24
    17ea:	ad 01       	movw	r20, r26
    17ec:	c5 01       	movw	r24, r10
    17ee:	b4 01       	movw	r22, r8
    17f0:	65 d5       	rcall	.+2762   	; 0x22bc <__addsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9c 01       	movw	r18, r24
    17f8:	ad 01       	movw	r20, r26
    17fa:	c7 01       	movw	r24, r14
    17fc:	b6 01       	movw	r22, r12
    17fe:	15 d7       	rcall	.+3626   	; 0x262a <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	2d 81       	ldd	r18, Y+5	; 0x05
    1806:	3e 81       	ldd	r19, Y+6	; 0x06
    1808:	4f 81       	ldd	r20, Y+7	; 0x07
    180a:	58 85       	ldd	r21, Y+8	; 0x08
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0c d7       	rcall	.+3608   	; 0x262a <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	89 87       	std	Y+9, r24	; 0x09
    1818:	9a 87       	std	Y+10, r25	; 0x0a
    181a:	ab 87       	std	Y+11, r26	; 0x0b
    181c:	bc 87       	std	Y+12, r27	; 0x0c
	var3 = (double)par_h6 / 16384.0;
    181e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1820:	08 2e       	mov	r0, r24
    1822:	00 0c       	add	r0, r0
    1824:	99 0b       	sbc	r25, r25
    1826:	aa 0b       	sbc	r26, r26
    1828:	bb 0b       	sbc	r27, r27
    182a:	bc 01       	movw	r22, r24
    182c:	cd 01       	movw	r24, r26
    182e:	49 d6       	rcall	.+3218   	; 0x24c2 <__floatsisf>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e8       	ldi	r20, 0x80	; 128
    183a:	56 e4       	ldi	r21, 0x46	; 70
    183c:	bc 01       	movw	r22, r24
    183e:	cd 01       	movw	r24, r26
    1840:	a5 d5       	rcall	.+2890   	; 0x238c <__divsf3>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	8d 87       	std	Y+13, r24	; 0x0d
    1848:	9e 87       	std	Y+14, r25	; 0x0e
    184a:	af 87       	std	Y+15, r26	; 0x0f
    184c:	b8 8b       	std	Y+16, r27	; 0x10

	var4 = (double)par_h7 / 2097152.0;
    184e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1850:	08 2e       	mov	r0, r24
    1852:	00 0c       	add	r0, r0
    1854:	99 0b       	sbc	r25, r25
    1856:	aa 0b       	sbc	r26, r26
    1858:	bb 0b       	sbc	r27, r27
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	31 d6       	rcall	.+3170   	; 0x24c2 <__floatsisf>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	5a e4       	ldi	r21, 0x4A	; 74
    186c:	bc 01       	movw	r22, r24
    186e:	cd 01       	movw	r24, r26
    1870:	8d d5       	rcall	.+2842   	; 0x238c <__divsf3>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	89 8b       	std	Y+17, r24	; 0x11
    1878:	9a 8b       	std	Y+18, r25	; 0x12
    187a:	ab 8b       	std	Y+19, r26	; 0x13
    187c:	bc 8b       	std	Y+20, r27	; 0x14
	hum_comp = var2 +((var3 + (var4 * t_comp)) * var2 * var2);
    187e:	29 81       	ldd	r18, Y+1	; 0x01
    1880:	3a 81       	ldd	r19, Y+2	; 0x02
    1882:	4b 81       	ldd	r20, Y+3	; 0x03
    1884:	5c 81       	ldd	r21, Y+4	; 0x04
    1886:	69 89       	ldd	r22, Y+17	; 0x11
    1888:	7a 89       	ldd	r23, Y+18	; 0x12
    188a:	8b 89       	ldd	r24, Y+19	; 0x13
    188c:	9c 89       	ldd	r25, Y+20	; 0x14
    188e:	cd d6       	rcall	.+3482   	; 0x262a <__mulsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	2d 85       	ldd	r18, Y+13	; 0x0d
    1896:	3e 85       	ldd	r19, Y+14	; 0x0e
    1898:	4f 85       	ldd	r20, Y+15	; 0x0f
    189a:	58 89       	ldd	r21, Y+16	; 0x10
    189c:	bc 01       	movw	r22, r24
    189e:	cd 01       	movw	r24, r26
    18a0:	0d d5       	rcall	.+2586   	; 0x22bc <__addsf3>
    18a2:	dc 01       	movw	r26, r24
    18a4:	cb 01       	movw	r24, r22
    18a6:	29 85       	ldd	r18, Y+9	; 0x09
    18a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    18aa:	4b 85       	ldd	r20, Y+11	; 0x0b
    18ac:	5c 85       	ldd	r21, Y+12	; 0x0c
    18ae:	bc 01       	movw	r22, r24
    18b0:	cd 01       	movw	r24, r26
    18b2:	bb d6       	rcall	.+3446   	; 0x262a <__mulsf3>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	29 85       	ldd	r18, Y+9	; 0x09
    18ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    18bc:	4b 85       	ldd	r20, Y+11	; 0x0b
    18be:	5c 85       	ldd	r21, Y+12	; 0x0c
    18c0:	bc 01       	movw	r22, r24
    18c2:	cd 01       	movw	r24, r26
    18c4:	b2 d6       	rcall	.+3428   	; 0x262a <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	29 85       	ldd	r18, Y+9	; 0x09
    18cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    18ce:	4b 85       	ldd	r20, Y+11	; 0x0b
    18d0:	5c 85       	ldd	r21, Y+12	; 0x0c
    18d2:	bc 01       	movw	r22, r24
    18d4:	cd 01       	movw	r24, r26
    18d6:	f2 d4       	rcall	.+2532   	; 0x22bc <__addsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	8d 8f       	std	Y+29, r24	; 0x1d
    18de:	9e 8f       	std	Y+30, r25	; 0x1e
    18e0:	af 8f       	std	Y+31, r26	; 0x1f
    18e2:	b8 a3       	std	Y+32, r27	; 0x20
    18e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
	
	
	return hum_comp;
    18e8:	af 8d       	ldd	r26, Y+31	; 0x1f
    18ea:	b8 a1       	ldd	r27, Y+32	; 0x20
    18ec:	bc 01       	movw	r22, r24
    18ee:	cd 01       	movw	r24, r26
}
    18f0:	ae 96       	adiw	r28, 0x2e	; 46
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	df 91       	pop	r29
    18fe:	cf 91       	pop	r28
    1900:	ff 90       	pop	r15
    1902:	ef 90       	pop	r14
    1904:	df 90       	pop	r13
    1906:	cf 90       	pop	r12
    1908:	bf 90       	pop	r11
    190a:	af 90       	pop	r10
    190c:	9f 90       	pop	r9
    190e:	8f 90       	pop	r8
    1910:	08 95       	ret

00001912 <main>:
    1912:	cf 92       	push	r12
    1914:	df 92       	push	r13
#include "Header.h"
#include <util/delay.h>


int main(void)
{
    1916:	ef 92       	push	r14
    1918:	ff 92       	push	r15
    191a:	cf 93       	push	r28
    191c:	df 93       	push	r29
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62
    1922:	c5 55       	subi	r28, 0x55	; 85
    1924:	d1 09       	sbc	r29, r1
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
	char cRET = 0;
    1930:	1d 8a       	std	Y+21, r1	; 0x15
	cRET = INIT();
    1932:	a5 d4       	rcall	.+2378   	; 0x227e <INIT>
    1934:	8d 8b       	std	Y+21, r24	; 0x15
	float TEMP;
	float PRESS;
	float HUM;
	float GAS;
	char Ziffern[10];
	char TEMPRATURE[] = {'T','E','M','P','R','A','T','U','R','E',':',' '};
    1936:	8c e0       	ldi	r24, 0x0C	; 12
    1938:	e0 e0       	ldi	r30, 0x00	; 0
    193a:	f2 e0       	ldi	r31, 0x02	; 2
    193c:	de 01       	movw	r26, r28
    193e:	d6 96       	adiw	r26, 0x36	; 54
    1940:	01 90       	ld	r0, Z+
    1942:	0d 92       	st	X+, r0
    1944:	8a 95       	dec	r24
    1946:	e1 f7       	brne	.-8      	; 0x1940 <main+0x2e>
	char PRESSURE[] =	{'P','R','E','S','S','U','R','E',':',' '};
    1948:	ce 01       	movw	r24, r28
    194a:	8e 5b       	subi	r24, 0xBE	; 190
    194c:	9f 4f       	sbci	r25, 0xFF	; 255
    194e:	2a e0       	ldi	r18, 0x0A	; 10
    1950:	ec e0       	ldi	r30, 0x0C	; 12
    1952:	f2 e0       	ldi	r31, 0x02	; 2
    1954:	dc 01       	movw	r26, r24
    1956:	01 90       	ld	r0, Z+
    1958:	0d 92       	st	X+, r0
    195a:	2a 95       	dec	r18
    195c:	e1 f7       	brne	.-8      	; 0x1956 <main+0x44>
	char HUMIDITY[] =	{'H','U','M','I','D','I','T','Y',':',' '};
    195e:	ce 01       	movw	r24, r28
    1960:	84 5b       	subi	r24, 0xB4	; 180
    1962:	9f 4f       	sbci	r25, 0xFF	; 255
    1964:	2a e0       	ldi	r18, 0x0A	; 10
    1966:	e6 e1       	ldi	r30, 0x16	; 22
    1968:	f2 e0       	ldi	r31, 0x02	; 2
    196a:	dc 01       	movw	r26, r24
    196c:	01 90       	ld	r0, Z+
    196e:	0d 92       	st	X+, r0
    1970:	2a 95       	dec	r18
    1972:	e1 f7       	brne	.-8      	; 0x196c <main+0x5a>
	
    /* Replace with your application code */
    while (1) 
    {
		
		START_CONVERSION();
    1974:	0e 94 ab 03 	call	0x756	; 0x756 <START_CONVERSION>
		TEMP = READ_TEMP_F();
    1978:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <READ_TEMP_F>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	9a 83       	std	Y+2, r25	; 0x02
    1984:	ab 83       	std	Y+3, r26	; 0x03
		PRESS = READ_PRESS();
    1986:	bc 83       	std	Y+4, r27	; 0x04
    1988:	0f d9       	rcall	.-3554   	; 0xba8 <READ_PRESS>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	8e 8b       	std	Y+22, r24	; 0x16
    1990:	9f 8b       	std	Y+23, r25	; 0x17
    1992:	a8 8f       	std	Y+24, r26	; 0x18
		HUM = READ_HUM ();
    1994:	b9 8f       	std	Y+25, r27	; 0x19
    1996:	40 dd       	rcall	.-1408   	; 0x1418 <READ_HUM>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8a 8f       	std	Y+26, r24	; 0x1a
    199e:	9b 8f       	std	Y+27, r25	; 0x1b
    19a0:	ac 8f       	std	Y+28, r26	; 0x1c
    19a2:	bd 8f       	std	Y+29, r27	; 0x1d
		//GAS = READ_GAS();
		
		for(int i = 0; i < 12; i++)
    19a4:	1e 82       	std	Y+6, r1	; 0x06
    19a6:	1d 82       	std	Y+5, r1	; 0x05
    19a8:	10 c0       	rjmp	.+32     	; 0x19ca <main+0xb8>
		{
			USART0SendByte(TEMPRATURE[i]);
    19aa:	9e 01       	movw	r18, r28
    19ac:	2a 5c       	subi	r18, 0xCA	; 202
    19ae:	3f 4f       	sbci	r19, 0xFF	; 255
    19b0:	8d 81       	ldd	r24, Y+5	; 0x05
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	82 0f       	add	r24, r18
    19b6:	93 1f       	adc	r25, r19
    19b8:	fc 01       	movw	r30, r24
    19ba:	80 81       	ld	r24, Z
    19bc:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
		TEMP = READ_TEMP_F();
		PRESS = READ_PRESS();
		HUM = READ_HUM ();
		//GAS = READ_GAS();
		
		for(int i = 0; i < 12; i++)
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
    19c2:	9e 81       	ldd	r25, Y+6	; 0x06
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	9e 83       	std	Y+6, r25	; 0x06
    19c8:	8d 83       	std	Y+5, r24	; 0x05
    19ca:	8d 81       	ldd	r24, Y+5	; 0x05
    19cc:	9e 81       	ldd	r25, Y+6	; 0x06
    19ce:	0c 97       	sbiw	r24, 0x0c	; 12
    19d0:	64 f3       	brlt	.-40     	; 0x19aa <main+0x98>
		{
			USART0SendByte(TEMPRATURE[i]);
		}	
		
		if (TEMP < 0)
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	a9 01       	movw	r20, r18
    19d8:	69 81       	ldd	r22, Y+1	; 0x01
    19da:	7a 81       	ldd	r23, Y+2	; 0x02
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	d1 d4       	rcall	.+2466   	; 0x2384 <__cmpsf2>
    19e2:	88 23       	and	r24, r24
    19e4:	64 f4       	brge	.+24     	; 0x19fe <main+0xec>
		{
			USART0SendByte('-');
    19e6:	8d e2       	ldi	r24, 0x2D	; 45
    19e8:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
			TEMP = TEMP * -1.0;
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	ab 81       	ldd	r26, Y+3	; 0x03
    19f2:	bc 81       	ldd	r27, Y+4	; 0x04
    19f4:	b0 58       	subi	r27, 0x80	; 128
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	9a 83       	std	Y+2, r25	; 0x02
    19fa:	ab 83       	std	Y+3, r26	; 0x03
    19fc:	bc 83       	std	Y+4, r27	; 0x04
		}
		
		
		
		Ziffern[0] = TEMP / 10;
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e2       	ldi	r20, 0x20	; 32
    1a04:	51 e4       	ldi	r21, 0x41	; 65
    1a06:	69 81       	ldd	r22, Y+1	; 0x01
    1a08:	7a 81       	ldd	r23, Y+2	; 0x02
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	be d4       	rcall	.+2428   	; 0x238c <__divsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	bc 01       	movw	r22, r24
    1a16:	cd 01       	movw	r24, r26
    1a18:	26 d5       	rcall	.+2636   	; 0x2466 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	8c a7       	std	Y+44, r24	; 0x2c
		Ziffern[1] = TEMP  - Ziffern[0] * 10;
    1a20:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a22:	88 2f       	mov	r24, r24
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	88 0f       	add	r24, r24
    1a28:	99 1f       	adc	r25, r25
    1a2a:	9c 01       	movw	r18, r24
    1a2c:	22 0f       	add	r18, r18
    1a2e:	33 1f       	adc	r19, r19
    1a30:	22 0f       	add	r18, r18
    1a32:	33 1f       	adc	r19, r19
    1a34:	82 0f       	add	r24, r18
    1a36:	93 1f       	adc	r25, r19
    1a38:	09 2e       	mov	r0, r25
    1a3a:	00 0c       	add	r0, r0
    1a3c:	aa 0b       	sbc	r26, r26
    1a3e:	bb 0b       	sbc	r27, r27
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	3e d5       	rcall	.+2684   	; 0x24c2 <__floatsisf>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9c 01       	movw	r18, r24
    1a4c:	ad 01       	movw	r20, r26
    1a4e:	69 81       	ldd	r22, Y+1	; 0x01
    1a50:	7a 81       	ldd	r23, Y+2	; 0x02
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9c 81       	ldd	r25, Y+4	; 0x04
    1a56:	31 d4       	rcall	.+2146   	; 0x22ba <__subsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	bc 01       	movw	r22, r24
    1a5e:	cd 01       	movw	r24, r26
    1a60:	02 d5       	rcall	.+2564   	; 0x2466 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	8d a7       	std	Y+45, r24	; 0x2d
		Ziffern[2] = (TEMP - Ziffern[0] * 10 -  Ziffern[1]) * 10;
    1a68:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a6a:	88 2f       	mov	r24, r24
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	9c 01       	movw	r18, r24
    1a74:	22 0f       	add	r18, r18
    1a76:	33 1f       	adc	r19, r19
    1a78:	22 0f       	add	r18, r18
    1a7a:	33 1f       	adc	r19, r19
    1a7c:	82 0f       	add	r24, r18
    1a7e:	93 1f       	adc	r25, r19
    1a80:	09 2e       	mov	r0, r25
    1a82:	00 0c       	add	r0, r0
    1a84:	aa 0b       	sbc	r26, r26
    1a86:	bb 0b       	sbc	r27, r27
    1a88:	bc 01       	movw	r22, r24
    1a8a:	cd 01       	movw	r24, r26
    1a8c:	1a d5       	rcall	.+2612   	; 0x24c2 <__floatsisf>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	9c 01       	movw	r18, r24
    1a94:	ad 01       	movw	r20, r26
    1a96:	69 81       	ldd	r22, Y+1	; 0x01
    1a98:	7a 81       	ldd	r23, Y+2	; 0x02
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9e:	0d d4       	rcall	.+2074   	; 0x22ba <__subsf3>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	6c 01       	movw	r12, r24
    1aa6:	7d 01       	movw	r14, r26
    1aa8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aaa:	88 2f       	mov	r24, r24
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	09 2e       	mov	r0, r25
    1ab0:	00 0c       	add	r0, r0
    1ab2:	aa 0b       	sbc	r26, r26
    1ab4:	bb 0b       	sbc	r27, r27
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	03 d5       	rcall	.+2566   	; 0x24c2 <__floatsisf>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	9c 01       	movw	r18, r24
    1ac2:	ad 01       	movw	r20, r26
    1ac4:	c7 01       	movw	r24, r14
    1ac6:	b6 01       	movw	r22, r12
    1ac8:	f8 d3       	rcall	.+2032   	; 0x22ba <__subsf3>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e2       	ldi	r20, 0x20	; 32
    1ad4:	51 e4       	ldi	r21, 0x41	; 65
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	cd 01       	movw	r24, r26
    1ada:	a7 d5       	rcall	.+2894   	; 0x262a <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	cd 01       	movw	r24, r26
    1ae4:	c0 d4       	rcall	.+2432   	; 0x2466 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	8e a7       	std	Y+46, r24	; 0x2e
		Ziffern[3] = (TEMP - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
    1aec:	8c a5       	ldd	r24, Y+44	; 0x2c
    1aee:	88 2f       	mov	r24, r24
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	88 0f       	add	r24, r24
    1af4:	99 1f       	adc	r25, r25
    1af6:	9c 01       	movw	r18, r24
    1af8:	22 0f       	add	r18, r18
    1afa:	33 1f       	adc	r19, r19
    1afc:	22 0f       	add	r18, r18
    1afe:	33 1f       	adc	r19, r19
    1b00:	82 0f       	add	r24, r18
    1b02:	93 1f       	adc	r25, r19
    1b04:	09 2e       	mov	r0, r25
    1b06:	00 0c       	add	r0, r0
    1b08:	aa 0b       	sbc	r26, r26
    1b0a:	bb 0b       	sbc	r27, r27
    1b0c:	bc 01       	movw	r22, r24
    1b0e:	cd 01       	movw	r24, r26
    1b10:	d8 d4       	rcall	.+2480   	; 0x24c2 <__floatsisf>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	9c 01       	movw	r18, r24
    1b18:	ad 01       	movw	r20, r26
    1b1a:	69 81       	ldd	r22, Y+1	; 0x01
    1b1c:	7a 81       	ldd	r23, Y+2	; 0x02
    1b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b20:	9c 81       	ldd	r25, Y+4	; 0x04
    1b22:	cb d3       	rcall	.+1942   	; 0x22ba <__subsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	6c 01       	movw	r12, r24
    1b2a:	7d 01       	movw	r14, r26
    1b2c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	09 2e       	mov	r0, r25
    1b34:	00 0c       	add	r0, r0
    1b36:	aa 0b       	sbc	r26, r26
    1b38:	bb 0b       	sbc	r27, r27
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	c1 d4       	rcall	.+2434   	; 0x24c2 <__floatsisf>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	9c 01       	movw	r18, r24
    1b46:	ad 01       	movw	r20, r26
    1b48:	c7 01       	movw	r24, r14
    1b4a:	b6 01       	movw	r22, r12
    1b4c:	b6 d3       	rcall	.+1900   	; 0x22ba <__subsf3>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	6c 01       	movw	r12, r24
    1b54:	7d 01       	movw	r14, r26
    1b56:	8e a5       	ldd	r24, Y+46	; 0x2e
    1b58:	88 2f       	mov	r24, r24
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a0 e0       	ldi	r26, 0x00	; 0
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	ac d4       	rcall	.+2392   	; 0x24be <__floatunsisf>
    1b66:	dc 01       	movw	r26, r24
    1b68:	cb 01       	movw	r24, r22
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e2       	ldi	r20, 0x20	; 32
    1b70:	51 e4       	ldi	r21, 0x41	; 65
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0a d4       	rcall	.+2068   	; 0x238c <__divsf3>
    1b78:	dc 01       	movw	r26, r24
    1b7a:	cb 01       	movw	r24, r22
    1b7c:	9c 01       	movw	r18, r24
    1b7e:	ad 01       	movw	r20, r26
    1b80:	c7 01       	movw	r24, r14
    1b82:	b6 01       	movw	r22, r12
    1b84:	9a d3       	rcall	.+1844   	; 0x22ba <__subsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	48 ec       	ldi	r20, 0xC8	; 200
    1b90:	52 e4       	ldi	r21, 0x42	; 66
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	49 d5       	rcall	.+2706   	; 0x262a <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	62 d4       	rcall	.+2244   	; 0x2466 <__fixunssfsi>
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	cb 01       	movw	r24, r22
    1ba6:	8f a7       	std	Y+47, r24	; 0x2f
		Ziffern[4] = (TEMP - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0) -  ((double)Ziffern[3] / 100.0)) * 1000;
    1ba8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1baa:	88 2f       	mov	r24, r24
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	9c 01       	movw	r18, r24
    1bb4:	22 0f       	add	r18, r18
    1bb6:	33 1f       	adc	r19, r19
    1bb8:	22 0f       	add	r18, r18
    1bba:	33 1f       	adc	r19, r19
    1bbc:	82 0f       	add	r24, r18
    1bbe:	93 1f       	adc	r25, r19
    1bc0:	09 2e       	mov	r0, r25
    1bc2:	00 0c       	add	r0, r0
    1bc4:	aa 0b       	sbc	r26, r26
    1bc6:	bb 0b       	sbc	r27, r27
    1bc8:	bc 01       	movw	r22, r24
    1bca:	cd 01       	movw	r24, r26
    1bcc:	7a d4       	rcall	.+2292   	; 0x24c2 <__floatsisf>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9c 01       	movw	r18, r24
    1bd4:	ad 01       	movw	r20, r26
    1bd6:	69 81       	ldd	r22, Y+1	; 0x01
    1bd8:	7a 81       	ldd	r23, Y+2	; 0x02
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	6d d3       	rcall	.+1754   	; 0x22ba <__subsf3>
    1be0:	dc 01       	movw	r26, r24
    1be2:	cb 01       	movw	r24, r22
    1be4:	6c 01       	movw	r12, r24
    1be6:	7d 01       	movw	r14, r26
    1be8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bea:	88 2f       	mov	r24, r24
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	09 2e       	mov	r0, r25
    1bf0:	00 0c       	add	r0, r0
    1bf2:	aa 0b       	sbc	r26, r26
    1bf4:	bb 0b       	sbc	r27, r27
    1bf6:	bc 01       	movw	r22, r24
    1bf8:	cd 01       	movw	r24, r26
    1bfa:	63 d4       	rcall	.+2246   	; 0x24c2 <__floatsisf>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	9c 01       	movw	r18, r24
    1c02:	ad 01       	movw	r20, r26
    1c04:	c7 01       	movw	r24, r14
    1c06:	b6 01       	movw	r22, r12
    1c08:	58 d3       	rcall	.+1712   	; 0x22ba <__subsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	6c 01       	movw	r12, r24
    1c10:	7d 01       	movw	r14, r26
    1c12:	8e a5       	ldd	r24, Y+46	; 0x2e
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a0 e0       	ldi	r26, 0x00	; 0
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	bc 01       	movw	r22, r24
    1c1e:	cd 01       	movw	r24, r26
    1c20:	4e d4       	rcall	.+2204   	; 0x24be <__floatunsisf>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e2       	ldi	r20, 0x20	; 32
    1c2c:	51 e4       	ldi	r21, 0x41	; 65
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	ac d3       	rcall	.+1880   	; 0x238c <__divsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	9c 01       	movw	r18, r24
    1c3a:	ad 01       	movw	r20, r26
    1c3c:	c7 01       	movw	r24, r14
    1c3e:	b6 01       	movw	r22, r12
    1c40:	3c d3       	rcall	.+1656   	; 0x22ba <__subsf3>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	6c 01       	movw	r12, r24
    1c48:	7d 01       	movw	r14, r26
    1c4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c4c:	88 2f       	mov	r24, r24
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	a0 e0       	ldi	r26, 0x00	; 0
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	bc 01       	movw	r22, r24
    1c56:	cd 01       	movw	r24, r26
    1c58:	32 d4       	rcall	.+2148   	; 0x24be <__floatunsisf>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	48 ec       	ldi	r20, 0xC8	; 200
    1c64:	52 e4       	ldi	r21, 0x42	; 66
    1c66:	bc 01       	movw	r22, r24
    1c68:	cd 01       	movw	r24, r26
    1c6a:	90 d3       	rcall	.+1824   	; 0x238c <__divsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9c 01       	movw	r18, r24
    1c72:	ad 01       	movw	r20, r26
    1c74:	c7 01       	movw	r24, r14
    1c76:	b6 01       	movw	r22, r12
    1c78:	20 d3       	rcall	.+1600   	; 0x22ba <__subsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	4a e7       	ldi	r20, 0x7A	; 122
    1c84:	54 e4       	ldi	r21, 0x44	; 68
    1c86:	bc 01       	movw	r22, r24
    1c88:	cd 01       	movw	r24, r26
    1c8a:	cf d4       	rcall	.+2462   	; 0x262a <__mulsf3>
    1c8c:	dc 01       	movw	r26, r24
    1c8e:	cb 01       	movw	r24, r22
    1c90:	bc 01       	movw	r22, r24
    1c92:	cd 01       	movw	r24, r26
    1c94:	e8 d3       	rcall	.+2000   	; 0x2466 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	88 ab       	std	Y+48, r24	; 0x30
    1c9c:	18 86       	std	Y+8, r1	; 0x08
		
		for (int i = 0; i < 2; i++)
    1c9e:	1f 82       	std	Y+7, r1	; 0x07
    1ca0:	11 c0       	rjmp	.+34     	; 0x1cc4 <main+0x3b2>
    1ca2:	9e 01       	movw	r18, r28
		{
			USART0SendByte(Ziffern[i] + 0x30);
    1ca4:	24 5d       	subi	r18, 0xD4	; 212
    1ca6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca8:	8f 81       	ldd	r24, Y+7	; 0x07
    1caa:	98 85       	ldd	r25, Y+8	; 0x08
    1cac:	82 0f       	add	r24, r18
    1cae:	93 1f       	adc	r25, r19
    1cb0:	fc 01       	movw	r30, r24
    1cb2:	80 81       	ld	r24, Z
    1cb4:	80 5d       	subi	r24, 0xD0	; 208
    1cb6:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
    1cba:	8f 81       	ldd	r24, Y+7	; 0x07
		Ziffern[1] = TEMP  - Ziffern[0] * 10;
		Ziffern[2] = (TEMP - Ziffern[0] * 10 -  Ziffern[1]) * 10;
		Ziffern[3] = (TEMP - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
		Ziffern[4] = (TEMP - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0) -  ((double)Ziffern[3] / 100.0)) * 1000;
		
		for (int i = 0; i < 2; i++)
    1cbc:	98 85       	ldd	r25, Y+8	; 0x08
    1cbe:	01 96       	adiw	r24, 0x01	; 1
    1cc0:	98 87       	std	Y+8, r25	; 0x08
    1cc2:	8f 83       	std	Y+7, r24	; 0x07
    1cc4:	8f 81       	ldd	r24, Y+7	; 0x07
    1cc6:	98 85       	ldd	r25, Y+8	; 0x08
    1cc8:	02 97       	sbiw	r24, 0x02	; 2
    1cca:	5c f3       	brlt	.-42     	; 0x1ca2 <main+0x390>
    1ccc:	8e e2       	ldi	r24, 0x2E	; 46
		{
			USART0SendByte(Ziffern[i] + 0x30);
		}
		USART0SendByte(0x2E);
    1cce:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
    1cd2:	1a 86       	std	Y+10, r1	; 0x0a
		for (int i = 0; i < 3; i++)
    1cd4:	19 86       	std	Y+9, r1	; 0x09
    1cd6:	12 c0       	rjmp	.+36     	; 0x1cfc <main+0x3ea>
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
		{
			USART0SendByte(Ziffern[i+2] + 0x30);
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	02 96       	adiw	r24, 0x02	; 2
    1cde:	9e 01       	movw	r18, r28
    1ce0:	24 5d       	subi	r18, 0xD4	; 212
    1ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce4:	82 0f       	add	r24, r18
    1ce6:	93 1f       	adc	r25, r19
    1ce8:	fc 01       	movw	r30, r24
    1cea:	80 81       	ld	r24, Z
    1cec:	80 5d       	subi	r24, 0xD0	; 208
    1cee:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
		for (int i = 0; i < 2; i++)
		{
			USART0SendByte(Ziffern[i] + 0x30);
		}
		USART0SendByte(0x2E);
		for (int i = 0; i < 3; i++)
    1cf2:	89 85       	ldd	r24, Y+9	; 0x09
    1cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	9a 87       	std	Y+10, r25	; 0x0a
    1cfa:	89 87       	std	Y+9, r24	; 0x09
    1cfc:	89 85       	ldd	r24, Y+9	; 0x09
    1cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
		{
			USART0SendByte(Ziffern[i+2] + 0x30);
		}
		
		USART0SendByte(',');
    1d00:	03 97       	sbiw	r24, 0x03	; 3
    1d02:	54 f3       	brlt	.-44     	; 0x1cd8 <main+0x3c6>
    1d04:	8c e2       	ldi	r24, 0x2C	; 44
		USART0SendByte(' ');
    1d06:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
    1d0a:	80 e2       	ldi	r24, 0x20	; 32
		
		PRESS = PRESS / 100;
    1d0c:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	48 ec       	ldi	r20, 0xC8	; 200
    1d16:	52 e4       	ldi	r21, 0x42	; 66
    1d18:	6e 89       	ldd	r22, Y+22	; 0x16
    1d1a:	7f 89       	ldd	r23, Y+23	; 0x17
    1d1c:	88 8d       	ldd	r24, Y+24	; 0x18
    1d1e:	99 8d       	ldd	r25, Y+25	; 0x19
    1d20:	35 d3       	rcall	.+1642   	; 0x238c <__divsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8e 8b       	std	Y+22, r24	; 0x16
    1d28:	9f 8b       	std	Y+23, r25	; 0x17
		Ziffern[0] = PRESS / 1000;
    1d2a:	a8 8f       	std	Y+24, r26	; 0x18
    1d2c:	b9 8f       	std	Y+25, r27	; 0x19
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	4a e7       	ldi	r20, 0x7A	; 122
    1d34:	54 e4       	ldi	r21, 0x44	; 68
    1d36:	6e 89       	ldd	r22, Y+22	; 0x16
    1d38:	7f 89       	ldd	r23, Y+23	; 0x17
    1d3a:	88 8d       	ldd	r24, Y+24	; 0x18
    1d3c:	99 8d       	ldd	r25, Y+25	; 0x19
    1d3e:	26 d3       	rcall	.+1612   	; 0x238c <__divsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	8e d3       	rcall	.+1820   	; 0x2466 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
		Ziffern[1] = (PRESS - Ziffern[0] * 1000) / 100; 
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	8c a7       	std	Y+44, r24	; 0x2c
    1d50:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d52:	48 2f       	mov	r20, r24
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	28 ee       	ldi	r18, 0xE8	; 232
    1d58:	33 e0       	ldi	r19, 0x03	; 3
    1d5a:	42 9f       	mul	r20, r18
    1d5c:	c0 01       	movw	r24, r0
    1d5e:	43 9f       	mul	r20, r19
    1d60:	90 0d       	add	r25, r0
    1d62:	52 9f       	mul	r21, r18
    1d64:	90 0d       	add	r25, r0
    1d66:	11 24       	eor	r1, r1
    1d68:	09 2e       	mov	r0, r25
    1d6a:	00 0c       	add	r0, r0
    1d6c:	aa 0b       	sbc	r26, r26
    1d6e:	bb 0b       	sbc	r27, r27
    1d70:	bc 01       	movw	r22, r24
    1d72:	cd 01       	movw	r24, r26
    1d74:	a6 d3       	rcall	.+1868   	; 0x24c2 <__floatsisf>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	9c 01       	movw	r18, r24
    1d7c:	ad 01       	movw	r20, r26
    1d7e:	6e 89       	ldd	r22, Y+22	; 0x16
    1d80:	7f 89       	ldd	r23, Y+23	; 0x17
    1d82:	88 8d       	ldd	r24, Y+24	; 0x18
    1d84:	99 8d       	ldd	r25, Y+25	; 0x19
    1d86:	99 d2       	rcall	.+1330   	; 0x22ba <__subsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	48 ec       	ldi	r20, 0xC8	; 200
    1d92:	52 e4       	ldi	r21, 0x42	; 66
    1d94:	bc 01       	movw	r22, r24
    1d96:	cd 01       	movw	r24, r26
    1d98:	f9 d2       	rcall	.+1522   	; 0x238c <__divsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	bc 01       	movw	r22, r24
    1da0:	cd 01       	movw	r24, r26
    1da2:	61 d3       	rcall	.+1730   	; 0x2466 <__fixunssfsi>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
		Ziffern[2] = (PRESS - Ziffern[0] * 1000 - Ziffern[1] * 100) / 10; 
    1da8:	8d a7       	std	Y+45, r24	; 0x2d
    1daa:	8c a5       	ldd	r24, Y+44	; 0x2c
    1dac:	48 2f       	mov	r20, r24
    1dae:	50 e0       	ldi	r21, 0x00	; 0
    1db0:	28 ee       	ldi	r18, 0xE8	; 232
    1db2:	33 e0       	ldi	r19, 0x03	; 3
    1db4:	42 9f       	mul	r20, r18
    1db6:	c0 01       	movw	r24, r0
    1db8:	43 9f       	mul	r20, r19
    1dba:	90 0d       	add	r25, r0
    1dbc:	52 9f       	mul	r21, r18
    1dbe:	90 0d       	add	r25, r0
    1dc0:	11 24       	eor	r1, r1
    1dc2:	09 2e       	mov	r0, r25
    1dc4:	00 0c       	add	r0, r0
    1dc6:	aa 0b       	sbc	r26, r26
    1dc8:	bb 0b       	sbc	r27, r27
    1dca:	bc 01       	movw	r22, r24
    1dcc:	cd 01       	movw	r24, r26
    1dce:	79 d3       	rcall	.+1778   	; 0x24c2 <__floatsisf>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	9c 01       	movw	r18, r24
    1dd6:	ad 01       	movw	r20, r26
    1dd8:	6e 89       	ldd	r22, Y+22	; 0x16
    1dda:	7f 89       	ldd	r23, Y+23	; 0x17
    1ddc:	88 8d       	ldd	r24, Y+24	; 0x18
    1dde:	99 8d       	ldd	r25, Y+25	; 0x19
    1de0:	6c d2       	rcall	.+1240   	; 0x22ba <__subsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	6c 01       	movw	r12, r24
    1de8:	7d 01       	movw	r14, r26
    1dea:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dec:	28 2f       	mov	r18, r24
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	44 e6       	ldi	r20, 0x64	; 100
    1df2:	42 9f       	mul	r20, r18
    1df4:	c0 01       	movw	r24, r0
    1df6:	43 9f       	mul	r20, r19
    1df8:	90 0d       	add	r25, r0
    1dfa:	11 24       	eor	r1, r1
    1dfc:	09 2e       	mov	r0, r25
    1dfe:	00 0c       	add	r0, r0
    1e00:	aa 0b       	sbc	r26, r26
    1e02:	bb 0b       	sbc	r27, r27
    1e04:	bc 01       	movw	r22, r24
    1e06:	cd 01       	movw	r24, r26
    1e08:	5c d3       	rcall	.+1720   	; 0x24c2 <__floatsisf>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9c 01       	movw	r18, r24
    1e10:	ad 01       	movw	r20, r26
    1e12:	c7 01       	movw	r24, r14
    1e14:	b6 01       	movw	r22, r12
    1e16:	51 d2       	rcall	.+1186   	; 0x22ba <__subsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e2       	ldi	r20, 0x20	; 32
    1e22:	51 e4       	ldi	r21, 0x41	; 65
    1e24:	bc 01       	movw	r22, r24
    1e26:	cd 01       	movw	r24, r26
    1e28:	b1 d2       	rcall	.+1378   	; 0x238c <__divsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	bc 01       	movw	r22, r24
    1e30:	cd 01       	movw	r24, r26
    1e32:	19 d3       	rcall	.+1586   	; 0x2466 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
		Ziffern[3] = (PRESS - Ziffern[0] * 1000 - Ziffern[1] * 100 - Ziffern[2] * 10); 
    1e38:	8e a7       	std	Y+46, r24	; 0x2e
    1e3a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e3c:	48 2f       	mov	r20, r24
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	28 ee       	ldi	r18, 0xE8	; 232
    1e42:	33 e0       	ldi	r19, 0x03	; 3
    1e44:	42 9f       	mul	r20, r18
    1e46:	c0 01       	movw	r24, r0
    1e48:	43 9f       	mul	r20, r19
    1e4a:	90 0d       	add	r25, r0
    1e4c:	52 9f       	mul	r21, r18
    1e4e:	90 0d       	add	r25, r0
    1e50:	11 24       	eor	r1, r1
    1e52:	09 2e       	mov	r0, r25
    1e54:	00 0c       	add	r0, r0
    1e56:	aa 0b       	sbc	r26, r26
    1e58:	bb 0b       	sbc	r27, r27
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	31 d3       	rcall	.+1634   	; 0x24c2 <__floatsisf>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9c 01       	movw	r18, r24
    1e66:	ad 01       	movw	r20, r26
    1e68:	6e 89       	ldd	r22, Y+22	; 0x16
    1e6a:	7f 89       	ldd	r23, Y+23	; 0x17
    1e6c:	88 8d       	ldd	r24, Y+24	; 0x18
    1e6e:	99 8d       	ldd	r25, Y+25	; 0x19
    1e70:	24 d2       	rcall	.+1096   	; 0x22ba <__subsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	6c 01       	movw	r12, r24
    1e78:	7d 01       	movw	r14, r26
    1e7a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	44 e6       	ldi	r20, 0x64	; 100
    1e82:	42 9f       	mul	r20, r18
    1e84:	c0 01       	movw	r24, r0
    1e86:	43 9f       	mul	r20, r19
    1e88:	90 0d       	add	r25, r0
    1e8a:	11 24       	eor	r1, r1
    1e8c:	09 2e       	mov	r0, r25
    1e8e:	00 0c       	add	r0, r0
    1e90:	aa 0b       	sbc	r26, r26
    1e92:	bb 0b       	sbc	r27, r27
    1e94:	bc 01       	movw	r22, r24
    1e96:	cd 01       	movw	r24, r26
    1e98:	14 d3       	rcall	.+1576   	; 0x24c2 <__floatsisf>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	9c 01       	movw	r18, r24
    1ea0:	ad 01       	movw	r20, r26
    1ea2:	c7 01       	movw	r24, r14
    1ea4:	b6 01       	movw	r22, r12
    1ea6:	09 d2       	rcall	.+1042   	; 0x22ba <__subsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	6c 01       	movw	r12, r24
    1eae:	7d 01       	movw	r14, r26
    1eb0:	8e a5       	ldd	r24, Y+46	; 0x2e
    1eb2:	88 2f       	mov	r24, r24
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	9c 01       	movw	r18, r24
    1ebc:	22 0f       	add	r18, r18
    1ebe:	33 1f       	adc	r19, r19
    1ec0:	22 0f       	add	r18, r18
    1ec2:	33 1f       	adc	r19, r19
    1ec4:	82 0f       	add	r24, r18
    1ec6:	93 1f       	adc	r25, r19
    1ec8:	09 2e       	mov	r0, r25
    1eca:	00 0c       	add	r0, r0
    1ecc:	aa 0b       	sbc	r26, r26
    1ece:	bb 0b       	sbc	r27, r27
    1ed0:	bc 01       	movw	r22, r24
    1ed2:	cd 01       	movw	r24, r26
    1ed4:	f6 d2       	rcall	.+1516   	; 0x24c2 <__floatsisf>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9c 01       	movw	r18, r24
    1edc:	ad 01       	movw	r20, r26
    1ede:	c7 01       	movw	r24, r14
    1ee0:	b6 01       	movw	r22, r12
    1ee2:	eb d1       	rcall	.+982    	; 0x22ba <__subsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	bc 01       	movw	r22, r24
    1eea:	cd 01       	movw	r24, r26
    1eec:	bc d2       	rcall	.+1400   	; 0x2466 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	8f a7       	std	Y+47, r24	; 0x2f
    1ef4:	1c 86       	std	Y+12, r1	; 0x0c
    1ef6:	1b 86       	std	Y+11, r1	; 0x0b
		for(int i = 0; i < 10; i++)
    1ef8:	10 c0       	rjmp	.+32     	; 0x1f1a <main+0x608>
    1efa:	9e 01       	movw	r18, r28
    1efc:	2e 5b       	subi	r18, 0xBE	; 190
		{
			USART0SendByte(PRESSURE[i]);
    1efe:	3f 4f       	sbci	r19, 0xFF	; 255
    1f00:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f02:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f04:	82 0f       	add	r24, r18
    1f06:	93 1f       	adc	r25, r19
    1f08:	fc 01       	movw	r30, r24
    1f0a:	80 81       	ld	r24, Z
    1f0c:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
		PRESS = PRESS / 100;
		Ziffern[0] = PRESS / 1000;
		Ziffern[1] = (PRESS - Ziffern[0] * 1000) / 100; 
		Ziffern[2] = (PRESS - Ziffern[0] * 1000 - Ziffern[1] * 100) / 10; 
		Ziffern[3] = (PRESS - Ziffern[0] * 1000 - Ziffern[1] * 100 - Ziffern[2] * 10); 
		for(int i = 0; i < 10; i++)
    1f10:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f12:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f14:	01 96       	adiw	r24, 0x01	; 1
    1f16:	9c 87       	std	Y+12, r25	; 0x0c
    1f18:	8b 87       	std	Y+11, r24	; 0x0b
    1f1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1f1e:	0a 97       	sbiw	r24, 0x0a	; 10
    1f20:	64 f3       	brlt	.-40     	; 0x1efa <main+0x5e8>
		{
			USART0SendByte(PRESSURE[i]);
		}
		for (int i = 0; i < 4; i++)
    1f22:	1e 86       	std	Y+14, r1	; 0x0e
    1f24:	1d 86       	std	Y+13, r1	; 0x0d
    1f26:	11 c0       	rjmp	.+34     	; 0x1f4a <main+0x638>
		{
			USART0SendByte(Ziffern[i] + 0x30);
    1f28:	9e 01       	movw	r18, r28
    1f2a:	24 5d       	subi	r18, 0xD4	; 212
    1f2c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f32:	82 0f       	add	r24, r18
    1f34:	93 1f       	adc	r25, r19
    1f36:	fc 01       	movw	r30, r24
    1f38:	80 81       	ld	r24, Z
    1f3a:	80 5d       	subi	r24, 0xD0	; 208
    1f3c:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
		Ziffern[3] = (PRESS - Ziffern[0] * 1000 - Ziffern[1] * 100 - Ziffern[2] * 10); 
		for(int i = 0; i < 10; i++)
		{
			USART0SendByte(PRESSURE[i]);
		}
		for (int i = 0; i < 4; i++)
    1f40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f44:	01 96       	adiw	r24, 0x01	; 1
    1f46:	9e 87       	std	Y+14, r25	; 0x0e
    1f48:	8d 87       	std	Y+13, r24	; 0x0d
    1f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
		{
			USART0SendByte(Ziffern[i] + 0x30);
		}
		
		USART0SendByte(',');
    1f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f4e:	04 97       	sbiw	r24, 0x04	; 4
    1f50:	5c f3       	brlt	.-42     	; 0x1f28 <main+0x616>
		USART0SendByte(' ');
    1f52:	8c e2       	ldi	r24, 0x2C	; 44
    1f54:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
		
		Ziffern[0] = HUM / 10;
    1f58:	80 e2       	ldi	r24, 0x20	; 32
    1f5a:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f68:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f6a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f6c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f6e:	0e d2       	rcall	.+1052   	; 0x238c <__divsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	bc 01       	movw	r22, r24
    1f76:	cd 01       	movw	r24, r26
    1f78:	76 d2       	rcall	.+1260   	; 0x2466 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
		Ziffern[1] = HUM  - Ziffern[0] * 10;
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	8c a7       	std	Y+44, r24	; 0x2c
    1f80:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f82:	88 2f       	mov	r24, r24
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	9c 01       	movw	r18, r24
    1f8c:	22 0f       	add	r18, r18
    1f8e:	33 1f       	adc	r19, r19
    1f90:	22 0f       	add	r18, r18
    1f92:	33 1f       	adc	r19, r19
    1f94:	82 0f       	add	r24, r18
    1f96:	93 1f       	adc	r25, r19
    1f98:	09 2e       	mov	r0, r25
    1f9a:	00 0c       	add	r0, r0
    1f9c:	aa 0b       	sbc	r26, r26
    1f9e:	bb 0b       	sbc	r27, r27
    1fa0:	bc 01       	movw	r22, r24
    1fa2:	cd 01       	movw	r24, r26
    1fa4:	8e d2       	rcall	.+1308   	; 0x24c2 <__floatsisf>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9c 01       	movw	r18, r24
    1fac:	ad 01       	movw	r20, r26
    1fae:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1fb0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1fb2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fb4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fb6:	81 d1       	rcall	.+770    	; 0x22ba <__subsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	52 d2       	rcall	.+1188   	; 0x2466 <__fixunssfsi>
		Ziffern[2] = (HUM - Ziffern[0] * 10 -  Ziffern[1]) * 10;
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	8d a7       	std	Y+45, r24	; 0x2d
    1fc8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	88 0f       	add	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	9c 01       	movw	r18, r24
    1fd4:	22 0f       	add	r18, r18
    1fd6:	33 1f       	adc	r19, r19
    1fd8:	22 0f       	add	r18, r18
    1fda:	33 1f       	adc	r19, r19
    1fdc:	82 0f       	add	r24, r18
    1fde:	93 1f       	adc	r25, r19
    1fe0:	09 2e       	mov	r0, r25
    1fe2:	00 0c       	add	r0, r0
    1fe4:	aa 0b       	sbc	r26, r26
    1fe6:	bb 0b       	sbc	r27, r27
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	6a d2       	rcall	.+1236   	; 0x24c2 <__floatsisf>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9c 01       	movw	r18, r24
    1ff4:	ad 01       	movw	r20, r26
    1ff6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ff8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ffa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ffc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ffe:	5d d1       	rcall	.+698    	; 0x22ba <__subsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	6c 01       	movw	r12, r24
    2006:	7d 01       	movw	r14, r26
    2008:	8d a5       	ldd	r24, Y+45	; 0x2d
    200a:	88 2f       	mov	r24, r24
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	09 2e       	mov	r0, r25
    2010:	00 0c       	add	r0, r0
    2012:	aa 0b       	sbc	r26, r26
    2014:	bb 0b       	sbc	r27, r27
    2016:	bc 01       	movw	r22, r24
    2018:	cd 01       	movw	r24, r26
    201a:	53 d2       	rcall	.+1190   	; 0x24c2 <__floatsisf>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9c 01       	movw	r18, r24
    2022:	ad 01       	movw	r20, r26
    2024:	c7 01       	movw	r24, r14
    2026:	b6 01       	movw	r22, r12
    2028:	48 d1       	rcall	.+656    	; 0x22ba <__subsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e2       	ldi	r20, 0x20	; 32
    2034:	51 e4       	ldi	r21, 0x41	; 65
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	f7 d2       	rcall	.+1518   	; 0x262a <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	10 d2       	rcall	.+1056   	; 0x2466 <__fixunssfsi>
		Ziffern[3] = (HUM - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	8e a7       	std	Y+46, r24	; 0x2e
    204c:	8c a5       	ldd	r24, Y+44	; 0x2c
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	9c 01       	movw	r18, r24
    2058:	22 0f       	add	r18, r18
    205a:	33 1f       	adc	r19, r19
    205c:	22 0f       	add	r18, r18
    205e:	33 1f       	adc	r19, r19
    2060:	82 0f       	add	r24, r18
    2062:	93 1f       	adc	r25, r19
    2064:	09 2e       	mov	r0, r25
    2066:	00 0c       	add	r0, r0
    2068:	aa 0b       	sbc	r26, r26
    206a:	bb 0b       	sbc	r27, r27
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	28 d2       	rcall	.+1104   	; 0x24c2 <__floatsisf>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9c 01       	movw	r18, r24
    2078:	ad 01       	movw	r20, r26
    207a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    207c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    207e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2080:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2082:	1b d1       	rcall	.+566    	; 0x22ba <__subsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	6c 01       	movw	r12, r24
    208a:	7d 01       	movw	r14, r26
    208c:	8d a5       	ldd	r24, Y+45	; 0x2d
    208e:	88 2f       	mov	r24, r24
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	09 2e       	mov	r0, r25
    2094:	00 0c       	add	r0, r0
    2096:	aa 0b       	sbc	r26, r26
    2098:	bb 0b       	sbc	r27, r27
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	11 d2       	rcall	.+1058   	; 0x24c2 <__floatsisf>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	9c 01       	movw	r18, r24
    20a6:	ad 01       	movw	r20, r26
    20a8:	c7 01       	movw	r24, r14
    20aa:	b6 01       	movw	r22, r12
    20ac:	06 d1       	rcall	.+524    	; 0x22ba <__subsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	6c 01       	movw	r12, r24
    20b4:	7d 01       	movw	r14, r26
    20b6:	8e a5       	ldd	r24, Y+46	; 0x2e
    20b8:	88 2f       	mov	r24, r24
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a0 e0       	ldi	r26, 0x00	; 0
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	bc 01       	movw	r22, r24
    20c2:	cd 01       	movw	r24, r26
    20c4:	fc d1       	rcall	.+1016   	; 0x24be <__floatunsisf>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	bc 01       	movw	r22, r24
    20d4:	cd 01       	movw	r24, r26
    20d6:	5a d1       	rcall	.+692    	; 0x238c <__divsf3>
    20d8:	dc 01       	movw	r26, r24
    20da:	cb 01       	movw	r24, r22
    20dc:	9c 01       	movw	r18, r24
    20de:	ad 01       	movw	r20, r26
    20e0:	c7 01       	movw	r24, r14
    20e2:	b6 01       	movw	r22, r12
    20e4:	ea d0       	rcall	.+468    	; 0x22ba <__subsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	48 ec       	ldi	r20, 0xC8	; 200
    20f0:	52 e4       	ldi	r21, 0x42	; 66
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	99 d2       	rcall	.+1330   	; 0x262a <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	b2 d1       	rcall	.+868    	; 0x2466 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	8f a7       	std	Y+47, r24	; 0x2f
    2108:	18 8a       	std	Y+16, r1	; 0x10
    210a:	1f 86       	std	Y+15, r1	; 0x0f
		for(int i = 0; i < 10; i++)
    210c:	10 c0       	rjmp	.+32     	; 0x212e <__DATA_REGION_LENGTH__+0x12e>
    210e:	9e 01       	movw	r18, r28
    2110:	24 5b       	subi	r18, 0xB4	; 180
		{
			USART0SendByte(HUMIDITY[i]);
    2112:	3f 4f       	sbci	r19, 0xFF	; 255
    2114:	8f 85       	ldd	r24, Y+15	; 0x0f
    2116:	98 89       	ldd	r25, Y+16	; 0x10
    2118:	82 0f       	add	r24, r18
    211a:	93 1f       	adc	r25, r19
    211c:	fc 01       	movw	r30, r24
    211e:	80 81       	ld	r24, Z
    2120:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
    2124:	8f 85       	ldd	r24, Y+15	; 0x0f
    2126:	98 89       	ldd	r25, Y+16	; 0x10
		
		Ziffern[0] = HUM / 10;
		Ziffern[1] = HUM  - Ziffern[0] * 10;
		Ziffern[2] = (HUM - Ziffern[0] * 10 -  Ziffern[1]) * 10;
		Ziffern[3] = (HUM - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
		for(int i = 0; i < 10; i++)
    2128:	01 96       	adiw	r24, 0x01	; 1
    212a:	98 8b       	std	Y+16, r25	; 0x10
    212c:	8f 87       	std	Y+15, r24	; 0x0f
    212e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2130:	98 89       	ldd	r25, Y+16	; 0x10
    2132:	0a 97       	sbiw	r24, 0x0a	; 10
    2134:	64 f3       	brlt	.-40     	; 0x210e <__DATA_REGION_LENGTH__+0x10e>
    2136:	1a 8a       	std	Y+18, r1	; 0x12
		{
			USART0SendByte(HUMIDITY[i]);
		}
		for (int i = 0; i < 2; i++)
    2138:	19 8a       	std	Y+17, r1	; 0x11
    213a:	11 c0       	rjmp	.+34     	; 0x215e <__DATA_REGION_LENGTH__+0x15e>
    213c:	9e 01       	movw	r18, r28
		{
			USART0SendByte(Ziffern[i] + 0x30);
    213e:	24 5d       	subi	r18, 0xD4	; 212
    2140:	3f 4f       	sbci	r19, 0xFF	; 255
    2142:	89 89       	ldd	r24, Y+17	; 0x11
    2144:	9a 89       	ldd	r25, Y+18	; 0x12
    2146:	82 0f       	add	r24, r18
    2148:	93 1f       	adc	r25, r19
    214a:	fc 01       	movw	r30, r24
    214c:	80 81       	ld	r24, Z
    214e:	80 5d       	subi	r24, 0xD0	; 208
    2150:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
		Ziffern[3] = (HUM - Ziffern[0] * 10 -  Ziffern[1] - ((double)Ziffern[2] / 10.0)) * 100;
		for(int i = 0; i < 10; i++)
		{
			USART0SendByte(HUMIDITY[i]);
		}
		for (int i = 0; i < 2; i++)
    2154:	89 89       	ldd	r24, Y+17	; 0x11
    2156:	9a 89       	ldd	r25, Y+18	; 0x12
    2158:	01 96       	adiw	r24, 0x01	; 1
    215a:	9a 8b       	std	Y+18, r25	; 0x12
    215c:	89 8b       	std	Y+17, r24	; 0x11
    215e:	89 89       	ldd	r24, Y+17	; 0x11
    2160:	9a 89       	ldd	r25, Y+18	; 0x12
    2162:	02 97       	sbiw	r24, 0x02	; 2
    2164:	5c f3       	brlt	.-42     	; 0x213c <__DATA_REGION_LENGTH__+0x13c>
		{
			USART0SendByte(Ziffern[i] + 0x30);
		}
		USART0SendByte(0x2E);
    2166:	8e e2       	ldi	r24, 0x2E	; 46
    2168:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
		for (int i = 0; i < 2; i++)
    216c:	1c 8a       	std	Y+20, r1	; 0x14
    216e:	1b 8a       	std	Y+19, r1	; 0x13
		{
			USART0SendByte(Ziffern[i+2] + 0x30);
    2170:	12 c0       	rjmp	.+36     	; 0x2196 <__DATA_REGION_LENGTH__+0x196>
    2172:	8b 89       	ldd	r24, Y+19	; 0x13
    2174:	9c 89       	ldd	r25, Y+20	; 0x14
    2176:	02 96       	adiw	r24, 0x02	; 2
    2178:	9e 01       	movw	r18, r28
    217a:	24 5d       	subi	r18, 0xD4	; 212
    217c:	3f 4f       	sbci	r19, 0xFF	; 255
    217e:	82 0f       	add	r24, r18
    2180:	93 1f       	adc	r25, r19
    2182:	fc 01       	movw	r30, r24
    2184:	80 81       	ld	r24, Z
    2186:	80 5d       	subi	r24, 0xD0	; 208
		for (int i = 0; i < 2; i++)
		{
			USART0SendByte(Ziffern[i] + 0x30);
		}
		USART0SendByte(0x2E);
		for (int i = 0; i < 2; i++)
    2188:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
    218c:	8b 89       	ldd	r24, Y+19	; 0x13
    218e:	9c 89       	ldd	r25, Y+20	; 0x14
    2190:	01 96       	adiw	r24, 0x01	; 1
    2192:	9c 8b       	std	Y+20, r25	; 0x14
    2194:	8b 8b       	std	Y+19, r24	; 0x13
    2196:	8b 89       	ldd	r24, Y+19	; 0x13
    2198:	9c 89       	ldd	r25, Y+20	; 0x14
		{
			USART0SendByte(Ziffern[i+2] + 0x30);
		}
		
		USART0SendByte(0x0A);
    219a:	02 97       	sbiw	r24, 0x02	; 2
    219c:	54 f3       	brlt	.-44     	; 0x2172 <__DATA_REGION_LENGTH__+0x172>
    219e:	8a e0       	ldi	r24, 0x0A	; 10
    21a0:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	aa ef       	ldi	r26, 0xFA	; 250
    21aa:	b3 e4       	ldi	r27, 0x43	; 67
    21ac:	8e 8f       	std	Y+30, r24	; 0x1e
    21ae:	9f 8f       	std	Y+31, r25	; 0x1f

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    21b0:	a8 a3       	std	Y+32, r26	; 0x20
    21b2:	b9 a3       	std	Y+33, r27	; 0x21
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	4a ef       	ldi	r20, 0xFA	; 250
    21ba:	54 e4       	ldi	r21, 0x44	; 68
    21bc:	6e 8d       	ldd	r22, Y+30	; 0x1e
    21be:	7f 8d       	ldd	r23, Y+31	; 0x1f
    21c0:	88 a1       	ldd	r24, Y+32	; 0x20
    21c2:	99 a1       	ldd	r25, Y+33	; 0x21
    21c4:	32 d2       	rcall	.+1124   	; 0x262a <__mulsf3>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	8a a3       	std	Y+34, r24	; 0x22
    21cc:	9b a3       	std	Y+35, r25	; 0x23
	if (__tmp < 1.0)
    21ce:	ac a3       	std	Y+36, r26	; 0x24
    21d0:	bd a3       	std	Y+37, r27	; 0x25
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e8       	ldi	r20, 0x80	; 128
    21d8:	5f e3       	ldi	r21, 0x3F	; 63
    21da:	6a a1       	ldd	r22, Y+34	; 0x22
    21dc:	7b a1       	ldd	r23, Y+35	; 0x23
    21de:	8c a1       	ldd	r24, Y+36	; 0x24
    21e0:	9d a1       	ldd	r25, Y+37	; 0x25
    21e2:	d0 d0       	rcall	.+416    	; 0x2384 <__cmpsf2>
    21e4:	88 23       	and	r24, r24
		__ticks = 1;
    21e6:	2c f4       	brge	.+10     	; 0x21f2 <__DATA_REGION_LENGTH__+0x1f2>
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9f a3       	std	Y+39, r25	; 0x27
    21ee:	8e a3       	std	Y+38, r24	; 0x26
	else if (__tmp > 65535)
    21f0:	3b c0       	rjmp	.+118    	; 0x2268 <__stack+0x69>
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	3f ef       	ldi	r19, 0xFF	; 255
    21f6:	4f e7       	ldi	r20, 0x7F	; 127
    21f8:	57 e4       	ldi	r21, 0x47	; 71
    21fa:	6a a1       	ldd	r22, Y+34	; 0x22
    21fc:	7b a1       	ldd	r23, Y+35	; 0x23
    21fe:	8c a1       	ldd	r24, Y+36	; 0x24
    2200:	9d a1       	ldd	r25, Y+37	; 0x25
    2202:	0f d2       	rcall	.+1054   	; 0x2622 <__gesf2>
    2204:	18 16       	cp	r1, r24
    2206:	3c f5       	brge	.+78     	; 0x2256 <__stack+0x57>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	40 e2       	ldi	r20, 0x20	; 32
    220e:	51 e4       	ldi	r21, 0x41	; 65
    2210:	6e 8d       	ldd	r22, Y+30	; 0x1e
    2212:	7f 8d       	ldd	r23, Y+31	; 0x1f
    2214:	88 a1       	ldd	r24, Y+32	; 0x20
    2216:	99 a1       	ldd	r25, Y+33	; 0x21
    2218:	08 d2       	rcall	.+1040   	; 0x262a <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	21 d1       	rcall	.+578    	; 0x2466 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	9f a3       	std	Y+39, r25	; 0x27
    222a:	8e a3       	std	Y+38, r24	; 0x26
    222c:	0f c0       	rjmp	.+30     	; 0x224c <__stack+0x4d>
    222e:	88 ec       	ldi	r24, 0xC8	; 200
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	99 a7       	std	Y+41, r25	; 0x29
    2234:	88 a7       	std	Y+40, r24	; 0x28
    2236:	88 a5       	ldd	r24, Y+40	; 0x28
    2238:	99 a5       	ldd	r25, Y+41	; 0x29
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <__stack+0x3b>
    223e:	99 a7       	std	Y+41, r25	; 0x29
    2240:	88 a7       	std	Y+40, r24	; 0x28
    2242:	8e a1       	ldd	r24, Y+38	; 0x26
    2244:	9f a1       	ldd	r25, Y+39	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	9f a3       	std	Y+39, r25	; 0x27
    224a:	8e a3       	std	Y+38, r24	; 0x26
    224c:	8e a1       	ldd	r24, Y+38	; 0x26
    224e:	9f a1       	ldd	r25, Y+39	; 0x27
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2250:	89 2b       	or	r24, r25
    2252:	69 f7       	brne	.-38     	; 0x222e <__stack+0x2f>
    2254:	13 c0       	rjmp	.+38     	; 0x227c <__stack+0x7d>
    2256:	6a a1       	ldd	r22, Y+34	; 0x22
    2258:	7b a1       	ldd	r23, Y+35	; 0x23
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225a:	8c a1       	ldd	r24, Y+36	; 0x24
    225c:	9d a1       	ldd	r25, Y+37	; 0x25
    225e:	03 d1       	rcall	.+518    	; 0x2466 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9f a3       	std	Y+39, r25	; 0x27
    2266:	8e a3       	std	Y+38, r24	; 0x26
    2268:	8e a1       	ldd	r24, Y+38	; 0x26
    226a:	9f a1       	ldd	r25, Y+39	; 0x27
    226c:	9b a7       	std	Y+43, r25	; 0x2b
    226e:	8a a7       	std	Y+42, r24	; 0x2a
    2270:	8a a5       	ldd	r24, Y+42	; 0x2a
    2272:	9b a5       	ldd	r25, Y+43	; 0x2b
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <__stack+0x75>
    2278:	9b a7       	std	Y+43, r25	; 0x2b
    227a:	8a a7       	std	Y+42, r24	; 0x2a
    227c:	7b cb       	rjmp	.-2314   	; 0x1974 <main+0x62>

0000227e <INIT>:
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
		_delay_ms(500);
    }
    2282:	1f 92       	push	r1
}

char INIT ( void )
{
    2284:	cd b7       	in	r28, 0x3d	; 61
    2286:	de b7       	in	r29, 0x3e	; 62
	char cRET = 0;
    2288:	19 82       	std	Y+1, r1	; 0x01
	USART0Init(103);
    228a:	87 e6       	ldi	r24, 0x67	; 103
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 93 00 	call	0x126	; 0x126 <USART0Init>

	
	cRET = twi_init(TWI_FREQ_100K_8M);
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	0e 94 0d 02 	call	0x41a	; 0x41a <twi_init>
    2298:	89 83       	std	Y+1, r24	; 0x01
	cRET = INIT_BME();
    229a:	0e 94 31 03 	call	0x662	; 0x662 <INIT_BME>
    229e:	89 83       	std	Y+1, r24	; 0x01

	USART0SendByte(0x21);
    22a0:	81 e2       	ldi	r24, 0x21	; 33
    22a2:	0e 94 c6 00 	call	0x18c	; 0x18c <USART0SendByte>
	
	if (cRET)
    22a6:	89 81       	ldd	r24, Y+1	; 0x01
    22a8:	88 23       	and	r24, r24
    22aa:	11 f0       	breq	.+4      	; 0x22b0 <INIT+0x32>
	{
		return 1;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	01 c0       	rjmp	.+2      	; 0x22b2 <INIT+0x34>
	}
	else
	{
		return 0;
    22b0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    22b2:	0f 90       	pop	r0
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	08 95       	ret

000022ba <__subsf3>:
    22ba:	50 58       	subi	r21, 0x80	; 128

000022bc <__addsf3>:
    22bc:	bb 27       	eor	r27, r27
    22be:	aa 27       	eor	r26, r26
    22c0:	0e d0       	rcall	.+28     	; 0x22de <__addsf3x>
    22c2:	75 c1       	rjmp	.+746    	; 0x25ae <__fp_round>
    22c4:	66 d1       	rcall	.+716    	; 0x2592 <__fp_pscA>
    22c6:	30 f0       	brcs	.+12     	; 0x22d4 <__addsf3+0x18>
    22c8:	6b d1       	rcall	.+726    	; 0x25a0 <__fp_pscB>
    22ca:	20 f0       	brcs	.+8      	; 0x22d4 <__addsf3+0x18>
    22cc:	31 f4       	brne	.+12     	; 0x22da <__addsf3+0x1e>
    22ce:	9f 3f       	cpi	r25, 0xFF	; 255
    22d0:	11 f4       	brne	.+4      	; 0x22d6 <__addsf3+0x1a>
    22d2:	1e f4       	brtc	.+6      	; 0x22da <__addsf3+0x1e>
    22d4:	5b c1       	rjmp	.+694    	; 0x258c <__fp_nan>
    22d6:	0e f4       	brtc	.+2      	; 0x22da <__addsf3+0x1e>
    22d8:	e0 95       	com	r30
    22da:	e7 fb       	bst	r30, 7
    22dc:	51 c1       	rjmp	.+674    	; 0x2580 <__fp_inf>

000022de <__addsf3x>:
    22de:	e9 2f       	mov	r30, r25
    22e0:	77 d1       	rcall	.+750    	; 0x25d0 <__fp_split3>
    22e2:	80 f3       	brcs	.-32     	; 0x22c4 <__addsf3+0x8>
    22e4:	ba 17       	cp	r27, r26
    22e6:	62 07       	cpc	r22, r18
    22e8:	73 07       	cpc	r23, r19
    22ea:	84 07       	cpc	r24, r20
    22ec:	95 07       	cpc	r25, r21
    22ee:	18 f0       	brcs	.+6      	; 0x22f6 <__addsf3x+0x18>
    22f0:	71 f4       	brne	.+28     	; 0x230e <__addsf3x+0x30>
    22f2:	9e f5       	brtc	.+102    	; 0x235a <__addsf3x+0x7c>
    22f4:	8f c1       	rjmp	.+798    	; 0x2614 <__fp_zero>
    22f6:	0e f4       	brtc	.+2      	; 0x22fa <__addsf3x+0x1c>
    22f8:	e0 95       	com	r30
    22fa:	0b 2e       	mov	r0, r27
    22fc:	ba 2f       	mov	r27, r26
    22fe:	a0 2d       	mov	r26, r0
    2300:	0b 01       	movw	r0, r22
    2302:	b9 01       	movw	r22, r18
    2304:	90 01       	movw	r18, r0
    2306:	0c 01       	movw	r0, r24
    2308:	ca 01       	movw	r24, r20
    230a:	a0 01       	movw	r20, r0
    230c:	11 24       	eor	r1, r1
    230e:	ff 27       	eor	r31, r31
    2310:	59 1b       	sub	r21, r25
    2312:	99 f0       	breq	.+38     	; 0x233a <__addsf3x+0x5c>
    2314:	59 3f       	cpi	r21, 0xF9	; 249
    2316:	50 f4       	brcc	.+20     	; 0x232c <__addsf3x+0x4e>
    2318:	50 3e       	cpi	r21, 0xE0	; 224
    231a:	68 f1       	brcs	.+90     	; 0x2376 <__addsf3x+0x98>
    231c:	1a 16       	cp	r1, r26
    231e:	f0 40       	sbci	r31, 0x00	; 0
    2320:	a2 2f       	mov	r26, r18
    2322:	23 2f       	mov	r18, r19
    2324:	34 2f       	mov	r19, r20
    2326:	44 27       	eor	r20, r20
    2328:	58 5f       	subi	r21, 0xF8	; 248
    232a:	f3 cf       	rjmp	.-26     	; 0x2312 <__addsf3x+0x34>
    232c:	46 95       	lsr	r20
    232e:	37 95       	ror	r19
    2330:	27 95       	ror	r18
    2332:	a7 95       	ror	r26
    2334:	f0 40       	sbci	r31, 0x00	; 0
    2336:	53 95       	inc	r21
    2338:	c9 f7       	brne	.-14     	; 0x232c <__addsf3x+0x4e>
    233a:	7e f4       	brtc	.+30     	; 0x235a <__addsf3x+0x7c>
    233c:	1f 16       	cp	r1, r31
    233e:	ba 0b       	sbc	r27, r26
    2340:	62 0b       	sbc	r22, r18
    2342:	73 0b       	sbc	r23, r19
    2344:	84 0b       	sbc	r24, r20
    2346:	ba f0       	brmi	.+46     	; 0x2376 <__addsf3x+0x98>
    2348:	91 50       	subi	r25, 0x01	; 1
    234a:	a1 f0       	breq	.+40     	; 0x2374 <__addsf3x+0x96>
    234c:	ff 0f       	add	r31, r31
    234e:	bb 1f       	adc	r27, r27
    2350:	66 1f       	adc	r22, r22
    2352:	77 1f       	adc	r23, r23
    2354:	88 1f       	adc	r24, r24
    2356:	c2 f7       	brpl	.-16     	; 0x2348 <__addsf3x+0x6a>
    2358:	0e c0       	rjmp	.+28     	; 0x2376 <__addsf3x+0x98>
    235a:	ba 0f       	add	r27, r26
    235c:	62 1f       	adc	r22, r18
    235e:	73 1f       	adc	r23, r19
    2360:	84 1f       	adc	r24, r20
    2362:	48 f4       	brcc	.+18     	; 0x2376 <__addsf3x+0x98>
    2364:	87 95       	ror	r24
    2366:	77 95       	ror	r23
    2368:	67 95       	ror	r22
    236a:	b7 95       	ror	r27
    236c:	f7 95       	ror	r31
    236e:	9e 3f       	cpi	r25, 0xFE	; 254
    2370:	08 f0       	brcs	.+2      	; 0x2374 <__addsf3x+0x96>
    2372:	b3 cf       	rjmp	.-154    	; 0x22da <__addsf3+0x1e>
    2374:	93 95       	inc	r25
    2376:	88 0f       	add	r24, r24
    2378:	08 f0       	brcs	.+2      	; 0x237c <__addsf3x+0x9e>
    237a:	99 27       	eor	r25, r25
    237c:	ee 0f       	add	r30, r30
    237e:	97 95       	ror	r25
    2380:	87 95       	ror	r24
    2382:	08 95       	ret

00002384 <__cmpsf2>:
    2384:	d9 d0       	rcall	.+434    	; 0x2538 <__fp_cmp>
    2386:	08 f4       	brcc	.+2      	; 0x238a <__cmpsf2+0x6>
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	08 95       	ret

0000238c <__divsf3>:
    238c:	0c d0       	rcall	.+24     	; 0x23a6 <__divsf3x>
    238e:	0f c1       	rjmp	.+542    	; 0x25ae <__fp_round>
    2390:	07 d1       	rcall	.+526    	; 0x25a0 <__fp_pscB>
    2392:	40 f0       	brcs	.+16     	; 0x23a4 <__divsf3+0x18>
    2394:	fe d0       	rcall	.+508    	; 0x2592 <__fp_pscA>
    2396:	30 f0       	brcs	.+12     	; 0x23a4 <__divsf3+0x18>
    2398:	21 f4       	brne	.+8      	; 0x23a2 <__divsf3+0x16>
    239a:	5f 3f       	cpi	r21, 0xFF	; 255
    239c:	19 f0       	breq	.+6      	; 0x23a4 <__divsf3+0x18>
    239e:	f0 c0       	rjmp	.+480    	; 0x2580 <__fp_inf>
    23a0:	51 11       	cpse	r21, r1
    23a2:	39 c1       	rjmp	.+626    	; 0x2616 <__fp_szero>
    23a4:	f3 c0       	rjmp	.+486    	; 0x258c <__fp_nan>

000023a6 <__divsf3x>:
    23a6:	14 d1       	rcall	.+552    	; 0x25d0 <__fp_split3>
    23a8:	98 f3       	brcs	.-26     	; 0x2390 <__divsf3+0x4>

000023aa <__divsf3_pse>:
    23aa:	99 23       	and	r25, r25
    23ac:	c9 f3       	breq	.-14     	; 0x23a0 <__divsf3+0x14>
    23ae:	55 23       	and	r21, r21
    23b0:	b1 f3       	breq	.-20     	; 0x239e <__divsf3+0x12>
    23b2:	95 1b       	sub	r25, r21
    23b4:	55 0b       	sbc	r21, r21
    23b6:	bb 27       	eor	r27, r27
    23b8:	aa 27       	eor	r26, r26
    23ba:	62 17       	cp	r22, r18
    23bc:	73 07       	cpc	r23, r19
    23be:	84 07       	cpc	r24, r20
    23c0:	38 f0       	brcs	.+14     	; 0x23d0 <__divsf3_pse+0x26>
    23c2:	9f 5f       	subi	r25, 0xFF	; 255
    23c4:	5f 4f       	sbci	r21, 0xFF	; 255
    23c6:	22 0f       	add	r18, r18
    23c8:	33 1f       	adc	r19, r19
    23ca:	44 1f       	adc	r20, r20
    23cc:	aa 1f       	adc	r26, r26
    23ce:	a9 f3       	breq	.-22     	; 0x23ba <__divsf3_pse+0x10>
    23d0:	33 d0       	rcall	.+102    	; 0x2438 <__divsf3_pse+0x8e>
    23d2:	0e 2e       	mov	r0, r30
    23d4:	3a f0       	brmi	.+14     	; 0x23e4 <__divsf3_pse+0x3a>
    23d6:	e0 e8       	ldi	r30, 0x80	; 128
    23d8:	30 d0       	rcall	.+96     	; 0x243a <__divsf3_pse+0x90>
    23da:	91 50       	subi	r25, 0x01	; 1
    23dc:	50 40       	sbci	r21, 0x00	; 0
    23de:	e6 95       	lsr	r30
    23e0:	00 1c       	adc	r0, r0
    23e2:	ca f7       	brpl	.-14     	; 0x23d6 <__divsf3_pse+0x2c>
    23e4:	29 d0       	rcall	.+82     	; 0x2438 <__divsf3_pse+0x8e>
    23e6:	fe 2f       	mov	r31, r30
    23e8:	27 d0       	rcall	.+78     	; 0x2438 <__divsf3_pse+0x8e>
    23ea:	66 0f       	add	r22, r22
    23ec:	77 1f       	adc	r23, r23
    23ee:	88 1f       	adc	r24, r24
    23f0:	bb 1f       	adc	r27, r27
    23f2:	26 17       	cp	r18, r22
    23f4:	37 07       	cpc	r19, r23
    23f6:	48 07       	cpc	r20, r24
    23f8:	ab 07       	cpc	r26, r27
    23fa:	b0 e8       	ldi	r27, 0x80	; 128
    23fc:	09 f0       	breq	.+2      	; 0x2400 <__divsf3_pse+0x56>
    23fe:	bb 0b       	sbc	r27, r27
    2400:	80 2d       	mov	r24, r0
    2402:	bf 01       	movw	r22, r30
    2404:	ff 27       	eor	r31, r31
    2406:	93 58       	subi	r25, 0x83	; 131
    2408:	5f 4f       	sbci	r21, 0xFF	; 255
    240a:	2a f0       	brmi	.+10     	; 0x2416 <__divsf3_pse+0x6c>
    240c:	9e 3f       	cpi	r25, 0xFE	; 254
    240e:	51 05       	cpc	r21, r1
    2410:	68 f0       	brcs	.+26     	; 0x242c <__divsf3_pse+0x82>
    2412:	b6 c0       	rjmp	.+364    	; 0x2580 <__fp_inf>
    2414:	00 c1       	rjmp	.+512    	; 0x2616 <__fp_szero>
    2416:	5f 3f       	cpi	r21, 0xFF	; 255
    2418:	ec f3       	brlt	.-6      	; 0x2414 <__divsf3_pse+0x6a>
    241a:	98 3e       	cpi	r25, 0xE8	; 232
    241c:	dc f3       	brlt	.-10     	; 0x2414 <__divsf3_pse+0x6a>
    241e:	86 95       	lsr	r24
    2420:	77 95       	ror	r23
    2422:	67 95       	ror	r22
    2424:	b7 95       	ror	r27
    2426:	f7 95       	ror	r31
    2428:	9f 5f       	subi	r25, 0xFF	; 255
    242a:	c9 f7       	brne	.-14     	; 0x241e <__divsf3_pse+0x74>
    242c:	88 0f       	add	r24, r24
    242e:	91 1d       	adc	r25, r1
    2430:	96 95       	lsr	r25
    2432:	87 95       	ror	r24
    2434:	97 f9       	bld	r25, 7
    2436:	08 95       	ret
    2438:	e1 e0       	ldi	r30, 0x01	; 1
    243a:	66 0f       	add	r22, r22
    243c:	77 1f       	adc	r23, r23
    243e:	88 1f       	adc	r24, r24
    2440:	bb 1f       	adc	r27, r27
    2442:	62 17       	cp	r22, r18
    2444:	73 07       	cpc	r23, r19
    2446:	84 07       	cpc	r24, r20
    2448:	ba 07       	cpc	r27, r26
    244a:	20 f0       	brcs	.+8      	; 0x2454 <__divsf3_pse+0xaa>
    244c:	62 1b       	sub	r22, r18
    244e:	73 0b       	sbc	r23, r19
    2450:	84 0b       	sbc	r24, r20
    2452:	ba 0b       	sbc	r27, r26
    2454:	ee 1f       	adc	r30, r30
    2456:	88 f7       	brcc	.-30     	; 0x243a <__divsf3_pse+0x90>
    2458:	e0 95       	com	r30
    245a:	08 95       	ret

0000245c <__fixsfsi>:
    245c:	04 d0       	rcall	.+8      	; 0x2466 <__fixunssfsi>
    245e:	68 94       	set
    2460:	b1 11       	cpse	r27, r1
    2462:	d9 c0       	rjmp	.+434    	; 0x2616 <__fp_szero>
    2464:	08 95       	ret

00002466 <__fixunssfsi>:
    2466:	bc d0       	rcall	.+376    	; 0x25e0 <__fp_splitA>
    2468:	88 f0       	brcs	.+34     	; 0x248c <__fixunssfsi+0x26>
    246a:	9f 57       	subi	r25, 0x7F	; 127
    246c:	90 f0       	brcs	.+36     	; 0x2492 <__fixunssfsi+0x2c>
    246e:	b9 2f       	mov	r27, r25
    2470:	99 27       	eor	r25, r25
    2472:	b7 51       	subi	r27, 0x17	; 23
    2474:	a0 f0       	brcs	.+40     	; 0x249e <__fixunssfsi+0x38>
    2476:	d1 f0       	breq	.+52     	; 0x24ac <__fixunssfsi+0x46>
    2478:	66 0f       	add	r22, r22
    247a:	77 1f       	adc	r23, r23
    247c:	88 1f       	adc	r24, r24
    247e:	99 1f       	adc	r25, r25
    2480:	1a f0       	brmi	.+6      	; 0x2488 <__fixunssfsi+0x22>
    2482:	ba 95       	dec	r27
    2484:	c9 f7       	brne	.-14     	; 0x2478 <__fixunssfsi+0x12>
    2486:	12 c0       	rjmp	.+36     	; 0x24ac <__fixunssfsi+0x46>
    2488:	b1 30       	cpi	r27, 0x01	; 1
    248a:	81 f0       	breq	.+32     	; 0x24ac <__fixunssfsi+0x46>
    248c:	c3 d0       	rcall	.+390    	; 0x2614 <__fp_zero>
    248e:	b1 e0       	ldi	r27, 0x01	; 1
    2490:	08 95       	ret
    2492:	c0 c0       	rjmp	.+384    	; 0x2614 <__fp_zero>
    2494:	67 2f       	mov	r22, r23
    2496:	78 2f       	mov	r23, r24
    2498:	88 27       	eor	r24, r24
    249a:	b8 5f       	subi	r27, 0xF8	; 248
    249c:	39 f0       	breq	.+14     	; 0x24ac <__fixunssfsi+0x46>
    249e:	b9 3f       	cpi	r27, 0xF9	; 249
    24a0:	cc f3       	brlt	.-14     	; 0x2494 <__fixunssfsi+0x2e>
    24a2:	86 95       	lsr	r24
    24a4:	77 95       	ror	r23
    24a6:	67 95       	ror	r22
    24a8:	b3 95       	inc	r27
    24aa:	d9 f7       	brne	.-10     	; 0x24a2 <__fixunssfsi+0x3c>
    24ac:	3e f4       	brtc	.+14     	; 0x24bc <__fixunssfsi+0x56>
    24ae:	90 95       	com	r25
    24b0:	80 95       	com	r24
    24b2:	70 95       	com	r23
    24b4:	61 95       	neg	r22
    24b6:	7f 4f       	sbci	r23, 0xFF	; 255
    24b8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ba:	9f 4f       	sbci	r25, 0xFF	; 255
    24bc:	08 95       	ret

000024be <__floatunsisf>:
    24be:	e8 94       	clt
    24c0:	09 c0       	rjmp	.+18     	; 0x24d4 <__floatsisf+0x12>

000024c2 <__floatsisf>:
    24c2:	97 fb       	bst	r25, 7
    24c4:	3e f4       	brtc	.+14     	; 0x24d4 <__floatsisf+0x12>
    24c6:	90 95       	com	r25
    24c8:	80 95       	com	r24
    24ca:	70 95       	com	r23
    24cc:	61 95       	neg	r22
    24ce:	7f 4f       	sbci	r23, 0xFF	; 255
    24d0:	8f 4f       	sbci	r24, 0xFF	; 255
    24d2:	9f 4f       	sbci	r25, 0xFF	; 255
    24d4:	99 23       	and	r25, r25
    24d6:	a9 f0       	breq	.+42     	; 0x2502 <__floatsisf+0x40>
    24d8:	f9 2f       	mov	r31, r25
    24da:	96 e9       	ldi	r25, 0x96	; 150
    24dc:	bb 27       	eor	r27, r27
    24de:	93 95       	inc	r25
    24e0:	f6 95       	lsr	r31
    24e2:	87 95       	ror	r24
    24e4:	77 95       	ror	r23
    24e6:	67 95       	ror	r22
    24e8:	b7 95       	ror	r27
    24ea:	f1 11       	cpse	r31, r1
    24ec:	f8 cf       	rjmp	.-16     	; 0x24de <__floatsisf+0x1c>
    24ee:	fa f4       	brpl	.+62     	; 0x252e <__floatsisf+0x6c>
    24f0:	bb 0f       	add	r27, r27
    24f2:	11 f4       	brne	.+4      	; 0x24f8 <__floatsisf+0x36>
    24f4:	60 ff       	sbrs	r22, 0
    24f6:	1b c0       	rjmp	.+54     	; 0x252e <__floatsisf+0x6c>
    24f8:	6f 5f       	subi	r22, 0xFF	; 255
    24fa:	7f 4f       	sbci	r23, 0xFF	; 255
    24fc:	8f 4f       	sbci	r24, 0xFF	; 255
    24fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2500:	16 c0       	rjmp	.+44     	; 0x252e <__floatsisf+0x6c>
    2502:	88 23       	and	r24, r24
    2504:	11 f0       	breq	.+4      	; 0x250a <__floatsisf+0x48>
    2506:	96 e9       	ldi	r25, 0x96	; 150
    2508:	11 c0       	rjmp	.+34     	; 0x252c <__floatsisf+0x6a>
    250a:	77 23       	and	r23, r23
    250c:	21 f0       	breq	.+8      	; 0x2516 <__floatsisf+0x54>
    250e:	9e e8       	ldi	r25, 0x8E	; 142
    2510:	87 2f       	mov	r24, r23
    2512:	76 2f       	mov	r23, r22
    2514:	05 c0       	rjmp	.+10     	; 0x2520 <__floatsisf+0x5e>
    2516:	66 23       	and	r22, r22
    2518:	71 f0       	breq	.+28     	; 0x2536 <__floatsisf+0x74>
    251a:	96 e8       	ldi	r25, 0x86	; 134
    251c:	86 2f       	mov	r24, r22
    251e:	70 e0       	ldi	r23, 0x00	; 0
    2520:	60 e0       	ldi	r22, 0x00	; 0
    2522:	2a f0       	brmi	.+10     	; 0x252e <__floatsisf+0x6c>
    2524:	9a 95       	dec	r25
    2526:	66 0f       	add	r22, r22
    2528:	77 1f       	adc	r23, r23
    252a:	88 1f       	adc	r24, r24
    252c:	da f7       	brpl	.-10     	; 0x2524 <__floatsisf+0x62>
    252e:	88 0f       	add	r24, r24
    2530:	96 95       	lsr	r25
    2532:	87 95       	ror	r24
    2534:	97 f9       	bld	r25, 7
    2536:	08 95       	ret

00002538 <__fp_cmp>:
    2538:	99 0f       	add	r25, r25
    253a:	00 08       	sbc	r0, r0
    253c:	55 0f       	add	r21, r21
    253e:	aa 0b       	sbc	r26, r26
    2540:	e0 e8       	ldi	r30, 0x80	; 128
    2542:	fe ef       	ldi	r31, 0xFE	; 254
    2544:	16 16       	cp	r1, r22
    2546:	17 06       	cpc	r1, r23
    2548:	e8 07       	cpc	r30, r24
    254a:	f9 07       	cpc	r31, r25
    254c:	c0 f0       	brcs	.+48     	; 0x257e <__fp_cmp+0x46>
    254e:	12 16       	cp	r1, r18
    2550:	13 06       	cpc	r1, r19
    2552:	e4 07       	cpc	r30, r20
    2554:	f5 07       	cpc	r31, r21
    2556:	98 f0       	brcs	.+38     	; 0x257e <__fp_cmp+0x46>
    2558:	62 1b       	sub	r22, r18
    255a:	73 0b       	sbc	r23, r19
    255c:	84 0b       	sbc	r24, r20
    255e:	95 0b       	sbc	r25, r21
    2560:	39 f4       	brne	.+14     	; 0x2570 <__fp_cmp+0x38>
    2562:	0a 26       	eor	r0, r26
    2564:	61 f0       	breq	.+24     	; 0x257e <__fp_cmp+0x46>
    2566:	23 2b       	or	r18, r19
    2568:	24 2b       	or	r18, r20
    256a:	25 2b       	or	r18, r21
    256c:	21 f4       	brne	.+8      	; 0x2576 <__fp_cmp+0x3e>
    256e:	08 95       	ret
    2570:	0a 26       	eor	r0, r26
    2572:	09 f4       	brne	.+2      	; 0x2576 <__fp_cmp+0x3e>
    2574:	a1 40       	sbci	r26, 0x01	; 1
    2576:	a6 95       	lsr	r26
    2578:	8f ef       	ldi	r24, 0xFF	; 255
    257a:	81 1d       	adc	r24, r1
    257c:	81 1d       	adc	r24, r1
    257e:	08 95       	ret

00002580 <__fp_inf>:
    2580:	97 f9       	bld	r25, 7
    2582:	9f 67       	ori	r25, 0x7F	; 127
    2584:	80 e8       	ldi	r24, 0x80	; 128
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	60 e0       	ldi	r22, 0x00	; 0
    258a:	08 95       	ret

0000258c <__fp_nan>:
    258c:	9f ef       	ldi	r25, 0xFF	; 255
    258e:	80 ec       	ldi	r24, 0xC0	; 192
    2590:	08 95       	ret

00002592 <__fp_pscA>:
    2592:	00 24       	eor	r0, r0
    2594:	0a 94       	dec	r0
    2596:	16 16       	cp	r1, r22
    2598:	17 06       	cpc	r1, r23
    259a:	18 06       	cpc	r1, r24
    259c:	09 06       	cpc	r0, r25
    259e:	08 95       	ret

000025a0 <__fp_pscB>:
    25a0:	00 24       	eor	r0, r0
    25a2:	0a 94       	dec	r0
    25a4:	12 16       	cp	r1, r18
    25a6:	13 06       	cpc	r1, r19
    25a8:	14 06       	cpc	r1, r20
    25aa:	05 06       	cpc	r0, r21
    25ac:	08 95       	ret

000025ae <__fp_round>:
    25ae:	09 2e       	mov	r0, r25
    25b0:	03 94       	inc	r0
    25b2:	00 0c       	add	r0, r0
    25b4:	11 f4       	brne	.+4      	; 0x25ba <__fp_round+0xc>
    25b6:	88 23       	and	r24, r24
    25b8:	52 f0       	brmi	.+20     	; 0x25ce <__fp_round+0x20>
    25ba:	bb 0f       	add	r27, r27
    25bc:	40 f4       	brcc	.+16     	; 0x25ce <__fp_round+0x20>
    25be:	bf 2b       	or	r27, r31
    25c0:	11 f4       	brne	.+4      	; 0x25c6 <__fp_round+0x18>
    25c2:	60 ff       	sbrs	r22, 0
    25c4:	04 c0       	rjmp	.+8      	; 0x25ce <__fp_round+0x20>
    25c6:	6f 5f       	subi	r22, 0xFF	; 255
    25c8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ca:	8f 4f       	sbci	r24, 0xFF	; 255
    25cc:	9f 4f       	sbci	r25, 0xFF	; 255
    25ce:	08 95       	ret

000025d0 <__fp_split3>:
    25d0:	57 fd       	sbrc	r21, 7
    25d2:	90 58       	subi	r25, 0x80	; 128
    25d4:	44 0f       	add	r20, r20
    25d6:	55 1f       	adc	r21, r21
    25d8:	59 f0       	breq	.+22     	; 0x25f0 <__fp_splitA+0x10>
    25da:	5f 3f       	cpi	r21, 0xFF	; 255
    25dc:	71 f0       	breq	.+28     	; 0x25fa <__fp_splitA+0x1a>
    25de:	47 95       	ror	r20

000025e0 <__fp_splitA>:
    25e0:	88 0f       	add	r24, r24
    25e2:	97 fb       	bst	r25, 7
    25e4:	99 1f       	adc	r25, r25
    25e6:	61 f0       	breq	.+24     	; 0x2600 <__fp_splitA+0x20>
    25e8:	9f 3f       	cpi	r25, 0xFF	; 255
    25ea:	79 f0       	breq	.+30     	; 0x260a <__fp_splitA+0x2a>
    25ec:	87 95       	ror	r24
    25ee:	08 95       	ret
    25f0:	12 16       	cp	r1, r18
    25f2:	13 06       	cpc	r1, r19
    25f4:	14 06       	cpc	r1, r20
    25f6:	55 1f       	adc	r21, r21
    25f8:	f2 cf       	rjmp	.-28     	; 0x25de <__fp_split3+0xe>
    25fa:	46 95       	lsr	r20
    25fc:	f1 df       	rcall	.-30     	; 0x25e0 <__fp_splitA>
    25fe:	08 c0       	rjmp	.+16     	; 0x2610 <__fp_splitA+0x30>
    2600:	16 16       	cp	r1, r22
    2602:	17 06       	cpc	r1, r23
    2604:	18 06       	cpc	r1, r24
    2606:	99 1f       	adc	r25, r25
    2608:	f1 cf       	rjmp	.-30     	; 0x25ec <__fp_splitA+0xc>
    260a:	86 95       	lsr	r24
    260c:	71 05       	cpc	r23, r1
    260e:	61 05       	cpc	r22, r1
    2610:	08 94       	sec
    2612:	08 95       	ret

00002614 <__fp_zero>:
    2614:	e8 94       	clt

00002616 <__fp_szero>:
    2616:	bb 27       	eor	r27, r27
    2618:	66 27       	eor	r22, r22
    261a:	77 27       	eor	r23, r23
    261c:	cb 01       	movw	r24, r22
    261e:	97 f9       	bld	r25, 7
    2620:	08 95       	ret

00002622 <__gesf2>:
    2622:	8a df       	rcall	.-236    	; 0x2538 <__fp_cmp>
    2624:	08 f4       	brcc	.+2      	; 0x2628 <__gesf2+0x6>
    2626:	8f ef       	ldi	r24, 0xFF	; 255
    2628:	08 95       	ret

0000262a <__mulsf3>:
    262a:	0b d0       	rcall	.+22     	; 0x2642 <__mulsf3x>
    262c:	c0 cf       	rjmp	.-128    	; 0x25ae <__fp_round>
    262e:	b1 df       	rcall	.-158    	; 0x2592 <__fp_pscA>
    2630:	28 f0       	brcs	.+10     	; 0x263c <__mulsf3+0x12>
    2632:	b6 df       	rcall	.-148    	; 0x25a0 <__fp_pscB>
    2634:	18 f0       	brcs	.+6      	; 0x263c <__mulsf3+0x12>
    2636:	95 23       	and	r25, r21
    2638:	09 f0       	breq	.+2      	; 0x263c <__mulsf3+0x12>
    263a:	a2 cf       	rjmp	.-188    	; 0x2580 <__fp_inf>
    263c:	a7 cf       	rjmp	.-178    	; 0x258c <__fp_nan>
    263e:	11 24       	eor	r1, r1
    2640:	ea cf       	rjmp	.-44     	; 0x2616 <__fp_szero>

00002642 <__mulsf3x>:
    2642:	c6 df       	rcall	.-116    	; 0x25d0 <__fp_split3>
    2644:	a0 f3       	brcs	.-24     	; 0x262e <__mulsf3+0x4>

00002646 <__mulsf3_pse>:
    2646:	95 9f       	mul	r25, r21
    2648:	d1 f3       	breq	.-12     	; 0x263e <__mulsf3+0x14>
    264a:	95 0f       	add	r25, r21
    264c:	50 e0       	ldi	r21, 0x00	; 0
    264e:	55 1f       	adc	r21, r21
    2650:	62 9f       	mul	r22, r18
    2652:	f0 01       	movw	r30, r0
    2654:	72 9f       	mul	r23, r18
    2656:	bb 27       	eor	r27, r27
    2658:	f0 0d       	add	r31, r0
    265a:	b1 1d       	adc	r27, r1
    265c:	63 9f       	mul	r22, r19
    265e:	aa 27       	eor	r26, r26
    2660:	f0 0d       	add	r31, r0
    2662:	b1 1d       	adc	r27, r1
    2664:	aa 1f       	adc	r26, r26
    2666:	64 9f       	mul	r22, r20
    2668:	66 27       	eor	r22, r22
    266a:	b0 0d       	add	r27, r0
    266c:	a1 1d       	adc	r26, r1
    266e:	66 1f       	adc	r22, r22
    2670:	82 9f       	mul	r24, r18
    2672:	22 27       	eor	r18, r18
    2674:	b0 0d       	add	r27, r0
    2676:	a1 1d       	adc	r26, r1
    2678:	62 1f       	adc	r22, r18
    267a:	73 9f       	mul	r23, r19
    267c:	b0 0d       	add	r27, r0
    267e:	a1 1d       	adc	r26, r1
    2680:	62 1f       	adc	r22, r18
    2682:	83 9f       	mul	r24, r19
    2684:	a0 0d       	add	r26, r0
    2686:	61 1d       	adc	r22, r1
    2688:	22 1f       	adc	r18, r18
    268a:	74 9f       	mul	r23, r20
    268c:	33 27       	eor	r19, r19
    268e:	a0 0d       	add	r26, r0
    2690:	61 1d       	adc	r22, r1
    2692:	23 1f       	adc	r18, r19
    2694:	84 9f       	mul	r24, r20
    2696:	60 0d       	add	r22, r0
    2698:	21 1d       	adc	r18, r1
    269a:	82 2f       	mov	r24, r18
    269c:	76 2f       	mov	r23, r22
    269e:	6a 2f       	mov	r22, r26
    26a0:	11 24       	eor	r1, r1
    26a2:	9f 57       	subi	r25, 0x7F	; 127
    26a4:	50 40       	sbci	r21, 0x00	; 0
    26a6:	8a f0       	brmi	.+34     	; 0x26ca <__mulsf3_pse+0x84>
    26a8:	e1 f0       	breq	.+56     	; 0x26e2 <__mulsf3_pse+0x9c>
    26aa:	88 23       	and	r24, r24
    26ac:	4a f0       	brmi	.+18     	; 0x26c0 <__mulsf3_pse+0x7a>
    26ae:	ee 0f       	add	r30, r30
    26b0:	ff 1f       	adc	r31, r31
    26b2:	bb 1f       	adc	r27, r27
    26b4:	66 1f       	adc	r22, r22
    26b6:	77 1f       	adc	r23, r23
    26b8:	88 1f       	adc	r24, r24
    26ba:	91 50       	subi	r25, 0x01	; 1
    26bc:	50 40       	sbci	r21, 0x00	; 0
    26be:	a9 f7       	brne	.-22     	; 0x26aa <__mulsf3_pse+0x64>
    26c0:	9e 3f       	cpi	r25, 0xFE	; 254
    26c2:	51 05       	cpc	r21, r1
    26c4:	70 f0       	brcs	.+28     	; 0x26e2 <__mulsf3_pse+0x9c>
    26c6:	5c cf       	rjmp	.-328    	; 0x2580 <__fp_inf>
    26c8:	a6 cf       	rjmp	.-180    	; 0x2616 <__fp_szero>
    26ca:	5f 3f       	cpi	r21, 0xFF	; 255
    26cc:	ec f3       	brlt	.-6      	; 0x26c8 <__mulsf3_pse+0x82>
    26ce:	98 3e       	cpi	r25, 0xE8	; 232
    26d0:	dc f3       	brlt	.-10     	; 0x26c8 <__mulsf3_pse+0x82>
    26d2:	86 95       	lsr	r24
    26d4:	77 95       	ror	r23
    26d6:	67 95       	ror	r22
    26d8:	b7 95       	ror	r27
    26da:	f7 95       	ror	r31
    26dc:	e7 95       	ror	r30
    26de:	9f 5f       	subi	r25, 0xFF	; 255
    26e0:	c1 f7       	brne	.-16     	; 0x26d2 <__mulsf3_pse+0x8c>
    26e2:	fe 2b       	or	r31, r30
    26e4:	88 0f       	add	r24, r24
    26e6:	91 1d       	adc	r25, r1
    26e8:	96 95       	lsr	r25
    26ea:	87 95       	ror	r24
    26ec:	97 f9       	bld	r25, 7
    26ee:	08 95       	ret

000026f0 <__tablejump2__>:
    26f0:	ee 0f       	add	r30, r30
    26f2:	ff 1f       	adc	r31, r31
    26f4:	88 1f       	adc	r24, r24
    26f6:	8b bf       	out	0x3b, r24	; 59
    26f8:	07 90       	elpm	r0, Z+
    26fa:	f6 91       	elpm	r31, Z
    26fc:	e0 2d       	mov	r30, r0
    26fe:	19 94       	eijmp

00002700 <_exit>:
    2700:	f8 94       	cli

00002702 <__stop_program>:
    2702:	ff cf       	rjmp	.-2      	; 0x2702 <__stop_program>
